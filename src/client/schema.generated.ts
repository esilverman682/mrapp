/**
 * GQTY AUTO-GENERATED CODE: PLEASE DO NOT MODIFY MANUALLY
 */

import { SchemaUnionsKey } from "gqty";

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K];
};
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>;
};
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>;
};
/** All built-in and custom scalars, mapped to their actual values */
export interface Scalars {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** The `Upload` special type represents a file to be uploaded in the same HTTP request as specified by [graphql-multipart-request-spec](https://github.com/jaydenseric/graphql-multipart-request-spec). */
  Upload: any;
}

/** Countries supported by Gravity Forms Address Field. */
export enum AddressFieldCountryEnum {
  /** Andorra . */
  AD = "AD",
  /** United Arab Emirates . */
  AE = "AE",
  /** Afghanistan . */
  AF = "AF",
  /** Antigua and Barbuda . */
  AG = "AG",
  /** Anguilla . */
  AI = "AI",
  /** Albania . */
  AL = "AL",
  /** Armenia . */
  AM = "AM",
  /** Angola . */
  AO = "AO",
  /** Antarctica . */
  AQ = "AQ",
  /** Argentina . */
  AR = "AR",
  /** American Samoa . */
  AS = "AS",
  /** Austria . */
  AT = "AT",
  /** Australia . */
  AU = "AU",
  /** Aruba . */
  AW = "AW",
  /** Åland Islands . */
  AX = "AX",
  /** Azerbaijan . */
  AZ = "AZ",
  /** Bosnia and Herzegovina . */
  BA = "BA",
  /** Barbados . */
  BB = "BB",
  /** Bangladesh . */
  BD = "BD",
  /** Belgium . */
  BE = "BE",
  /** Burkina Faso . */
  BF = "BF",
  /** Bulgaria . */
  BG = "BG",
  /** Bahrain . */
  BH = "BH",
  /** Burundi . */
  BI = "BI",
  /** Benin . */
  BJ = "BJ",
  /** Saint Barthélemy . */
  BL = "BL",
  /** Bermuda . */
  BM = "BM",
  /** Brunei Darussalam . */
  BN = "BN",
  /** Bolivia . */
  BO = "BO",
  /** Bonaire, Sint Eustatius and Saba . */
  BQ = "BQ",
  /** Brazil . */
  BR = "BR",
  /** Bahamas . */
  BS = "BS",
  /** Bhutan . */
  BT = "BT",
  /** Bouvet Island . */
  BV = "BV",
  /** Botswana . */
  BW = "BW",
  /** Belarus . */
  BY = "BY",
  /** Belize . */
  BZ = "BZ",
  /** Canada . */
  CA = "CA",
  /** Cocos Islands . */
  CC = "CC",
  /** Congo, Democratic Republic of the . */
  CD = "CD",
  /** Central African Republic . */
  CF = "CF",
  /** Congo, Republic of the . */
  CG = "CG",
  /** Switzerland . */
  CH = "CH",
  /** Côte d'Ivoire . */
  CI = "CI",
  /** Cook Islands . */
  CK = "CK",
  /** Chile . */
  CL = "CL",
  /** Cameroon . */
  CM = "CM",
  /** China . */
  CN = "CN",
  /** Colombia . */
  CO = "CO",
  /** Costa Rica . */
  CR = "CR",
  /** Cuba . */
  CU = "CU",
  /** Cape Verde . */
  CV = "CV",
  /** Curaçao . */
  CW = "CW",
  /** Christmas Island . */
  CX = "CX",
  /** Cyprus . */
  CY = "CY",
  /** Czech Republic . */
  CZ = "CZ",
  /** Germany . */
  DE = "DE",
  /** Djibouti . */
  DJ = "DJ",
  /** Denmark . */
  DK = "DK",
  /** Dominica . */
  DM = "DM",
  /** Dominican Republic . */
  DO = "DO",
  /** Algeria . */
  DZ = "DZ",
  /** Ecuador . */
  EC = "EC",
  /** Estonia . */
  EE = "EE",
  /** Egypt . */
  EG = "EG",
  /** Western Sahara . */
  EH = "EH",
  /** Eritrea . */
  ER = "ER",
  /** Spain . */
  ES = "ES",
  /** Ethiopia . */
  ET = "ET",
  /** Finland . */
  FI = "FI",
  /** Fiji . */
  FJ = "FJ",
  /** Falkland Islands . */
  FK = "FK",
  /** Micronesia . */
  FM = "FM",
  /** Faroe Islands . */
  FO = "FO",
  /** France . */
  FR = "FR",
  /** Gabon . */
  GA = "GA",
  /** United Kingdom . */
  GB = "GB",
  /** Grenada . */
  GD = "GD",
  /** Georgia . */
  GE = "GE",
  /** French Guiana . */
  GF = "GF",
  /** Guernsey . */
  GG = "GG",
  /** Ghana . */
  GH = "GH",
  /** Gibraltar . */
  GI = "GI",
  /** Greenland . */
  GL = "GL",
  /** Gambia . */
  GM = "GM",
  /** Guinea . */
  GN = "GN",
  /** Guadeloupe . */
  GP = "GP",
  /** Equatorial Guinea . */
  GQ = "GQ",
  /** Greece . */
  GR = "GR",
  /** South Georgia . */
  GS = "GS",
  /** Guatemala . */
  GT = "GT",
  /** Guam . */
  GU = "GU",
  /** Guinea-Bissau . */
  GW = "GW",
  /** Guyana . */
  GY = "GY",
  /** Hong Kong . */
  HK = "HK",
  /** Heard and McDonald Islands . */
  HM = "HM",
  /** Honduras . */
  HN = "HN",
  /** Croatia . */
  HR = "HR",
  /** Haiti . */
  HT = "HT",
  /** Hungary . */
  HU = "HU",
  /** Indonesia . */
  ID = "ID",
  /** Ireland . */
  IE = "IE",
  /** Israel . */
  IL = "IL",
  /** Isle of Man . */
  IM = "IM",
  /** India . */
  IN = "IN",
  /** British Indian Ocean Territory . */
  IO = "IO",
  /** Iraq . */
  IQ = "IQ",
  /** Iran . */
  IR = "IR",
  /** Iceland . */
  IS = "IS",
  /** Italy . */
  IT = "IT",
  /** Jersey . */
  JE = "JE",
  /** Jamaica . */
  JM = "JM",
  /** Jordan . */
  JO = "JO",
  /** Japan . */
  JP = "JP",
  /** Kenya . */
  KE = "KE",
  /** Kyrgyzstan . */
  KG = "KG",
  /** Cambodia . */
  KH = "KH",
  /** Kiribati . */
  KI = "KI",
  /** Comoros . */
  KM = "KM",
  /** Saint Kitts and Nevis . */
  KN = "KN",
  /** North Korea . */
  KP = "KP",
  /** South Korea . */
  KR = "KR",
  /** Kuwait . */
  KW = "KW",
  /** Cayman Islands . */
  KY = "KY",
  /** Kazakhstan . */
  KZ = "KZ",
  /** Lao People's Democratic Republic . */
  LA = "LA",
  /** Lebanon . */
  LB = "LB",
  /** Saint Lucia . */
  LC = "LC",
  /** Liechtenstein . */
  LI = "LI",
  /** Sri Lanka . */
  LK = "LK",
  /** Liberia . */
  LR = "LR",
  /** Lesotho . */
  LS = "LS",
  /** Lithuania . */
  LT = "LT",
  /** Luxembourg . */
  LU = "LU",
  /** Latvia . */
  LV = "LV",
  /** Libya . */
  LY = "LY",
  /** Morocco . */
  MA = "MA",
  /** Monaco . */
  MC = "MC",
  /** Moldova . */
  MD = "MD",
  /** Montenegro . */
  ME = "ME",
  /** Saint Martin . */
  MF = "MF",
  /** Madagascar . */
  MG = "MG",
  /** Marshall Islands . */
  MH = "MH",
  /** Macedonia . */
  MK = "MK",
  /** Mali . */
  ML = "ML",
  /** Myanmar . */
  MM = "MM",
  /** Mongolia . */
  MN = "MN",
  /** Macau . */
  MO = "MO",
  /** Northern Mariana Islands . */
  MP = "MP",
  /** Martinique . */
  MQ = "MQ",
  /** Mauritania . */
  MR = "MR",
  /** Montserrat . */
  MS = "MS",
  /** Malta . */
  MT = "MT",
  /** Mauritius . */
  MU = "MU",
  /** Maldives . */
  MV = "MV",
  /** Malawi . */
  MW = "MW",
  /** Mexico . */
  MX = "MX",
  /** Malaysia . */
  MY = "MY",
  /** Mozambique . */
  MZ = "MZ",
  /** Namibia . */
  NA = "NA",
  /** New Caledonia . */
  NC = "NC",
  /** Niger . */
  NE = "NE",
  /** Norfolk Island . */
  NF = "NF",
  /** Nigeria . */
  NG = "NG",
  /** Nicaragua . */
  NI = "NI",
  /** Netherlands . */
  NL = "NL",
  /** Norway . */
  NO = "NO",
  /** Nepal . */
  NP = "NP",
  /** Nauru . */
  NR = "NR",
  /** Niue . */
  NU = "NU",
  /** New Zealand . */
  NZ = "NZ",
  /** Oman . */
  OM = "OM",
  /** Panama . */
  PA = "PA",
  /** Peru . */
  PE = "PE",
  /** French Polynesia . */
  PF = "PF",
  /** Papua New Guinea . */
  PG = "PG",
  /** Philippines . */
  PH = "PH",
  /** Pakistan . */
  PK = "PK",
  /** Poland . */
  PL = "PL",
  /** Saint Pierre and Miquelon . */
  PM = "PM",
  /** Pitcairn . */
  PN = "PN",
  /** Puerto Rico . */
  PR = "PR",
  /** Palestine, State of . */
  PS = "PS",
  /** Portugal . */
  PT = "PT",
  /** Palau . */
  PW = "PW",
  /** Paraguay . */
  PY = "PY",
  /** Qatar . */
  QA = "QA",
  /** Réunion . */
  RE = "RE",
  /** Romania . */
  RO = "RO",
  /** Serbia . */
  RS = "RS",
  /** Russia . */
  RU = "RU",
  /** Rwanda . */
  RW = "RW",
  /** Saudi Arabia . */
  SA = "SA",
  /** Solomon Islands . */
  SB = "SB",
  /** Seychelles . */
  SC = "SC",
  /** Sudan . */
  SD = "SD",
  /** Sweden . */
  SE = "SE",
  /** Singapore . */
  SG = "SG",
  /** Saint Helena . */
  SH = "SH",
  /** Slovenia . */
  SI = "SI",
  /** Svalbard and Jan Mayen Islands . */
  SJ = "SJ",
  /** Slovakia . */
  SK = "SK",
  /** Sierra Leone . */
  SL = "SL",
  /** San Marino . */
  SM = "SM",
  /** Senegal . */
  SN = "SN",
  /** Somalia . */
  SO = "SO",
  /** Suriname . */
  SR = "SR",
  /** South Sudan . */
  SS = "SS",
  /** Sao Tome and Principe . */
  ST = "ST",
  /** El Salvador . */
  SV = "SV",
  /** Sint Maarten . */
  SX = "SX",
  /** Syria . */
  SY = "SY",
  /** Eswatini (Swaziland) . */
  SZ = "SZ",
  /** Turks and Caicos Islands . */
  TC = "TC",
  /** Chad . */
  TD = "TD",
  /** French Southern Territories . */
  TF = "TF",
  /** Togo . */
  TG = "TG",
  /** Thailand . */
  TH = "TH",
  /** Tajikistan . */
  TJ = "TJ",
  /** Tokelau . */
  TK = "TK",
  /** Timor-Leste . */
  TL = "TL",
  /** Turkmenistan . */
  TM = "TM",
  /** Tunisia . */
  TN = "TN",
  /** Tonga . */
  TO = "TO",
  /** Turkey . */
  TR = "TR",
  /** Trinidad and Tobago . */
  TT = "TT",
  /** Tuvalu . */
  TV = "TV",
  /** Taiwan . */
  TW = "TW",
  /** Tanzania . */
  TZ = "TZ",
  /** Ukraine . */
  UA = "UA",
  /** Uganda . */
  UG = "UG",
  /** US Minor Outlying Islands . */
  UM = "UM",
  /** United States . */
  US = "US",
  /** Uruguay . */
  UY = "UY",
  /** Uzbekistan . */
  UZ = "UZ",
  /** Holy See . */
  VA = "VA",
  /** Saint Vincent and the Grenadines . */
  VC = "VC",
  /** Venezuela . */
  VE = "VE",
  /** Virgin Islands, British . */
  VG = "VG",
  /** Virgin Islands, U.S. . */
  VI = "VI",
  /** Vietnam . */
  VN = "VN",
  /** Vanuatu . */
  VU = "VU",
  /** Wallis and Futuna . */
  WF = "WF",
  /** Samoa . */
  WS = "WS",
  /** Yemen . */
  YE = "YE",
  /** Mayotte . */
  YT = "YT",
  /** South Africa . */
  ZA = "ZA",
  /** Zambia . */
  ZM = "ZM",
  /** Zimbabwe . */
  ZW = "ZW",
}

/** Input fields for Address FormField. */
export interface AddressFieldInput {
  /** Address city. */
  city?: InputMaybe<Scalars["String"]>;
  /** Address country. */
  country?: InputMaybe<AddressFieldCountryEnum>;
  /** Address line two. */
  lineTwo?: InputMaybe<Scalars["String"]>;
  /** Address state/region/province name. */
  state?: InputMaybe<Scalars["String"]>;
  /** Street address. */
  street?: InputMaybe<Scalars["String"]>;
  /** Address zip code. */
  zip?: InputMaybe<Scalars["String"]>;
}

/** Determines the type of address to be displayed. */
export enum AddressFieldTypeEnum {
  /** Canada address type. */
  CANADA = "CANADA",
  /** International address type. */
  INTERNATIONAL = "INTERNATIONAL",
  /** United States address type. */
  US = "US",
}

/** The AM or PM cycle in a 12-hour clock. */
export enum AmPmEnum {
  /** AM. The first 12-hour cycle of the day. */
  AM = "AM",
  /** PM. The second 12-hour cycle of the day. */
  PM = "PM",
}

/** What rating to display avatars up to. Accepts 'G', 'PG', 'R', 'X', and are judged in that order. Default is the value of the 'avatar_rating' option */
export enum AvatarRatingEnum {
  /** Indicates a G level avatar rating level. */
  G = "G",
  /** Indicates a PG level avatar rating level. */
  PG = "PG",
  /** Indicates an R level avatar rating level. */
  R = "R",
  /** Indicates an X level avatar rating level. */
  X = "X",
}

/** The position to place the (invisible) reCaptcha badge. */
export enum CaptchaFieldBadgePositionEnum {
  /** Bottom-left position. */
  BOTTOM_LEFT = "BOTTOM_LEFT",
  /** Bottom-right position. */
  BOTTOM_RIGHT = "BOTTOM_RIGHT",
  /** Inline position. */
  INLINE = "INLINE",
}

/** The theme to be used for the reCAPTCHA field. */
export enum CaptchaFieldThemeEnum {
  /** Dark reCAPTCHA theme. */
  DARK = "DARK",
  /** Light reCAPTCHA theme. */
  LIGHT = "LIGHT",
}

/** Type of CAPTCHA field to be used. */
export enum CaptchaFieldTypeEnum {
  /** Math CAPTCHA type. */
  MATH = "MATH",
  /** reCAPTCHA type. */
  RECAPTCHA = "RECAPTCHA",
  /** Simple CAPTCHA type. */
  SIMPLE = "SIMPLE",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum CategoryIdType {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Arguments for filtering the CategoryToCategoryConnection connection */
export interface CategoryToCategoryConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the CategoryToContentNodeConnection connection */
export interface CategoryToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfCategoryEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the CategoryToPostConnection connection */
export interface CategoryToPostConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input fields for a single checkbox. */
export interface CheckboxFieldInput {
  /** Input ID. */
  inputId?: InputMaybe<Scalars["Float"]>;
  /** Input value. */
  value?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the CommentToCommentConnection connection */
export interface CommentToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the CommentToParentCommentConnection connection */
export interface CommentToParentCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Options for ordering the connection */
export enum CommentsConnectionOrderbyEnum {
  /** Order by browser user agent of the commenter. */
  COMMENT_AGENT = "COMMENT_AGENT",
  /** Order by true/false approval of the comment. */
  COMMENT_APPROVED = "COMMENT_APPROVED",
  /** Order by name of the comment author. */
  COMMENT_AUTHOR = "COMMENT_AUTHOR",
  /** Order by e-mail of the comment author. */
  COMMENT_AUTHOR_EMAIL = "COMMENT_AUTHOR_EMAIL",
  /** Order by IP address of the comment author. */
  COMMENT_AUTHOR_IP = "COMMENT_AUTHOR_IP",
  /** Order by URL address of the comment author. */
  COMMENT_AUTHOR_URL = "COMMENT_AUTHOR_URL",
  /** Order by the comment contents. */
  COMMENT_CONTENT = "COMMENT_CONTENT",
  /** Order by date/time timestamp of the comment. */
  COMMENT_DATE = "COMMENT_DATE",
  /** Order by GMT timezone date/time timestamp of the comment. */
  COMMENT_DATE_GMT = "COMMENT_DATE_GMT",
  /** Order by the globally unique identifier for the comment object */
  COMMENT_ID = "COMMENT_ID",
  /** Order by the array list of comment IDs listed in the where clause. */
  COMMENT_IN = "COMMENT_IN",
  /** Order by the comment karma score. */
  COMMENT_KARMA = "COMMENT_KARMA",
  /** Order by the comment parent ID. */
  COMMENT_PARENT = "COMMENT_PARENT",
  /** Order by the post object ID. */
  COMMENT_POST_ID = "COMMENT_POST_ID",
  /** Order by the the type of comment, such as 'comment', 'pingback', or 'trackback'. */
  COMMENT_TYPE = "COMMENT_TYPE",
  /** Order by the user ID. */
  USER_ID = "USER_ID",
}

/** The type of action the conditional logic will perform. */
export enum ConditionalLogicActionTypeEnum {
  /** Text button (default). */
  HIDE = "HIDE",
  /** Image button. */
  SHOW = "SHOW",
}

/** Determines how to the rules should be evaluated. */
export enum ConditionalLogicLogicTypeEnum {
  /** Evaulate all logic rules. */
  ALL = "ALL",
  /** Evaluate any logic rule. */
  ANY = "ANY",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ContentNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Allowed Content Types */
export enum ContentTypeEnum {
  /** The Type of Content object */
  ATTACHMENT = "ATTACHMENT",
  /** The Type of Content object */
  NEWEVENT = "NEWEVENT",
  /** The Type of Content object */
  NEWPRESSCOVERAGE = "NEWPRESSCOVERAGE",
  /** The Type of Content object */
  NEWPRESSRELEASE = "NEWPRESSRELEASE",
  /** The Type of Content object */
  PAGE = "PAGE",
  /** The Type of Content object */
  PARTNER = "PARTNER",
  /** The Type of Content object */
  POST = "POST",
  /** The Type of Content object */
  PRESS_COVERAGE = "PRESS_COVERAGE",
  /** The Type of Content object */
  PRESS_RELEASES = "PRESS_RELEASES",
  /** The Type of Content object */
  PRODUCTCARD = "PRODUCTCARD",
  /** The Type of Content object */
  PRODUCTS_SERVICES = "PRODUCTS_SERVICES",
  /** The Type of Content object */
  PROJECT = "PROJECT",
  /** The Type of Content object */
  TEAMMEMBER = "TEAMMEMBER",
}

/** The Type of Identifier used to fetch a single Content Type node. To be used along with the "id" field. Default is "ID". */
export enum ContentTypeIdTypeEnum {
  /** The globally unique ID */
  ID = "ID",
  /** The name of the content type. */
  NAME = "NAME",
}

/** Arguments for filtering the ContentTypeToContentNodeConnection connection */
export interface ContentTypeToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Allowed Content Types of the Category taxonomy. */
export enum ContentTypesOfCategoryEnum {
  /** The Type of Content object */
  POST = "POST",
}

/** Allowed Content Types of the NewMediaCenter taxonomy. */
export enum ContentTypesOfNewMediaCenterEnum {
  /** The Type of Content object */
  NEWEVENT = "NEWEVENT",
  /** The Type of Content object */
  NEWPRESSCOVERAGE = "NEWPRESSCOVERAGE",
  /** The Type of Content object */
  NEWPRESSRELEASE = "NEWPRESSRELEASE",
}

/** Allowed Content Types of the PostFormat taxonomy. */
export enum ContentTypesOfPostFormatEnum {
  /** The Type of Content object */
  POST = "POST",
  /** The Type of Content object */
  PRODUCTS_SERVICES = "PRODUCTS_SERVICES",
}

/** Allowed Content Types of the Tag taxonomy. */
export enum ContentTypesOfTagEnum {
  /** The Type of Content object */
  POST = "POST",
}

/** Input for the createCategory mutation */
export interface CreateCategoryInput {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the category object */
  description?: InputMaybe<Scalars["String"]>;
  /** The name of the category object to mutate */
  name: Scalars["String"];
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the createComment mutation */
export interface CreateCommentInput {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars["String"]>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars["String"]>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars["Int"]>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** Parent comment of current comment. */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Type of comment. */
  type?: InputMaybe<Scalars["String"]>;
}

/** Input for the createMediaItem mutation */
export interface CreateMediaItemInput {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars["String"]>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars["String"]>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars["String"]>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars["String"]>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars["String"]>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars["String"]>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createNewEvent mutation */
export interface CreateNewEventInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newEvent and newMediaCenters */
  newMediaCenters?: InputMaybe<NewEventNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createNewMediaCenter mutation */
export interface CreateNewMediaCenterInput {
  /** The slug that the newmediacenter will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the newmediacenter object */
  description?: InputMaybe<Scalars["String"]>;
  /** The name of the newmediacenter object to mutate */
  name: Scalars["String"];
  /** The ID of the newmediacenter that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the createNewPressCoverage mutation */
export interface CreateNewPressCoverageInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newPressCoverage and newMediaCenters */
  newMediaCenters?: InputMaybe<NewPressCoverageNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createNewPressRelease mutation */
export interface CreateNewPressReleaseInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newPressRelease and newMediaCenters */
  newMediaCenters?: InputMaybe<NewPressReleaseNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPage mutation */
export interface CreatePageInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPartner mutation */
export interface CreatePartnerInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPostFormat mutation */
export interface CreatePostFormatInput {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars["String"]>;
  /** The name of the post_format object to mutate */
  name: Scalars["String"];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPost mutation */
export interface CreatePostInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars["String"]>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
}

/** Input for the createPressCoverage mutation */
export interface CreatePressCoverageInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPressRelease mutation */
export interface CreatePressReleaseInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createPro mutation */
export interface CreateProInput {
  /** The slug that the pro will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the pro object */
  description?: InputMaybe<Scalars["String"]>;
  /** The name of the pro object to mutate */
  name: Scalars["String"];
  /** The ID of the pro that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the createProductCard mutation */
export interface CreateProductCardInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createProductsService mutation */
export interface CreateProductsServiceInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** Set connections between the ProductsService and postFormats */
  postFormats?: InputMaybe<ProductsServicePostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createProject mutation */
export interface CreateProjectInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createTag mutation */
export interface CreateTagInput {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars["String"]>;
  /** The name of the post_tag object to mutate */
  name: Scalars["String"];
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the createTeamMember mutation */
export interface CreateTeamMemberInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the createUser mutation */
export interface CreateUserInput {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars["String"]>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars["String"]>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars["String"]>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars["String"]>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars["String"]>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars["String"]>;
  /** User's locale. */
  locale?: InputMaybe<Scalars["String"]>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars["String"]>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars["String"]>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars["String"]>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars["String"]>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars["String"]>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** A string that contains the user's username for logging in. */
  username: Scalars["String"];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars["String"]>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars["String"]>;
}

/** How the DateField date is displayed. */
export enum DateFieldFormatEnum {
  /** dd/mm/yyyy format. */
  DMY = "DMY",
  /** dd-mm-yyyy format. */
  DMY_DASH = "DMY_DASH",
  /** dd.mm.yyyy format. */
  DMY_DOT = "DMY_DOT",
  /** mm/dd/yyyy format. */
  MDY = "MDY",
  /** yyyy/mm/dd format. */
  YMD_DASH = "YMD_DASH",
  /** yyyy.mm.dd format. */
  YMD_DOT = "YMD_DOT",
  /** yyyy/mm/dd format. */
  YMD_SLASH = "YMD_SLASH",
}

/** Type of date field to display. */
export enum DateFieldTypeEnum {
  /** A date dropdown. */
  DROPDOWN = "DROPDOWN",
  /** A simple date field. */
  FIELD = "FIELD",
  /** A datepicker. */
  PICKER = "PICKER",
}

/** Date values */
export interface DateInput {
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars["Int"]>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars["Int"]>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars["Int"]>;
}

/** Filter the connection based on input */
export interface DateQueryInput {
  /** Nodes should be returned after this date */
  after?: InputMaybe<DateInput>;
  /** Nodes should be returned before this date */
  before?: InputMaybe<DateInput>;
  /** Column to query against */
  column?: InputMaybe<PostObjectsConnectionDateColumnEnum>;
  /** For after/before, whether exact value should be matched or not */
  compare?: InputMaybe<Scalars["String"]>;
  /** Day of the month (from 1 to 31) */
  day?: InputMaybe<Scalars["Int"]>;
  /** Hour (from 0 to 23) */
  hour?: InputMaybe<Scalars["Int"]>;
  /** For after/before, whether exact value should be matched or not */
  inclusive?: InputMaybe<Scalars["Boolean"]>;
  /** Minute (from 0 to 59) */
  minute?: InputMaybe<Scalars["Int"]>;
  /** Month number (from 1 to 12) */
  month?: InputMaybe<Scalars["Int"]>;
  /** OR or AND, how the sub-arrays should be compared */
  relation?: InputMaybe<RelationEnum>;
  /** Second (0 to 59) */
  second?: InputMaybe<Scalars["Int"]>;
  /** Week of the year (from 0 to 53) */
  week?: InputMaybe<Scalars["Int"]>;
  /** 4 digit year (e.g. 2017) */
  year?: InputMaybe<Scalars["Int"]>;
}

/** Input for the deleteCategory mutation */
export interface DeleteCategoryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the category to delete */
  id: Scalars["ID"];
}

/** Input for the deleteComment mutation */
export interface DeleteCommentInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the comment should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The deleted comment ID */
  id: Scalars["ID"];
}

/** Input for the deleteGfDraftEntry mutation */
export interface DeleteGfDraftEntryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Either the global ID of the draft entry, or its resume token. */
  id: Scalars["ID"];
  /** The ID type for the draft entry. Defaults to `ID` . */
  idType?: InputMaybe<DraftEntryIdTypeEnum>;
}

/** Input for the deleteGfEntry mutation */
export interface DeleteGfEntryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the entry should be force deleted instead of being moved to the trash. */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** ID of the entry to delete, either a global or database ID. */
  id: Scalars["ID"];
}

/** Input for the deleteMediaItem mutation */
export interface DeleteMediaItemInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the mediaItem should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the mediaItem to delete */
  id: Scalars["ID"];
}

/** Input for the deleteNewEvent mutation */
export interface DeleteNewEventInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the newEvent to delete */
  id: Scalars["ID"];
}

/** Input for the deleteNewMediaCenter mutation */
export interface DeleteNewMediaCenterInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the newMediaCenter to delete */
  id: Scalars["ID"];
}

/** Input for the deleteNewPressCoverage mutation */
export interface DeleteNewPressCoverageInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the newPressCoverage to delete */
  id: Scalars["ID"];
}

/** Input for the deleteNewPressRelease mutation */
export interface DeleteNewPressReleaseInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the newPressRelease to delete */
  id: Scalars["ID"];
}

/** Input for the deletePage mutation */
export interface DeletePageInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the page to delete */
  id: Scalars["ID"];
}

/** Input for the deletePartner mutation */
export interface DeletePartnerInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the partner to delete */
  id: Scalars["ID"];
}

/** Input for the deletePostFormat mutation */
export interface DeletePostFormatInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the postFormat to delete */
  id: Scalars["ID"];
}

/** Input for the deletePost mutation */
export interface DeletePostInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the post to delete */
  id: Scalars["ID"];
}

/** Input for the deletePressCoverage mutation */
export interface DeletePressCoverageInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the PressCoverage to delete */
  id: Scalars["ID"];
}

/** Input for the deletePressRelease mutation */
export interface DeletePressReleaseInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the PressRelease to delete */
  id: Scalars["ID"];
}

/** Input for the deletePro mutation */
export interface DeleteProInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the pro to delete */
  id: Scalars["ID"];
}

/** Input for the deleteProductCard mutation */
export interface DeleteProductCardInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the productCard to delete */
  id: Scalars["ID"];
}

/** Input for the deleteProductsService mutation */
export interface DeleteProductsServiceInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the ProductsService to delete */
  id: Scalars["ID"];
}

/** Input for the deleteProject mutation */
export interface DeleteProjectInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the project to delete */
  id: Scalars["ID"];
}

/** Input for the deleteTag mutation */
export interface DeleteTagInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the tag to delete */
  id: Scalars["ID"];
}

/** Input for the deleteTeamMember mutation */
export interface DeleteTeamMemberInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Whether the object should be force deleted instead of being moved to the trash */
  forceDelete?: InputMaybe<Scalars["Boolean"]>;
  /** The ID of the teamMember to delete */
  id: Scalars["ID"];
}

/** Input for the deleteUser mutation */
export interface DeleteUserInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the user you want to delete */
  id: Scalars["ID"];
  /** Reassign posts and links to new User ID. */
  reassignId?: InputMaybe<Scalars["ID"]>;
}

/** The Type of Identifier used to fetch a single resource. */
export enum DraftEntryIdTypeEnum {
  /** Unique global ID for the object. */
  ID = "ID",
  /** The resume token assigned by Gravity Forms. Used by draft entries. */
  RESUME_TOKEN = "RESUME_TOKEN",
}

/** Input fields for email field. */
export interface EmailFieldInput {
  /** Email confirmation input value. Only used when email confirmation is enabled. */
  confirmationValue?: InputMaybe<Scalars["String"]>;
  /** Email input value. */
  value?: InputMaybe<Scalars["String"]>;
}

/** Options for ordering the connection. */
export interface EntriesConnectionOrderbyInput {
  /** The field name used to sort the results. */
  field?: InputMaybe<Scalars["String"]>;
  /** Whether the sorting field's values are numeric. */
  isNumeric?: InputMaybe<Scalars["Boolean"]>;
  /** The cardinality of the order of the connection. */
  order?: InputMaybe<OrderEnum>;
}

/** Date Filters input fields for Entries queries. */
export interface EntriesDateFiltersInput {
  /** End date in Y-m-d H:i:s format. */
  endDate?: InputMaybe<Scalars["String"]>;
  /** Start date in Y-m-d H:i:s format. */
  startDate?: InputMaybe<Scalars["String"]>;
}

/** Field Filters input fields for Entries queries. */
export interface EntriesFieldFiltersInput {
  /** The field value(s) to filter by. Must be boolean values. If using this field, do not also use stringValues, intValues or floatValues. */
  boolValues?: InputMaybe<Array<InputMaybe<Scalars["Boolean"]>>>;
  /** The field value(s) to filter by. Must be float values. If using this field, do not also use stringValues, intValues or boolValues. */
  floatValues?: InputMaybe<Array<InputMaybe<Scalars["Float"]>>>;
  /** The field value(s) to filter by. Must be integer values. If using this field, do not also use stringValues, floatValues or boolValues. */
  intValues?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  /** Optional. The entry meta key to filter by. You can use the ID of the form field, or the names of any of the columns in Gravity Form's database table for entries, such as "date_created", "is_read, "created_by", etc. If omitted, the value will be checked against all meta keys. . */
  key?: InputMaybe<Scalars["String"]>;
  /** The operator to use for filtering. */
  operator?: InputMaybe<FieldFiltersOperatorEnum>;
  /** The field value(s) to filter by. Must be string values. If using this field, do not also use intValues, floatValues or boolValues. */
  stringValues?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
}

/** The Type of Identifier used to fetch a single resource. */
export enum EntryIdTypeEnum {
  /** The database ID assigned by Gravity Forms. Used by submitted entries. */
  DATABASE_ID = "DATABASE_ID",
  /** Unique global ID for the object. */
  ID = "ID",
  /** The resume token assigned by Gravity Forms. Used by draft entries. */
  RESUME_TOKEN = "RESUME_TOKEN",
}

/** Status of entries to get. Default is ACTIVE. */
export enum EntryStatusEnum {
  /** Active entries (default). */
  ACTIVE = "ACTIVE",
  /** All entries. */
  ALL = "ALL",
  /** Spam entries. */
  SPAM = "SPAM",
  /** Entries in the trash. */
  TRASH = "TRASH",
}

/** The type of Gravity Forms entry. */
export enum EntryTypeEnum {
  /** A Gravity Forms draft entry. */
  DRAFT = "DRAFT",
  /** A Gravity Forms partial entry. */
  PARTIAL = "PARTIAL",
  /** A submitted Gravity Forms entry. */
  SUBMITTED = "SUBMITTED",
}

/** Whether to filter by ALL or ANY of the field filters. Default is ALL. */
export enum FieldFiltersModeEnum {
  /** All field filters (default). */
  ALL = "ALL",
  /** Any field filters. */
  ANY = "ANY",
}

/** The operator to use for filtering. */
export enum FieldFiltersOperatorEnum {
  /** Find field values that contain the passed value. Only one value may be passed when using this operator. SQL Equivalent: `LIKE %value%`. */
  CONTAINS = "CONTAINS",
  /** Default. Find field values that are equal to one of the values in the passed array. Default. */
  IN = "IN",
  /** Find field values that are an exact match for the passed value. Only one value may be passed when using this operator. SQL Equivalent: `=`. */
  IS = "IS",
  /** Find field values that are NOT an exact match for the passed value. Only one value may be passed when using this operator. SQL Equivalent: `NOT`. */
  IS_NOT = "IS_NOT",
  /** Find field values that are an exact match for the passed value. SQL wildcards are supported. Only one value may be passed when using this operator. SQL Equivalent: `LIKE`. */
  LIKE = "LIKE",
  /** Find field values that do NOT match those in the values array. */
  NOT_IN = "NOT_IN",
}

/** Type of button to be displayed. Default is TEXT. */
export enum FormButtonTypeEnum {
  /** Image button. */
  IMAGE = "IMAGE",
  /** Text button (default). */
  TEXT = "TEXT",
}

/** Type of form confirmation to be used. */
export enum FormConfirmationTypeEnum {
  /** Use a confirmation "message". */
  MESSAGE = "MESSAGE",
  /** Use a redirect to a different WordPress "page". */
  PAGE = "PAGE",
  /** Use a "redirect" to a given URL. */
  REDIRECT = "REDIRECT",
}

/** Determines where the field description is displayed relative to the field. */
export enum FormDescriptionPlacementEnum {
  /** The field description is displayed above the field input (i.e. immediately after the field label). */
  ABOVE = "ABOVE",
  /** The field description is displayed below the field input. */
  BELOW = "BELOW",
}

/** How the date field displays its calendar icon. */
export enum FormFieldCalendarIconTypeEnum {
  /** Default calendar icon. */
  CALENDAR = "CALENDAR",
  /** Custom calendar icon. */
  CUSTOM = "CUSTOM",
  /** No calendar icon. */
  NONE = "NONE",
}

/** Determines where the field description is displayed relative to the field. */
export enum FormFieldDescriptionPlacementEnum {
  /** The field description is displayed above the field input (i.e. immediately after the field label). */
  ABOVE = "ABOVE",
  /** The field description is displayed below the field input. */
  BELOW = "BELOW",
  /** The field description is inherited from the form default settings. */
  INHERIT = "INHERIT",
}

/** The field label position. Empty when using the form defaults or a value of "hidden_label". */
export enum FormFieldLabelPlacementEnum {
  /** Field label is hidden. */
  HIDDEN = "HIDDEN",
  /** Field label is inherited from the form defaults. */
  INHERIT = "INHERIT",
  /** Field label is displayed beside the fields and aligned to the left. */
  LEFT = "LEFT",
  /** Field label is displayed beside the fields and aligned to the right. */
  RIGHT = "RIGHT",
  /** Field label is displayed on top of the fields. */
  TOP = "TOP",
}

/** Type of indicator to use when field is required. */
export enum FormFieldRequiredIndicatorEnum {
  /** Asterisk (*) indicator. */
  ASTERISK = "ASTERISK",
  /** Custom indicator. */
  CUSTOM = "CUSTOM",
  /** Text (Required) indicator (default). */
  TEXT = "TEXT",
}

/** The size of the field when displayed on the page. */
export enum FormFieldSizeEnum {
  /** Large field size. */
  LARGE = "LARGE",
  /** Medium field size. */
  MEDIUM = "MEDIUM",
  /** Small field size. */
  SMALL = "SMALL",
}

/** Determines how sub-labels are aligned. */
export enum FormFieldSubLabelPlacementEnum {
  /** The sub-label is displayed above the sub-field input (i.e. immediately after the field label). */
  ABOVE = "ABOVE",
  /** The sub-label is displayed below the sub-field input. */
  BELOW = "BELOW",
  /** Field label is inherited from the form defaults. */
  INHERIT = "INHERIT",
}

/** Gravity Forms Field Type. */
export enum FormFieldTypeEnum {
  /** A Gravity Forms address field. */
  ADDRESS = "ADDRESS",
  /** A Gravity Forms captcha field. */
  CAPTCHA = "CAPTCHA",
  /** A Gravity Forms checkbox field. */
  CHECKBOX = "CHECKBOX",
  /** A Gravity Forms consent field. */
  CONSENT = "CONSENT",
  /** A Gravity Forms date field. */
  DATE = "DATE",
  /** A Gravity Forms email field. */
  EMAIL = "EMAIL",
  /** A Gravity Forms fileupload field. */
  FILEUPLOAD = "FILEUPLOAD",
  /** A Gravity Forms hidden field. */
  HIDDEN = "HIDDEN",
  /** A Gravity Forms html field. */
  HTML = "HTML",
  /** A Gravity Forms list field. */
  LIST = "LIST",
  /** A Gravity Forms multiselect field. */
  MULTISELECT = "MULTISELECT",
  /** A Gravity Forms name field. */
  NAME = "NAME",
  /** A Gravity Forms number field. */
  NUMBER = "NUMBER",
  /** A Gravity Forms page field. */
  PAGE = "PAGE",
  /** A Gravity Forms password field. */
  PASSWORD = "PASSWORD",
  /** A Gravity Forms phone field. */
  PHONE = "PHONE",
  /** A Gravity Forms post_category field. */
  POST_CATEGORY = "POST_CATEGORY",
  /** A Gravity Forms post_content field. */
  POST_CONTENT = "POST_CONTENT",
  /** A Gravity Forms post_custom_field field. */
  POST_CUSTOM_FIELD = "POST_CUSTOM_FIELD",
  /** A Gravity Forms post_excerpt field. */
  POST_EXCERPT = "POST_EXCERPT",
  /** A Gravity Forms post_image field. */
  POST_IMAGE = "POST_IMAGE",
  /** A Gravity Forms post_tags field. */
  POST_TAGS = "POST_TAGS",
  /** A Gravity Forms post_title field. */
  POST_TITLE = "POST_TITLE",
  /** A Gravity Forms radio field. */
  RADIO = "RADIO",
  /** A Gravity Forms section field. */
  SECTION = "SECTION",
  /** A Gravity Forms select field. */
  SELECT = "SELECT",
  /** A Gravity Forms signature field. */
  SIGNATURE = "SIGNATURE",
  /** A Gravity Forms text field. */
  TEXT = "TEXT",
  /** A Gravity Forms textarea field. */
  TEXTAREA = "TEXTAREA",
  /** A Gravity Forms time field. */
  TIME = "TIME",
  /** A Gravity Forms website field. */
  WEBSITE = "WEBSITE",
}

/** Field values input. Includes a field id, and a valid value Input. */
export interface FormFieldValuesInput {
  /** The form field values for Address fields. */
  addressValues?: InputMaybe<AddressFieldInput>;
  /** The form field values for Checkbox fields. */
  checkboxValues?: InputMaybe<Array<InputMaybe<CheckboxFieldInput>>>;
  /** The form field values for Email fields. */
  emailValues?: InputMaybe<EmailFieldInput>;
  /** The form field values for file upload fields. */
  fileUploadValues?: InputMaybe<Array<InputMaybe<Scalars["Upload"]>>>;
  /** The field id. */
  id: Scalars["Int"];
  /** The form field values for post image fields. */
  imageValues?: InputMaybe<ImageInput>;
  /** The form field values for List fields. */
  listValues?: InputMaybe<Array<InputMaybe<ListFieldInput>>>;
  /** The form field values for Name fields. */
  nameValues?: InputMaybe<NameFieldInput>;
  /** The form field values for basic fields. */
  value?: InputMaybe<Scalars["String"]>;
  /** The form field values for fields that accept multiple string values. Used by MultiSelect, Post Category, Post Custom, and Post Tags fields. */
  values?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
}

/** Field visibility. */
export enum FormFieldVisibilityEnum {
  /** The field is for "administrative" use. */
  ADMINISTRATIVE = "ADMINISTRATIVE",
  /** The field is "hidden". */
  HIDDEN = "HIDDEN",
  /** The field is "visible". */
  VISIBLE = "VISIBLE",
}

/** The Type of Identifier used to fetch a single resource. */
export enum FormIdTypeEnum {
  /** The database ID assigned by Gravity Forms. */
  DATABASE_ID = "DATABASE_ID",
  /** Unique global ID for the object. */
  ID = "ID",
}

/** Determines where the field labels should be placed in relation to the field. */
export enum FormLabelPlacementEnum {
  /** Field labels are displayed beside the fields and aligned to the left. */
  LEFT = "LEFT",
  /** Field labels are displayed beside the fields and aligned to the right. */
  RIGHT = "RIGHT",
  /** Field labels are displayed on top of the fields. */
  TOP = "TOP",
}

/** When limitEntries is set to 1, this property specifies the time period during which submissions are allowed. */
export enum FormLimitEntriesPeriodEnum {
  /** Limit entries by "day". */
  DAY = "DAY",
  /** Limit entries by "month". */
  MONTH = "MONTH",
  /** Limit entries by "week". */
  WEEK = "WEEK",
  /** Limit entries by "year". */
  YEAR = "YEAR",
}

/** What to use for the notification "to". */
export enum FormNotificationToTypeEnum {
  /** Email address. */
  EMAIL = "EMAIL",
  /** Form field. */
  FIELD = "FIELD",
  /** Hidden. */
  HIDDEN = "HIDDEN",
  /** Routing using conditional rules. */
  ROUTING = "ROUTING",
}

/** Style of progress bar. */
export enum FormPageProgressStyleEnum {
  /** Blue progress bar style. */
  BLUE = "BLUE",
  /** Custom progress bar style. */
  CUSTOM = "CUSTOM",
  /** Green progress bar style. */
  GREEN = "GREEN",
  /** Grey progress bar style. */
  GREY = "GREY",
  /** Orange progress bar style. */
  ORANGE = "ORANGE",
  /** Red progress bar style. */
  RED = "RED",
}

/** Type of page progress indicator to be displayed. */
export enum FormPageProgressTypeEnum {
  /** Don't show a page progress indicator. */
  NONE = "NONE",
  /** Show page progress indicator as a percentage. */
  PERCENTAGE = "PERCENTAGE",
  /** Show page progress indicator as steps. */
  STEPS = "STEPS",
}

/** The Personal Data retention policy. */
export enum FormRetentionPolicyEnum {
  /** Entries will be deleted automatically after a specified number of days. */
  DELETE = "DELETE",
  /** Entries will be retain indefinitely. */
  RETAIN = "RETAIN",
  /** Entries will be trashed automatically after a specified number of days. */
  TRASH = "TRASH",
}

/** Operator to be used when evaluating logic rules. */
export enum FormRuleOperatorEnum {
  /** Evaluates values that CONTAIN the comparison value. */
  CONTAINS = "CONTAINS",
  /** Evaluates values that END with the comparison value. */
  ENDS_WITH = "ENDS_WITH",
  /** Evaluates values that are GREATER than the comparison value. */
  GREATER_THAN = "GREATER_THAN",
  /** Evaluates values that match the comparison value. */
  IS = "IS",
  /** Evaluates values that do NOT match the comparison value. */
  IS_NOT = "IS_NOT",
  /** Evaluates values that are LESS than the comparison value. */
  LESS_THAN = "LESS_THAN",
  /** Evaluates values that START with the comparison value. */
  STARTS_WITH = "STARTS_WITH",
}

/** Status of forms to get. Default is ACTIVE. */
export enum FormStatusEnum {
  /** Active forms (default). */
  ACTIVE = "ACTIVE",
  /** Inactive forms. */
  INACTIVE = "INACTIVE",
  /** Inactive forms in the trash. */
  INACTIVE_TRASHED = "INACTIVE_TRASHED",
  /** Active forms in the trash. */
  TRASHED = "TRASHED",
}

/** Determines how sub-labels are aligned. */
export enum FormSubLabelPlacementEnum {
  /** The sub-label is displayed above the sub-field input (i.e. immediately after the field label). */
  ABOVE = "ABOVE",
  /** The sub-label is displayed below the sub-field input. */
  BELOW = "BELOW",
}

/** Options for ordering the connection. */
export interface FormsConnectionOrderbyInput {
  /** The field name used to sort the results. */
  field?: InputMaybe<Scalars["String"]>;
  /** The cardinality of the order of the connection. */
  order?: InputMaybe<OrderEnum>;
}

/** Input for the generateAuthorizationCode mutation */
export interface GenerateAuthorizationCodeInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Email for WordPress user */
  email?: InputMaybe<Scalars["String"]>;
  /** Password for WordPress user */
  password?: InputMaybe<Scalars["String"]>;
  /** Username for WordPress user */
  username?: InputMaybe<Scalars["String"]>;
}

/** Currencies supported by Gravity Forms. */
export enum GfCurrencyEnum {
  /** Australian Dollar . */
  AUD = "AUD",
  /** Brazilian Real . */
  BRL = "BRL",
  /** Canadian Dollar . */
  CAD = "CAD",
  /** Swiss Franc . */
  CHF = "CHF",
  /** Czech Koruna . */
  CZK = "CZK",
  /** Danish Krone . */
  DKK = "DKK",
  /** Euro . */
  EUR = "EUR",
  /** Pound Sterling . */
  GBP = "GBP",
  /** Hong Kong Dollar . */
  HKD = "HKD",
  /** Hungarian Forint . */
  HUF = "HUF",
  /** Israeli New Sheqel . */
  ILS = "ILS",
  /** Japanese Yen . */
  JPY = "JPY",
  /** Mexican Peso . */
  MXN = "MXN",
  /** Malaysian Ringgit . */
  MYR = "MYR",
  /** Norwegian Krone . */
  NOK = "NOK",
  /** New Zealand Dollar . */
  NZD = "NZD",
  /** Philippine Peso . */
  PHP = "PHP",
  /** Polish Zloty . */
  PLN = "PLN",
  /** Russian Ruble . */
  RUB = "RUB",
  /** Swedish Krona . */
  SEK = "SEK",
  /** Singapore Dollar . */
  SGD = "SGD",
  /** Thai Baht . */
  THB = "THB",
  /** Taiwan New Dollar . */
  TWD = "TWD",
  /** U.S. Dollar . */
  USD = "USD",
  /** South African Rand . */
  ZAR = "ZAR",
}

/** Arguments for filtering the GfEntryToFormFieldConnection connection */
export interface GfEntryToFormFieldConnectionWhereArgs {
  /** Array of form field adminLabels to return. */
  adminLabels?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of Gravity Forms Field types to return. */
  fieldTypes?: InputMaybe<Array<InputMaybe<FormFieldTypeEnum>>>;
  /** Array of form field IDs to return. */
  ids?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** The form page number to return. */
  pageNumber?: InputMaybe<Scalars["Int"]>;
}

/** Arguments for filtering the GfFormToFormFieldConnection connection */
export interface GfFormToFormFieldConnectionWhereArgs {
  /** Array of form field adminLabels to return. */
  adminLabels?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of Gravity Forms Field types to return. */
  fieldTypes?: InputMaybe<Array<InputMaybe<FormFieldTypeEnum>>>;
  /** Array of form field IDs to return. */
  ids?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** The form page number to return. */
  pageNumber?: InputMaybe<Scalars["Int"]>;
}

/** Arguments for filtering the GfFormToGfEntryConnection connection */
export interface GfFormToGfEntryConnectionWhereArgs {
  /** Date filters to apply. */
  dateFilters?: InputMaybe<EntriesDateFiltersInput>;
  /** Field-specific filters to apply. */
  fieldFilters?: InputMaybe<Array<InputMaybe<EntriesFieldFiltersInput>>>;
  /** Whether to filter by ALL or ANY of the field filters. Default is ALL. */
  fieldFiltersMode?: InputMaybe<FieldFiltersModeEnum>;
  /** How to sort the entries. */
  orderby?: InputMaybe<EntriesConnectionOrderbyInput>;
  /** Entry status. Default is "ACTIVE". */
  status?: InputMaybe<EntryStatusEnum>;
}

/** Arguments for filtering the HierarchicalContentNodeToContentNodeAncestorsConnection connection */
export interface HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the HierarchicalContentNodeToContentNodeChildrenConnection connection */
export interface HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input fields for a single post Image. */
export interface ImageInput {
  /** The image alt text. */
  altText?: InputMaybe<Scalars["String"]>;
  /** The image caption. */
  caption?: InputMaybe<Scalars["String"]>;
  /** The image description. */
  description?: InputMaybe<Scalars["String"]>;
  /** The image to be uploaded. */
  image: Scalars["Upload"];
  /** The image title. */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input fields for a single List field item. */
export interface ListFieldInput {
  /** Input values for the specific listField row. */
  rowValues?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum MediaItemIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a media item by its source url */
  SOURCE_URL = "SOURCE_URL",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** The size of the media item object. */
export enum MediaItemSizeEnum {
  /** MediaItem with the large size */
  LARGE = "LARGE",
  /** MediaItem with the medium size */
  MEDIUM = "MEDIUM",
  /** MediaItem with the medium_large size */
  MEDIUM_LARGE = "MEDIUM_LARGE",
  /** MediaItem with the post-thumbnail size */
  POST_THUMBNAIL = "POST_THUMBNAIL",
  /** MediaItem with the thumbnail size */
  THUMBNAIL = "THUMBNAIL",
  /** MediaItem with the 1536x1536 size */
  _1536X1536 = "_1536X1536",
  /** MediaItem with the 2048x2048 size */
  _2048X2048 = "_2048X2048",
}

/** The status of the media item object. */
export enum MediaItemStatusEnum {
  /** Objects with the auto-draft status */
  AUTO_DRAFT = "AUTO_DRAFT",
  /** Objects with the inherit status */
  INHERIT = "INHERIT",
  /** Objects with the private status */
  PRIVATE = "PRIVATE",
  /** Objects with the trash status */
  TRASH = "TRASH",
}

/** Arguments for filtering the MediaItemToCommentConnection connection */
export interface MediaItemToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum MenuItemNodeIdTypeEnum {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
}

/** Arguments for filtering the MenuItemToMenuItemConnection connection */
export interface MenuItemToMenuItemConnectionWhereArgs {
  /** The ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars["ID"]>;
}

/** Registered menu locations */
export enum MenuLocationEnum {
  /** Put the menu in the footer location */
  FOOTER = "FOOTER",
  /** Put the menu in the hcms-menu-footer location */
  HCMS_MENU_FOOTER = "HCMS_MENU_FOOTER",
  /** Put the menu in the hcms-menu-header location */
  HCMS_MENU_HEADER = "HCMS_MENU_HEADER",
  /** Put the menu in the primary location */
  PRIMARY = "PRIMARY",
}

/** The Type of Identifier used to fetch a single node. Default is "ID". To be used along with the "id" field. */
export enum MenuNodeIdTypeEnum {
  /** Identify a menu node by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a menu node by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a menu node by it's name */
  NAME = "NAME",
}

/** Arguments for filtering the MenuToMenuItemConnection connection */
export interface MenuToMenuItemConnectionWhereArgs {
  /** The ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars["ID"]>;
}

/** The MimeType of the object */
export enum MimeTypeEnum {
  /** MimeType application/java */
  APPLICATION_JAVA = "APPLICATION_JAVA",
  /** MimeType application/msword */
  APPLICATION_MSWORD = "APPLICATION_MSWORD",
  /** MimeType application/octet-stream */
  APPLICATION_OCTET_STREAM = "APPLICATION_OCTET_STREAM",
  /** MimeType application/onenote */
  APPLICATION_ONENOTE = "APPLICATION_ONENOTE",
  /** MimeType application/oxps */
  APPLICATION_OXPS = "APPLICATION_OXPS",
  /** MimeType application/pdf */
  APPLICATION_PDF = "APPLICATION_PDF",
  /** MimeType application/rar */
  APPLICATION_RAR = "APPLICATION_RAR",
  /** MimeType application/rtf */
  APPLICATION_RTF = "APPLICATION_RTF",
  /** MimeType application/ttaf+xml */
  APPLICATION_TTAF_XML = "APPLICATION_TTAF_XML",
  /** MimeType application/vnd.apple.keynote */
  APPLICATION_VND_APPLE_KEYNOTE = "APPLICATION_VND_APPLE_KEYNOTE",
  /** MimeType application/vnd.apple.numbers */
  APPLICATION_VND_APPLE_NUMBERS = "APPLICATION_VND_APPLE_NUMBERS",
  /** MimeType application/vnd.apple.pages */
  APPLICATION_VND_APPLE_PAGES = "APPLICATION_VND_APPLE_PAGES",
  /** MimeType application/vnd.ms-access */
  APPLICATION_VND_MS_ACCESS = "APPLICATION_VND_MS_ACCESS",
  /** MimeType application/vnd.ms-excel */
  APPLICATION_VND_MS_EXCEL = "APPLICATION_VND_MS_EXCEL",
  /** MimeType application/vnd.ms-excel.addin.macroEnabled.12 */
  APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_ADDIN_MACROENABLED_12",
  /** MimeType application/vnd.ms-excel.sheet.binary.macroEnabled.12 */
  APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_SHEET_BINARY_MACROENABLED_12",
  /** MimeType application/vnd.ms-excel.sheet.macroEnabled.12 */
  APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_SHEET_MACROENABLED_12",
  /** MimeType application/vnd.ms-excel.template.macroEnabled.12 */
  APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_EXCEL_TEMPLATE_MACROENABLED_12",
  /** MimeType application/vnd.ms-powerpoint */
  APPLICATION_VND_MS_POWERPOINT = "APPLICATION_VND_MS_POWERPOINT",
  /** MimeType application/vnd.ms-powerpoint.addin.macroEnabled.12 */
  APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_ADDIN_MACROENABLED_12",
  /** MimeType application/vnd.ms-powerpoint.presentation.macroEnabled.12 */
  APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_PRESENTATION_MACROENABLED_12",
  /** MimeType application/vnd.ms-powerpoint.slideshow.macroEnabled.12 */
  APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_SLIDESHOW_MACROENABLED_12",
  /** MimeType application/vnd.ms-powerpoint.slide.macroEnabled.12 */
  APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_SLIDE_MACROENABLED_12",
  /** MimeType application/vnd.ms-powerpoint.template.macroEnabled.12 */
  APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_POWERPOINT_TEMPLATE_MACROENABLED_12",
  /** MimeType application/vnd.ms-project */
  APPLICATION_VND_MS_PROJECT = "APPLICATION_VND_MS_PROJECT",
  /** MimeType application/vnd.ms-word.document.macroEnabled.12 */
  APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12 = "APPLICATION_VND_MS_WORD_DOCUMENT_MACROENABLED_12",
  /** MimeType application/vnd.ms-word.template.macroEnabled.12 */
  APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12 = "APPLICATION_VND_MS_WORD_TEMPLATE_MACROENABLED_12",
  /** MimeType application/vnd.ms-write */
  APPLICATION_VND_MS_WRITE = "APPLICATION_VND_MS_WRITE",
  /** MimeType application/vnd.ms-xpsdocument */
  APPLICATION_VND_MS_XPSDOCUMENT = "APPLICATION_VND_MS_XPSDOCUMENT",
  /** MimeType application/vnd.oasis.opendocument.chart */
  APPLICATION_VND_OASIS_OPENDOCUMENT_CHART = "APPLICATION_VND_OASIS_OPENDOCUMENT_CHART",
  /** MimeType application/vnd.oasis.opendocument.database */
  APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE = "APPLICATION_VND_OASIS_OPENDOCUMENT_DATABASE",
  /** MimeType application/vnd.oasis.opendocument.formula */
  APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA = "APPLICATION_VND_OASIS_OPENDOCUMENT_FORMULA",
  /** MimeType application/vnd.oasis.opendocument.graphics */
  APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS = "APPLICATION_VND_OASIS_OPENDOCUMENT_GRAPHICS",
  /** MimeType application/vnd.oasis.opendocument.presentation */
  APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION = "APPLICATION_VND_OASIS_OPENDOCUMENT_PRESENTATION",
  /** MimeType application/vnd.oasis.opendocument.spreadsheet */
  APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET = "APPLICATION_VND_OASIS_OPENDOCUMENT_SPREADSHEET",
  /** MimeType application/vnd.oasis.opendocument.text */
  APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT = "APPLICATION_VND_OASIS_OPENDOCUMENT_TEXT",
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.presentation */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_PRESENTATION",
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slide */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDE",
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.slideshow */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_SLIDESHOW",
  /** MimeType application/vnd.openxmlformats-officedocument.presentationml.template */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_PRESENTATIONML_TEMPLATE",
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.sheet */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_SHEET",
  /** MimeType application/vnd.openxmlformats-officedocument.spreadsheetml.template */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_SPREADSHEETML_TEMPLATE",
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.document */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_DOCUMENT",
  /** MimeType application/vnd.openxmlformats-officedocument.wordprocessingml.template */
  APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE = "APPLICATION_VND_OPENXMLFORMATS_OFFICEDOCUMENT_WORDPROCESSINGML_TEMPLATE",
  /** MimeType application/wordperfect */
  APPLICATION_WORDPERFECT = "APPLICATION_WORDPERFECT",
  /** MimeType application/x-7z-compressed */
  APPLICATION_X_7Z_COMPRESSED = "APPLICATION_X_7Z_COMPRESSED",
  /** MimeType application/x-gzip */
  APPLICATION_X_GZIP = "APPLICATION_X_GZIP",
  /** MimeType application/x-tar */
  APPLICATION_X_TAR = "APPLICATION_X_TAR",
  /** MimeType application/zip */
  APPLICATION_ZIP = "APPLICATION_ZIP",
  /** MimeType audio/aac */
  AUDIO_AAC = "AUDIO_AAC",
  /** MimeType audio/flac */
  AUDIO_FLAC = "AUDIO_FLAC",
  /** MimeType audio/midi */
  AUDIO_MIDI = "AUDIO_MIDI",
  /** MimeType audio/mpeg */
  AUDIO_MPEG = "AUDIO_MPEG",
  /** MimeType audio/ogg */
  AUDIO_OGG = "AUDIO_OGG",
  /** MimeType audio/wav */
  AUDIO_WAV = "AUDIO_WAV",
  /** MimeType audio/x-matroska */
  AUDIO_X_MATROSKA = "AUDIO_X_MATROSKA",
  /** MimeType audio/x-ms-wax */
  AUDIO_X_MS_WAX = "AUDIO_X_MS_WAX",
  /** MimeType audio/x-ms-wma */
  AUDIO_X_MS_WMA = "AUDIO_X_MS_WMA",
  /** MimeType audio/x-realaudio */
  AUDIO_X_REALAUDIO = "AUDIO_X_REALAUDIO",
  /** MimeType image/bmp */
  IMAGE_BMP = "IMAGE_BMP",
  /** MimeType image/gif */
  IMAGE_GIF = "IMAGE_GIF",
  /** MimeType image/heic */
  IMAGE_HEIC = "IMAGE_HEIC",
  /** MimeType image/jpeg */
  IMAGE_JPEG = "IMAGE_JPEG",
  /** MimeType image/png */
  IMAGE_PNG = "IMAGE_PNG",
  /** MimeType image/svg+xml */
  IMAGE_SVG_XML = "IMAGE_SVG_XML",
  /** MimeType image/tiff */
  IMAGE_TIFF = "IMAGE_TIFF",
  /** MimeType image/webp */
  IMAGE_WEBP = "IMAGE_WEBP",
  /** MimeType image/x-icon */
  IMAGE_X_ICON = "IMAGE_X_ICON",
  /** MimeType text/calendar */
  TEXT_CALENDAR = "TEXT_CALENDAR",
  /** MimeType text/css */
  TEXT_CSS = "TEXT_CSS",
  /** MimeType text/csv */
  TEXT_CSV = "TEXT_CSV",
  /** MimeType text/plain */
  TEXT_PLAIN = "TEXT_PLAIN",
  /** MimeType text/richtext */
  TEXT_RICHTEXT = "TEXT_RICHTEXT",
  /** MimeType text/tab-separated-values */
  TEXT_TAB_SEPARATED_VALUES = "TEXT_TAB_SEPARATED_VALUES",
  /** MimeType text/vtt */
  TEXT_VTT = "TEXT_VTT",
  /** MimeType video/3gpp */
  VIDEO_3GPP = "VIDEO_3GPP",
  /** MimeType video/3gpp2 */
  VIDEO_3GPP2 = "VIDEO_3GPP2",
  /** MimeType video/avi */
  VIDEO_AVI = "VIDEO_AVI",
  /** MimeType video/divx */
  VIDEO_DIVX = "VIDEO_DIVX",
  /** MimeType video/mp4 */
  VIDEO_MP4 = "VIDEO_MP4",
  /** MimeType video/mpeg */
  VIDEO_MPEG = "VIDEO_MPEG",
  /** MimeType video/ogg */
  VIDEO_OGG = "VIDEO_OGG",
  /** MimeType video/quicktime */
  VIDEO_QUICKTIME = "VIDEO_QUICKTIME",
  /** MimeType video/webm */
  VIDEO_WEBM = "VIDEO_WEBM",
  /** MimeType video/x-flv */
  VIDEO_X_FLV = "VIDEO_X_FLV",
  /** MimeType video/x-matroska */
  VIDEO_X_MATROSKA = "VIDEO_X_MATROSKA",
  /** MimeType video/x-ms-asf */
  VIDEO_X_MS_ASF = "VIDEO_X_MS_ASF",
  /** MimeType video/x-ms-wm */
  VIDEO_X_MS_WM = "VIDEO_X_MS_WM",
  /** MimeType video/x-ms-wmv */
  VIDEO_X_MS_WMV = "VIDEO_X_MS_WMV",
  /** MimeType video/x-ms-wmx */
  VIDEO_X_MS_WMX = "VIDEO_X_MS_WMX",
}

/** Input fields for name field. */
export interface NameFieldInput {
  /** First name. */
  first?: InputMaybe<Scalars["String"]>;
  /** Last name. */
  last?: InputMaybe<Scalars["String"]>;
  /** Middle name. */
  middle?: InputMaybe<Scalars["String"]>;
  /** Prefix, such as Mr., Mrs. etc. */
  prefix?: InputMaybe<Scalars["String"]>;
  /** Suffix, such as Sr., Jr. etc. */
  suffix?: InputMaybe<Scalars["String"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum NewEventIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Set relationships between the newEvent to newMediaCenters */
export interface NewEventNewMediaCentersInput {
  /** If true, this will append the newMediaCenter to existing related newMediaCenters. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<NewEventNewMediaCentersNodeInput>>>;
}

/** List of newMediaCenters to connect the newEvent to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface NewEventNewMediaCentersNodeInput {
  /** The description of the newMediaCenter. This field is used to set a description of the newMediaCenter if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the newMediaCenter. If present, this will be used to connect to the newEvent. If no existing newMediaCenter exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the newMediaCenter. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the newMediaCenter. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewEventToNewMediaCenterConnection connection */
export interface NewEventToNewMediaCenterConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the NewEventToTermNodeConnection connection */
export interface NewEventToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum NewMediaCenterIdType {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Arguments for filtering the NewMediaCenterToContentNodeConnection connection */
export interface NewMediaCenterToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<
    Array<InputMaybe<ContentTypesOfNewMediaCenterEnum>>
  >;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewMediaCenterToNewEventConnection connection */
export interface NewMediaCenterToNewEventConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewMediaCenterToNewMediaCenterConnection connection */
export interface NewMediaCenterToNewMediaCenterConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the NewMediaCenterToNewPressCoverageConnection connection */
export interface NewMediaCenterToNewPressCoverageConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewMediaCenterToNewPressReleaseConnection connection */
export interface NewMediaCenterToNewPressReleaseConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum NewPressCoverageIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Set relationships between the newPressCoverage to newMediaCenters */
export interface NewPressCoverageNewMediaCentersInput {
  /** If true, this will append the newMediaCenter to existing related newMediaCenters. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<
    Array<InputMaybe<NewPressCoverageNewMediaCentersNodeInput>>
  >;
}

/** List of newMediaCenters to connect the newPressCoverage to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface NewPressCoverageNewMediaCentersNodeInput {
  /** The description of the newMediaCenter. This field is used to set a description of the newMediaCenter if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the newMediaCenter. If present, this will be used to connect to the newPressCoverage. If no existing newMediaCenter exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the newMediaCenter. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the newMediaCenter. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewPressCoverageToNewMediaCenterConnection connection */
export interface NewPressCoverageToNewMediaCenterConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the NewPressCoverageToTermNodeConnection connection */
export interface NewPressCoverageToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum NewPressReleaseIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Set relationships between the newPressRelease to newMediaCenters */
export interface NewPressReleaseNewMediaCentersInput {
  /** If true, this will append the newMediaCenter to existing related newMediaCenters. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<
    Array<InputMaybe<NewPressReleaseNewMediaCentersNodeInput>>
  >;
}

/** List of newMediaCenters to connect the newPressRelease to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface NewPressReleaseNewMediaCentersNodeInput {
  /** The description of the newMediaCenter. This field is used to set a description of the newMediaCenter if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the newMediaCenter. If present, this will be used to connect to the newPressRelease. If no existing newMediaCenter exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the newMediaCenter. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the newMediaCenter. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the NewPressReleaseToNewMediaCenterConnection connection */
export interface NewPressReleaseToNewMediaCenterConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the NewPressReleaseToTermNodeConnection connection */
export interface NewPressReleaseToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The format allowed for the number field. . */
export enum NumberFieldFormatEnum {
  /** Currency format. */
  CURRENCY = "CURRENCY",
  /** Decimal-comma format (e.g. 9.999,99). */
  DECIMAL_COMMA = "DECIMAL_COMMA",
  /** Decimal-dot format (e.g. 9,999.99). */
  DECIMAL_DOT = "DECIMAL_DOT",
}

/** The cardinality of the connection order */
export enum OrderEnum {
  /** Sort the query result set in an ascending order */
  ASC = "ASC",
  /** Sort the query result set in a descending order */
  DESC = "DESC",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PageIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Arguments for filtering the PageToCommentConnection connection */
export interface PageToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the pageToRevisionConnection connection */
export interface PageToRevisionConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PartnerIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Indicates how strong the password should be. */
export enum PasswordFieldMinStrengthEnum {
  /** The password strength must be "bad" or better. */
  BAD = "BAD",
  /** The password strength must be "good" or better. */
  GOOD = "GOOD",
  /** The password strength must be "short" or better. */
  SHORT = "SHORT",
  /** The password strength must be "strong". */
  STRONG = "STRONG",
}

/** Tthe allowed format for phone numbers. */
export enum PhoneFieldFormatEnum {
  /** International phone number format. */
  INTERNATIONAL = "INTERNATIONAL",
  /** Standard phone number format. */
  STANDARD = "STANDARD",
}

/** Set relationships between the post to categories */
export interface PostCategoriesInput {
  /** If true, this will append the category to existing related categories. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostCategoriesNodeInput>>>;
}

/** List of categories to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface PostCategoriesNodeInput {
  /** The description of the category. This field is used to set a description of the category if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the category. If present, this will be used to connect to the post. If no existing category exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the category. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the category. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PostFormatIdType {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Arguments for filtering the PostFormatToContentNodeConnection connection */
export interface PostFormatToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfPostFormatEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the PostFormatToPostConnection connection */
export interface PostFormatToPostConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the PostFormatToProductsServiceConnection connection */
export interface PostFormatToProductsServiceConnectionWhereArgs {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** List of possible post formats. */
export enum PostFormatTypeEnum {
  /** A standard post format. */
  STANDARD = "STANDARD",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PostIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** The format of post field data. */
export enum PostObjectFieldFormatEnum {
  /** Provide the field value directly from database */
  RAW = "RAW",
  /** Apply the default WordPress rendering */
  RENDERED = "RENDERED",
}

/** The column to use when filtering by date */
export enum PostObjectsConnectionDateColumnEnum {
  /** The date the comment was created in local time. */
  DATE = "DATE",
  /** The most recent modification date of the comment. */
  MODIFIED = "MODIFIED",
}

/** Field to order the connection by */
export enum PostObjectsConnectionOrderbyEnum {
  /** Order by author */
  AUTHOR = "AUTHOR",
  /** Order by the number of comments it has acquired */
  COMMENT_COUNT = "COMMENT_COUNT",
  /** Order by publish date */
  DATE = "DATE",
  /** Preserve the ID order given in the IN array */
  IN = "IN",
  /** Order by the menu order value */
  MENU_ORDER = "MENU_ORDER",
  /** Order by last modified date */
  MODIFIED = "MODIFIED",
  /** Preserve slug order given in the NAME_IN array */
  NAME_IN = "NAME_IN",
  /** Order by parent ID */
  PARENT = "PARENT",
  /** Order by slug */
  SLUG = "SLUG",
  /** Order by title */
  TITLE = "TITLE",
}

/** Options for ordering the connection */
export interface PostObjectsConnectionOrderbyInput {
  /** The field to order the connection by */
  field: PostObjectsConnectionOrderbyEnum;
  /** Possible directions in which to order a list of items */
  order: OrderEnum;
}

/** Set relationships between the post to postFormats */
export interface PostPostFormatsInput {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostPostFormatsNodeInput>>>;
}

/** List of postFormats to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface PostPostFormatsNodeInput {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the postFormat. If present, this will be used to connect to the post. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** The status of the object. */
export enum PostStatusEnum {
  /** Objects with the acf-disabled status */
  ACF_DISABLED = "ACF_DISABLED",
  /** Objects with the auto-draft status */
  AUTO_DRAFT = "AUTO_DRAFT",
  /** Objects with the draft status */
  DRAFT = "DRAFT",
  /** Objects with the future status */
  FUTURE = "FUTURE",
  /** Objects with the inherit status */
  INHERIT = "INHERIT",
  /** Objects with the pending status */
  PENDING = "PENDING",
  /** Objects with the private status */
  PRIVATE = "PRIVATE",
  /** Objects with the publish status */
  PUBLISH = "PUBLISH",
  /** Objects with the request-completed status */
  REQUEST_COMPLETED = "REQUEST_COMPLETED",
  /** Objects with the request-confirmed status */
  REQUEST_CONFIRMED = "REQUEST_CONFIRMED",
  /** Objects with the request-failed status */
  REQUEST_FAILED = "REQUEST_FAILED",
  /** Objects with the request-pending status */
  REQUEST_PENDING = "REQUEST_PENDING",
  /** Objects with the trash status */
  TRASH = "TRASH",
}

/** Set relationships between the post to tags */
export interface PostTagsInput {
  /** If true, this will append the tag to existing related tags. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<PostTagsNodeInput>>>;
}

/** List of tags to connect the post to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface PostTagsNodeInput {
  /** The description of the tag. This field is used to set a description of the tag if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the tag. If present, this will be used to connect to the post. If no existing tag exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the tag. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the tag. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the PostToCategoryConnection connection */
export interface PostToCategoryConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the PostToCommentConnection connection */
export interface PostToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the PostToPostFormatConnection connection */
export interface PostToPostFormatConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the postToRevisionConnection connection */
export interface PostToRevisionConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the PostToTagConnection connection */
export interface PostToTagConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the PostToTermNodeConnection connection */
export interface PostToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PressCoverageIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Arguments for filtering the PressCoverageToTermNodeConnection connection */
export interface PressCoverageToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum PressReleaseIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Arguments for filtering the PressReleaseToTermNodeConnection connection */
export interface PressReleaseToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProIdType {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Arguments for filtering the ProToProConnection connection */
export interface ProToProConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProductCardIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProductsServiceIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Set relationships between the ProductsService to postFormats */
export interface ProductsServicePostFormatsInput {
  /** If true, this will append the postFormat to existing related postFormats. If false, this will replace existing relationships. Default true. */
  append?: InputMaybe<Scalars["Boolean"]>;
  /** The input list of items to set. */
  nodes?: InputMaybe<Array<InputMaybe<ProductsServicePostFormatsNodeInput>>>;
}

/** List of postFormats to connect the ProductsService to. If an ID is set, it will be used to create the connection. If not, it will look for a slug. If neither are valid existing terms, and the site is configured to allow terms to be created during post mutations, a term will be created using the Name if it exists in the input, then fallback to the slug if it exists. */
export interface ProductsServicePostFormatsNodeInput {
  /** The description of the postFormat. This field is used to set a description of the postFormat if a new one is created during the mutation. */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the postFormat. If present, this will be used to connect to the ProductsService. If no existing postFormat exists with this ID, no connection will be made. */
  id?: InputMaybe<Scalars["ID"]>;
  /** The name of the postFormat. This field is used to create a new term, if term creation is enabled in nested mutations, and if one does not already exist with the provided slug or ID or if a slug or ID is not provided. If no name is included and a term is created, the creation will fallback to the slug field. */
  name?: InputMaybe<Scalars["String"]>;
  /** The slug of the postFormat. If no ID is present, this field will be used to make a connection. If no existing term exists with this slug, this field will be used as a fallback to the Name field when creating a new term to connect to, if term creation is enabled as a nested mutation. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the ProductsServiceToPostFormatConnection connection */
export interface ProductsServiceToPostFormatConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the ProductsServiceToRevisionConnection connection */
export interface ProductsServiceToRevisionConnectionWhereArgs {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the ProductsServiceToTermNodeConnection connection */
export interface ProductsServiceToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum ProjectIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** Input for the registerUser mutation */
export interface RegisterUserInput {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars["String"]>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars["String"]>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars["String"]>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars["String"]>;
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars["String"]>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars["String"]>;
  /** User's locale. */
  locale?: InputMaybe<Scalars["String"]>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars["String"]>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars["String"]>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars["String"]>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars["String"]>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars["String"]>;
  /** A string that contains the user's username. */
  username: Scalars["String"];
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars["String"]>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars["String"]>;
}

/** The logical relation between each item in the array when there are more than one. */
export enum RelationEnum {
  /** The logical AND condition returns true if both operands are true, otherwise, it returns false. */
  AND = "AND",
  /** The logical OR condition returns false if both operands are false, otherwise, it returns true. */
  OR = "OR",
}

/** Input for the resetUserPassword mutation */
export interface ResetUserPasswordInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Password reset key */
  key?: InputMaybe<Scalars["String"]>;
  /** The user's login (username). */
  login?: InputMaybe<Scalars["String"]>;
  /** The new password. */
  password?: InputMaybe<Scalars["String"]>;
}

/** Input for the restoreComment mutation */
export interface RestoreCommentInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment to be restored */
  id: Scalars["ID"];
}

/** Arguments for filtering the RootQueryToCategoryConnection connection */
export interface RootQueryToCategoryConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToCommentConnection connection */
export interface RootQueryToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the RootQueryToContentNodeConnection connection */
export interface RootQueryToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToContentRevisionUnionConnection connection */
export interface RootQueryToContentRevisionUnionConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToGfEntryConnection connection */
export interface RootQueryToGfEntryConnectionWhereArgs {
  /** Date filters to apply. */
  dateFilters?: InputMaybe<EntriesDateFiltersInput>;
  /** Entry status. Default is `SUBMITTED`. Currently no other types are supported. */
  entryType?: InputMaybe<EntryTypeEnum>;
  /** Field-specific filters to apply. */
  fieldFilters?: InputMaybe<Array<InputMaybe<EntriesFieldFiltersInput>>>;
  /** Whether to filter by ALL or ANY of the field filters. Default is ALL. */
  fieldFiltersMode?: InputMaybe<FieldFiltersModeEnum>;
  /** Array of form IDs to limit the entries to. Exclude this argument to query all forms. */
  formIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** How to sort the entries. */
  orderby?: InputMaybe<EntriesConnectionOrderbyInput>;
  /** Entry status. Default is "ACTIVE". */
  status?: InputMaybe<EntryStatusEnum>;
}

/** Arguments for filtering the RootQueryToGfFormConnection connection */
export interface RootQueryToGfFormConnectionWhereArgs {
  /** Array of form IDs to return. Exclude this argument to query all forms. */
  formIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** How to sort the entries. */
  orderby?: InputMaybe<FormsConnectionOrderbyInput>;
  /** Status of the forms to get. */
  status?: InputMaybe<FormStatusEnum>;
}

/** Arguments for filtering the RootQueryToGfSubmittedEntryConnection connection */
export interface RootQueryToGfSubmittedEntryConnectionWhereArgs {
  /** Date filters to apply. */
  dateFilters?: InputMaybe<EntriesDateFiltersInput>;
  /** Field-specific filters to apply. */
  fieldFilters?: InputMaybe<Array<InputMaybe<EntriesFieldFiltersInput>>>;
  /** Whether to filter by ALL or ANY of the field filters. Default is ALL. */
  fieldFiltersMode?: InputMaybe<FieldFiltersModeEnum>;
  /** Array of form IDs to limit the entries to. Exclude this argument to query all forms. */
  formIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** How to sort the entries. */
  orderby?: InputMaybe<EntriesConnectionOrderbyInput>;
  /** Entry status. Default is "ACTIVE". */
  status?: InputMaybe<EntryStatusEnum>;
}

/** Arguments for filtering the RootQueryToMediaItemConnection connection */
export interface RootQueryToMediaItemConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToMenuConnection connection */
export interface RootQueryToMenuConnectionWhereArgs {
  /** The ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The slug of the menu to query items for */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToMenuItemConnection connection */
export interface RootQueryToMenuItemConnectionWhereArgs {
  /** The ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** The menu location for the menu being queried */
  location?: InputMaybe<MenuLocationEnum>;
  /** The database ID of the parent menu object */
  parentDatabaseId?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent menu object */
  parentId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the RootQueryToNewEventConnection connection */
export interface RootQueryToNewEventConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToNewMediaCenterConnection connection */
export interface RootQueryToNewMediaCenterConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToNewPressCoverageConnection connection */
export interface RootQueryToNewPressCoverageConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToNewPressReleaseConnection connection */
export interface RootQueryToNewPressReleaseConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToPageConnection connection */
export interface RootQueryToPageConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToPartnerConnection connection */
export interface RootQueryToPartnerConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToPostConnection connection */
export interface RootQueryToPostConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** The ID of the post object to filter by */
  onlySticky?: InputMaybe<Scalars["Boolean"]>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToPostFormatConnection connection */
export interface RootQueryToPostFormatConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToPressCoverageConnection connection */
export interface RootQueryToPressCoverageConnectionWhereArgs {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToPressReleaseConnection connection */
export interface RootQueryToPressReleaseConnectionWhereArgs {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToProConnection connection */
export interface RootQueryToProConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToProductCardConnection connection */
export interface RootQueryToProductCardConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToProductsServiceConnection connection */
export interface RootQueryToProductsServiceConnectionWhereArgs {
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToProjectConnection connection */
export interface RootQueryToProjectConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToTagConnection connection */
export interface RootQueryToTagConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToTeamMemberConnection connection */
export interface RootQueryToTeamMemberConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the RootQueryToTermNodeConnection connection */
export interface RootQueryToTermNodeConnectionWhereArgs {
  /** Unique cache key to be produced when this query is stored in an object cache. Default is 'core'. */
  cacheDomain?: InputMaybe<Scalars["String"]>;
  /** Term ID to retrieve child terms of. If multiple taxonomies are passed, $child_of is ignored. Default 0. */
  childOf?: InputMaybe<Scalars["Int"]>;
  /** True to limit results to terms that have no children. This parameter has no effect on non-hierarchical taxonomies. Default false. */
  childless?: InputMaybe<Scalars["Boolean"]>;
  /** Retrieve terms where the description is LIKE the input value. Default empty. */
  descriptionLike?: InputMaybe<Scalars["String"]>;
  /** Array of term ids to exclude. If $include is non-empty, $exclude is ignored. Default empty array. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of term ids to exclude along with all of their descendant terms. If $include is non-empty, $exclude_tree is ignored. Default empty array. */
  excludeTree?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to hide terms not assigned to any posts. Accepts true or false. Default false */
  hideEmpty?: InputMaybe<Scalars["Boolean"]>;
  /** Whether to include terms that have non-empty descendants (even if $hide_empty is set to true). Default true. */
  hierarchical?: InputMaybe<Scalars["Boolean"]>;
  /** Array of term ids to include. Default empty array. */
  include?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of names to return term(s) for. Default empty. */
  name?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Retrieve terms where the name is LIKE the input value. Default empty. */
  nameLike?: InputMaybe<Scalars["String"]>;
  /** Array of object IDs. Results will be limited to terms associated with these objects. */
  objectIds?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Direction the connection should be ordered in */
  order?: InputMaybe<OrderEnum>;
  /** Field(s) to order terms by. Defaults to 'name'. */
  orderby?: InputMaybe<TermObjectsConnectionOrderbyEnum>;
  /** Whether to pad the quantity of a term's children in the quantity of each term's "count" object variable. Default false. */
  padCounts?: InputMaybe<Scalars["Boolean"]>;
  /** Parent term ID to retrieve direct-child terms of. Default empty. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Search criteria to match terms. Will be SQL-formatted with wildcards before and after. Default empty. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of slugs to return term(s) for. Default empty. */
  slug?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The Taxonomy to filter terms by */
  taxonomies?: InputMaybe<Array<InputMaybe<TaxonomyEnum>>>;
  /** Array of term taxonomy IDs, to match when querying terms. */
  termTaxonomId?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Whether to prime meta caches for matched terms. Default true. */
  updateTermMetaCache?: InputMaybe<Scalars["Boolean"]>;
}

/** Arguments for filtering the RootQueryToUserConnection connection */
export interface RootQueryToUserConnectionWhereArgs {
  /** Array of userIds to exclude. */
  exclude?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  /** Pass an array of post types to filter results to users who have published posts in those post types. */
  hasPublishedPosts?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of userIds to include. */
  include?: InputMaybe<Array<InputMaybe<Scalars["Int"]>>>;
  /** The user login. */
  login?: InputMaybe<Scalars["String"]>;
  /** An array of logins to include. Users matching one of these logins will be included in results. */
  loginIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** An array of logins to exclude. Users matching one of these logins will not be included in results. */
  loginNotIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** The user nicename. */
  nicename?: InputMaybe<Scalars["String"]>;
  /** An array of nicenames to include. Users matching one of these nicenames will be included in results. */
  nicenameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** An array of nicenames to exclude. Users matching one of these nicenames will not be included in results. */
  nicenameNotIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<UsersConnectionOrderbyInput>>>;
  /** An array of role names that users must match to be included in results. Note that this is an inclusive list: users must match *each* role. */
  role?: InputMaybe<UserRoleEnum>;
  /** An array of role names. Matched users must have at least one of these roles. */
  roleIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** An array of role names to exclude. Users matching one or more of these roles will not be included in results. */
  roleNotIn?: InputMaybe<Array<InputMaybe<UserRoleEnum>>>;
  /** Search keyword. Searches for possible string matches on columns. When "searchColumns" is left empty, it tries to determine which column to search in based on search string. */
  search?: InputMaybe<Scalars["String"]>;
  /** Array of column names to be searched. Accepts 'ID', 'login', 'nicename', 'email', 'url'. */
  searchColumns?: InputMaybe<
    Array<InputMaybe<UsersConnectionSearchColumnEnum>>
  >;
}

/** Input for the sendPasswordResetEmail mutation */
export interface SendPasswordResetEmailInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A string that contains the user's username or email address. */
  username: Scalars["String"];
}

/** Border style to be used around the signature area. */
export enum SignatureFieldBorderStyleEnum {
  /** A "dashed" border style. */
  DASHED = "DASHED",
  /** A "dotted" border style. */
  DOTTED = "DOTTED",
  /** A "double" border style. */
  DOUBLE = "DOUBLE",
  /** A "dashed" border style. */
  GROOVE = "GROOVE",
  /** An "inset" border style. */
  INSET = "INSET",
  /** An "outset" border style. */
  OUTSET = "OUTSET",
  /** A "ridge" border style. */
  RIDGE = "RIDGE",
  /** A "solid" border style. */
  SOLID = "SOLID",
}

/** Width of the border around the signature area. */
export enum SignatureFieldBorderWidthEnum {
  /** A large border width. */
  LARGE = "LARGE",
  /** A medium border width. */
  MEDIUM = "MEDIUM",
  /** No border width. */
  NONE = "NONE",
  /** A small border width. */
  SMALL = "SMALL",
}

/** Entry meta input fields for submitting Gravity Forms forms. */
export interface SubmitFormMetaInput {
  /** ID of the user that submitted of the form if a logged in user submitted the form. */
  createdById?: InputMaybe<Scalars["Int"]>;
  /** The UTC date the entry was created, in `Y-m-d H:i:s` format. */
  dateCreatedGmt?: InputMaybe<Scalars["String"]>;
  /** Client IP of user who submitted the form. */
  ip?: InputMaybe<Scalars["String"]>;
  /** Used to overwrite the sourceUrl the form was submitted from. */
  sourceUrl?: InputMaybe<Scalars["String"]>;
  /** The name and version of both the browser and operating system from which the entry was submitted. */
  userAgent?: InputMaybe<Scalars["String"]>;
}

/** Input for the submitGfDraftEntry mutation */
export interface SubmitGfDraftEntryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Either the global ID of the draft entry, or its resume token. */
  id: Scalars["ID"];
  /** The ID type for the draft entry. Defaults to `ID` . */
  idType?: InputMaybe<DraftEntryIdTypeEnum>;
}

/** Input for the submitGfForm mutation */
export interface SubmitGfFormInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The entry meta associated with the submission. */
  entryMeta?: InputMaybe<SubmitFormMetaInput>;
  /** The field ids and their values. */
  fieldValues: Array<InputMaybe<FormFieldValuesInput>>;
  /** The form ID. Accepts either a global or Database ID. */
  id: Scalars["ID"];
  /** Set to `true` if submitting a draft entry. Defaults to `false`. */
  saveAsDraft?: InputMaybe<Scalars["Boolean"]>;
  /** Useful for multi-page forms to indicate which page of the form was just submitted. */
  sourcePage?: InputMaybe<Scalars["Int"]>;
  /** Useful for multi-page forms to indicate which page is to be loaded if the current page passes validation. */
  targetPage?: InputMaybe<Scalars["Int"]>;
}

/** The Type of Identifier used to fetch a single resource. */
export enum SubmittedEntryIdTypeEnum {
  /** The database ID assigned by Gravity Forms. Used by submitted entries. */
  DATABASE_ID = "DATABASE_ID",
  /** Unique global ID for the object. */
  ID = "ID",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum TagIdType {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Arguments for filtering the TagToContentNodeConnection connection */
export interface TagToContentNodeConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypesOfTagEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the TagToPostConnection connection */
export interface TagToPostConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Allowed taxonomies */
export enum TaxonomyEnum {
  /** Taxonomy enum category */
  CATEGORY = "CATEGORY",
  /** Taxonomy enum newmediacenter */
  NEWMEDIACENTER = "NEWMEDIACENTER",
  /** Taxonomy enum post_format */
  POSTFORMAT = "POSTFORMAT",
  /** Taxonomy enum pro */
  PRO = "PRO",
  /** Taxonomy enum post_tag */
  TAG = "TAG",
}

/** The Type of Identifier used to fetch a single Taxonomy node. To be used along with the "id" field. Default is "ID". */
export enum TaxonomyIdTypeEnum {
  /** The globally unique ID */
  ID = "ID",
  /** The name of the taxonomy */
  NAME = "NAME",
}

/** The Type of Identifier used to fetch a single resource. Default is ID. */
export enum TeamMemberIdType {
  /** Identify a resource by the Database ID. */
  DATABASE_ID = "DATABASE_ID",
  /** Identify a resource by the (hashed) Global ID. */
  ID = "ID",
  /** Identify a resource by the slug. Available to non-hierarchcial Types where the slug is a unique identifier. */
  SLUG = "SLUG",
  /** Identify a resource by the URI. */
  URI = "URI",
}

/** The Type of Identifier used to fetch a single resource. Default is "ID". To be used along with the "id" field. */
export enum TermNodeIdTypeEnum {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The hashed Global ID */
  ID = "ID",
  /** The name of the node */
  NAME = "NAME",
  /** Url friendly name of the node */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
}

/** Options for ordering the connection by */
export enum TermObjectsConnectionOrderbyEnum {
  /** Order the connection by item count. */
  COUNT = "COUNT",
  /** Order the connection by description. */
  DESCRIPTION = "DESCRIPTION",
  /** Order the connection by name. */
  NAME = "NAME",
  /** Order the connection by slug. */
  SLUG = "SLUG",
  /** Order the connection by term group. */
  TERM_GROUP = "TERM_GROUP",
  /** Order the connection by term id. */
  TERM_ID = "TERM_ID",
  /** Order the connection by term order. */
  TERM_ORDER = "TERM_ORDER",
}

/** How the time is displayed. */
export enum TimeFieldFormatEnum {
  /** 12-hour time format. */
  H12 = "H12",
  /** 24-hour time format. */
  H24 = "H24",
}

/** Input for the UpdateCategory mutation */
export interface UpdateCategoryInput {
  /** The slug that the category will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the category object */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the category object to update */
  id: Scalars["ID"];
  /** The name of the category object to mutate */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the category that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateComment mutation */
export interface UpdateCommentInput {
  /** The approval status of the comment. */
  approved?: InputMaybe<Scalars["String"]>;
  /** The name of the comment's author. */
  author?: InputMaybe<Scalars["String"]>;
  /** The email of the comment's author. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** The url of the comment's author. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The ID of the post object the comment belongs to. */
  commentOn?: InputMaybe<Scalars["Int"]>;
  /** Content of the comment. */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day ( e.g. 01/31/2017 ) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the comment being updated. */
  id: Scalars["ID"];
  /** Parent comment of current comment. */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Type of comment. */
  type?: InputMaybe<Scalars["String"]>;
}

/** Entry meta input fields for updating draft Gravity Forms entries. */
export interface UpdateDraftEntryMetaInput {
  /** ID of the user that submitted of the form if a logged in user submitted the form. */
  createdById?: InputMaybe<Scalars["Int"]>;
  /** The UTC date the entry was created, in `Y-m-d H:i:s` format. */
  dateCreatedGmt?: InputMaybe<Scalars["String"]>;
  /** Client IP of user who submitted the form. */
  ip?: InputMaybe<Scalars["String"]>;
  /** Used to overwrite the sourceUrl the form was submitted from. */
  sourceUrl?: InputMaybe<Scalars["String"]>;
  /** The name and version of both the browser and operating system from which the entry was submitted. */
  userAgent?: InputMaybe<Scalars["String"]>;
}

/** Entry meta input fields for updating Gravity Forms entries. */
export interface UpdateEntryMetaInput {
  /** ID of the user that submitted of the form if a logged in user submitted the form. */
  createdById?: InputMaybe<Scalars["Int"]>;
  /** The UTC date the entry was created, in `Y-m-d H:i:s` format. */
  dateCreatedGmt?: InputMaybe<Scalars["String"]>;
  /** Client IP of user who submitted the form. */
  ip?: InputMaybe<Scalars["String"]>;
  /** Whether the entry has been read. */
  isRead?: InputMaybe<Scalars["Boolean"]>;
  /** Whether the entry has been starred (i.e marked with a star). */
  isStarred?: InputMaybe<Scalars["Boolean"]>;
  /** Used to overwrite the sourceUrl the form was submitted from. */
  sourceUrl?: InputMaybe<Scalars["String"]>;
  /** The current status of the entry. */
  status?: InputMaybe<EntryStatusEnum>;
  /** The name and version of both the browser and operating system from which the entry was submitted. */
  userAgent?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateGfDraftEntry mutation */
export interface UpdateGfDraftEntryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The entry meta values to update. */
  entryMeta?: InputMaybe<UpdateDraftEntryMetaInput>;
  /** The field ids and their values. */
  fieldValues?: InputMaybe<Array<InputMaybe<FormFieldValuesInput>>>;
  /** Either the global ID of the draft entry, or its resume token. */
  id: Scalars["ID"];
  /** The ID type for the draft entry. Defaults to `ID` . */
  idType?: InputMaybe<DraftEntryIdTypeEnum>;
  /** Whether the field values should be validated on submission. Defaults to false. */
  shouldValidate?: InputMaybe<Scalars["Boolean"]>;
}

/** Input for the updateGfEntry mutation */
export interface UpdateGfEntryInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The entry meta values to update. */
  entryMeta?: InputMaybe<UpdateEntryMetaInput>;
  /** The field ids and their values to update. */
  fieldValues?: InputMaybe<Array<InputMaybe<FormFieldValuesInput>>>;
  /** ID of the entry to update, either a global or database ID. */
  id: Scalars["ID"];
  /** Whether the field values should be validated on submission. Defaults to false. */
  shouldValidate?: InputMaybe<Scalars["Boolean"]>;
}

/** Input for the updateMediaItem mutation */
export interface UpdateMediaItemInput {
  /** Alternative text to display when mediaItem is not displayed */
  altText?: InputMaybe<Scalars["String"]>;
  /** The userId to assign as the author of the mediaItem */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** The caption for the mediaItem */
  caption?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the mediaItem */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The date of the mediaItem */
  date?: InputMaybe<Scalars["String"]>;
  /** The date (in GMT zone) of the mediaItem */
  dateGmt?: InputMaybe<Scalars["String"]>;
  /** Description of the mediaItem */
  description?: InputMaybe<Scalars["String"]>;
  /** The file name of the mediaItem */
  filePath?: InputMaybe<Scalars["String"]>;
  /** The file type of the mediaItem */
  fileType?: InputMaybe<MimeTypeEnum>;
  /** The ID of the mediaItem object */
  id: Scalars["ID"];
  /** The WordPress post ID or the graphQL postId of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The ping status for the mediaItem */
  pingStatus?: InputMaybe<Scalars["String"]>;
  /** The slug of the mediaItem */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the mediaItem */
  status?: InputMaybe<MediaItemStatusEnum>;
  /** The title of the mediaItem */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateNewEvent mutation */
export interface UpdateNewEventInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the newEvent object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newEvent and newMediaCenters */
  newMediaCenters?: InputMaybe<NewEventNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the UpdateNewMediaCenter mutation */
export interface UpdateNewMediaCenterInput {
  /** The slug that the newmediacenter will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the newmediacenter object */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the newMediaCenter object to update */
  id: Scalars["ID"];
  /** The name of the newmediacenter object to mutate */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the newmediacenter that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateNewPressCoverage mutation */
export interface UpdateNewPressCoverageInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the newPressCoverage object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newPressCoverage and newMediaCenters */
  newMediaCenters?: InputMaybe<NewPressCoverageNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateNewPressRelease mutation */
export interface UpdateNewPressReleaseInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the newPressRelease object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** Set connections between the newPressRelease and newMediaCenters */
  newMediaCenters?: InputMaybe<NewPressReleaseNewMediaCentersInput>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updatePage mutation */
export interface UpdatePageInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the page object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updatePartner mutation */
export interface UpdatePartnerInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the partner object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the UpdatePostFormat mutation */
export interface UpdatePostFormatInput {
  /** The slug that the post_format will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the post_format object */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the postFormat object to update */
  id: Scalars["ID"];
  /** The name of the post_format object to mutate */
  name?: InputMaybe<Scalars["String"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the updatePost mutation */
export interface UpdatePostInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** Set connections between the post and categories */
  categories?: InputMaybe<PostCategoriesInput>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The comment status for the object */
  commentStatus?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The excerpt of the object */
  excerpt?: InputMaybe<Scalars["String"]>;
  /** The ID of the post object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The ping status for the object */
  pingStatus?: InputMaybe<Scalars["String"]>;
  /** URLs that have been pinged. */
  pinged?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Set connections between the post and postFormats */
  postFormats?: InputMaybe<PostPostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** Set connections between the post and tags */
  tags?: InputMaybe<PostTagsInput>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
  /** URLs queued to be pinged. */
  toPing?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
}

/** Input for the updatePressCoverage mutation */
export interface UpdatePressCoverageInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the PressCoverage object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updatePressRelease mutation */
export interface UpdatePressReleaseInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the PressRelease object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the UpdatePro mutation */
export interface UpdateProInput {
  /** The slug that the pro will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the pro object */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the pro object to update */
  id: Scalars["ID"];
  /** The name of the pro object to mutate */
  name?: InputMaybe<Scalars["String"]>;
  /** The ID of the pro that should be set as the parent */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateProductCard mutation */
export interface UpdateProductCardInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the productCard object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateProductsService mutation */
export interface UpdateProductsServiceInput {
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The content of the object */
  content?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the ProductsService object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The ID of the parent object */
  parentId?: InputMaybe<Scalars["ID"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** Set connections between the ProductsService and postFormats */
  postFormats?: InputMaybe<ProductsServicePostFormatsInput>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateProject mutation */
export interface UpdateProjectInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the project object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateSettings mutation */
export interface UpdateSettingsInput {
  atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking?: InputMaybe<
    Scalars["String"]
  >;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** Allow people to submit comments on new posts. */
  discussionSettingsDefaultCommentStatus?: InputMaybe<Scalars["String"]>;
  /** Allow link notifications from other blogs (pingbacks and trackbacks) on new articles. */
  discussionSettingsDefaultPingStatus?: InputMaybe<Scalars["String"]>;
  /** A date format for all date strings. */
  generalSettingsDateFormat?: InputMaybe<Scalars["String"]>;
  /** Site tagline. */
  generalSettingsDescription?: InputMaybe<Scalars["String"]>;
  /** This address is used for admin purposes, like new user notification. */
  generalSettingsEmail?: InputMaybe<Scalars["String"]>;
  /** WordPress locale code. */
  generalSettingsLanguage?: InputMaybe<Scalars["String"]>;
  /** A day number of the week that the week should start on. */
  generalSettingsStartOfWeek?: InputMaybe<Scalars["Int"]>;
  /** A time format for all time strings. */
  generalSettingsTimeFormat?: InputMaybe<Scalars["String"]>;
  /** A city in the same timezone as you. */
  generalSettingsTimezone?: InputMaybe<Scalars["String"]>;
  /** Site title. */
  generalSettingsTitle?: InputMaybe<Scalars["String"]>;
  /** Site URL. */
  generalSettingsUrl?: InputMaybe<Scalars["String"]>;
  /** Blog pages show at most. */
  readingSettingsPostsPerPage?: InputMaybe<Scalars["Int"]>;
  /** Default post category. */
  writingSettingsDefaultCategory?: InputMaybe<Scalars["Int"]>;
  /** Default post format. */
  writingSettingsDefaultPostFormat?: InputMaybe<Scalars["String"]>;
  /** Convert emoticons like :-) and :-P to graphics on display. */
  writingSettingsUseSmilies?: InputMaybe<Scalars["Boolean"]>;
}

/** Input for the UpdateTag mutation */
export interface UpdateTagInput {
  /** The slug that the post_tag will be an alias of */
  aliasOf?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The description of the post_tag object */
  description?: InputMaybe<Scalars["String"]>;
  /** The ID of the tag object to update */
  id: Scalars["ID"];
  /** The name of the post_tag object to mutate */
  name?: InputMaybe<Scalars["String"]>;
  /** If this argument exists then the slug will be checked to see if it is not an existing valid term. If that check succeeds (it is not a valid term), then it is added and the term id is given. If it fails, then a check is made to whether the taxonomy is hierarchical and the parent argument is not empty. If the second check succeeds, the term will be inserted and the term id will be given. If the slug argument is empty, then it will be calculated from the term name. */
  slug?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateTeamMember mutation */
export interface UpdateTeamMemberInput {
  /** The userId to assign as the author of the object */
  authorId?: InputMaybe<Scalars["ID"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** The date of the object. Preferable to enter as year/month/day (e.g. 01/31/2017) as it will rearrange date as fit if it is not specified. Incomplete dates may have unintended results for example, "2017" as the input will use current date with timestamp 20:17  */
  date?: InputMaybe<Scalars["String"]>;
  /** The ID of the teamMember object */
  id: Scalars["ID"];
  /** A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types. */
  menuOrder?: InputMaybe<Scalars["Int"]>;
  /** The password used to protect the content of the object */
  password?: InputMaybe<Scalars["String"]>;
  /** The slug of the object */
  slug?: InputMaybe<Scalars["String"]>;
  /** The status of the object */
  status?: InputMaybe<PostStatusEnum>;
  /** The title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Input for the updateUser mutation */
export interface UpdateUserInput {
  /** User's AOL IM account. */
  aim?: InputMaybe<Scalars["String"]>;
  /** This is an ID that can be passed to a mutation by the client to track the progress of mutations and catch possible duplicate mutation submissions. */
  clientMutationId?: InputMaybe<Scalars["String"]>;
  /** A string containing content about the user. */
  description?: InputMaybe<Scalars["String"]>;
  /** A string that will be shown on the site. Defaults to user's username. It is likely that you will want to change this, for both appearance and security through obscurity (that is if you dont use and delete the default admin user). */
  displayName?: InputMaybe<Scalars["String"]>;
  /** A string containing the user's email address. */
  email?: InputMaybe<Scalars["String"]>;
  /** 	The user's first name. */
  firstName?: InputMaybe<Scalars["String"]>;
  /** The ID of the user */
  id: Scalars["ID"];
  /** User's Jabber account. */
  jabber?: InputMaybe<Scalars["String"]>;
  /** The user's last name. */
  lastName?: InputMaybe<Scalars["String"]>;
  /** User's locale. */
  locale?: InputMaybe<Scalars["String"]>;
  /** A string that contains a URL-friendly name for the user. The default is the user's username. */
  nicename?: InputMaybe<Scalars["String"]>;
  /** The user's nickname, defaults to the user's username. */
  nickname?: InputMaybe<Scalars["String"]>;
  /** A string that contains the plain text password for the user. */
  password?: InputMaybe<Scalars["String"]>;
  /** The date the user registered. Format is Y-m-d H:i:s. */
  registered?: InputMaybe<Scalars["String"]>;
  /** A string for whether to enable the rich editor or not. False if not empty. */
  richEditing?: InputMaybe<Scalars["String"]>;
  /** An array of roles to be assigned to the user. */
  roles?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** A string containing the user's URL for the user's web site. */
  websiteUrl?: InputMaybe<Scalars["String"]>;
  /** User's Yahoo IM account. */
  yim?: InputMaybe<Scalars["String"]>;
}

/** The Type of Identifier used to fetch a single User node. To be used along with the "id" field. Default is "ID". */
export enum UserNodeIdTypeEnum {
  /** The Database ID for the node */
  DATABASE_ID = "DATABASE_ID",
  /** The Email of the User */
  EMAIL = "EMAIL",
  /** The hashed Global ID */
  ID = "ID",
  /** The slug of the User */
  SLUG = "SLUG",
  /** The URI for the node */
  URI = "URI",
  /** The username the User uses to login with */
  USERNAME = "USERNAME",
}

/** Names of available user roles */
export enum UserRoleEnum {
  /** User role with specific capabilities */
  ADMINISTRATOR = "ADMINISTRATOR",
  /** User role with specific capabilities */
  AUTHOR = "AUTHOR",
  /** User role with specific capabilities */
  CONTRIBUTOR = "CONTRIBUTOR",
  /** User role with specific capabilities */
  EDITOR = "EDITOR",
  /** User role with specific capabilities */
  SEO_EDITOR = "SEO_EDITOR",
  /** User role with specific capabilities */
  SEO_MANAGER = "SEO_MANAGER",
  /** User role with specific capabilities */
  SUBSCRIBER = "SUBSCRIBER",
}

/** Arguments for filtering the UserToCommentConnection connection */
export interface UserToCommentConnectionWhereArgs {
  /** Comment author email address. */
  authorEmail?: InputMaybe<Scalars["String"]>;
  /** Array of author IDs to include comments for. */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to exclude comments for. */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Comment author URL. */
  authorUrl?: InputMaybe<Scalars["String"]>;
  /** Array of comment IDs to include. */
  commentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of IDs of users whose unapproved comments will be returned by the query regardless of status. */
  commentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Include comments of a given type. */
  commentType?: InputMaybe<Scalars["String"]>;
  /** Include comments from a given array of comment types. */
  commentTypeIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Exclude comments from a given array of comment types. */
  commentTypeNotIn?: InputMaybe<Scalars["String"]>;
  /** Content object author ID to limit results by. */
  contentAuthor?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs to retrieve comments for. */
  contentAuthorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of author IDs *not* to retrieve comments for. */
  contentAuthorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Limit results to those affiliated with a given content object ID. */
  contentId?: InputMaybe<Scalars["ID"]>;
  /** Array of content object IDs to include affiliated comments for. */
  contentIdIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of content object IDs to exclude affiliated comments for. */
  contentIdNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Content object name to retrieve affiliated comments for. */
  contentName?: InputMaybe<Scalars["String"]>;
  /** Content Object parent ID to retrieve affiliated comments for. */
  contentParent?: InputMaybe<Scalars["Int"]>;
  /** Array of content object statuses to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentStatus?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Content object type or array of types to retrieve affiliated comments for. Pass 'any' to match any value. */
  contentType?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Array of IDs or email addresses of users whose unapproved comments will be returned by the query regardless of $status. Default empty */
  includeUnapproved?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Karma score to retrieve matching comments for. */
  karma?: InputMaybe<Scalars["Int"]>;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
  /** Field to order the comments by. */
  orderby?: InputMaybe<CommentsConnectionOrderbyEnum>;
  /** Parent ID of comment to retrieve children of. */
  parent?: InputMaybe<Scalars["Int"]>;
  /** Array of parent IDs of comments to retrieve children for. */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of parent IDs of comments *not* to retrieve children for. */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Search term(s) to retrieve matching comments for. */
  search?: InputMaybe<Scalars["String"]>;
  /** Comment status to limit results by. */
  status?: InputMaybe<Scalars["String"]>;
  /** Include comments for a specific user ID. */
  userId?: InputMaybe<Scalars["ID"]>;
}

/** Arguments for filtering the UserToContentRevisionUnionConnection connection */
export interface UserToContentRevisionUnionConnectionWhereArgs {
  /** The Types of content to filter */
  contentTypes?: InputMaybe<Array<InputMaybe<ContentTypeEnum>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToMediaItemConnection connection */
export interface UserToMediaItemConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToNewEventConnection connection */
export interface UserToNewEventConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToNewPressCoverageConnection connection */
export interface UserToNewPressCoverageConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToNewPressReleaseConnection connection */
export interface UserToNewPressReleaseConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToPageConnection connection */
export interface UserToPageConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToPartnerConnection connection */
export interface UserToPartnerConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToPostConnection connection */
export interface UserToPostConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Category ID */
  categoryId?: InputMaybe<Scalars["Int"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Use Category Slug */
  categoryName?: InputMaybe<Scalars["String"]>;
  /** Array of category IDs, used to display objects from one category OR another */
  categoryNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Tag Slug */
  tag?: InputMaybe<Scalars["String"]>;
  /** Use Tag ID */
  tagId?: InputMaybe<Scalars["String"]>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag IDs, used to display objects from one tag OR another */
  tagNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Array of tag slugs, used to display objects from one tag OR another */
  tagSlugAnd?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Array of tag slugs, used to exclude objects in specified tags */
  tagSlugIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToProductCardConnection connection */
export interface UserToProductCardConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToProjectConnection connection */
export interface UserToProjectConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Arguments for filtering the UserToTeamMemberConnection connection */
export interface UserToTeamMemberConnectionWhereArgs {
  /** The user that's connected as the author of the object. Use the userId for the author object. */
  author?: InputMaybe<Scalars["Int"]>;
  /** Find objects connected to author(s) in the array of author's userIds */
  authorIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Find objects connected to the author by the author's nicename */
  authorName?: InputMaybe<Scalars["String"]>;
  /** Find objects NOT connected to author(s) in the array of author's userIds */
  authorNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Filter the connection based on dates */
  dateQuery?: InputMaybe<DateQueryInput>;
  /** True for objects with passwords; False for objects without passwords; null for all objects with or without passwords */
  hasPassword?: InputMaybe<Scalars["Boolean"]>;
  /** Specific ID of the object */
  id?: InputMaybe<Scalars["Int"]>;
  /** Array of IDs for the objects to retrieve */
  in?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Get objects with a specific mimeType property */
  mimeType?: InputMaybe<MimeTypeEnum>;
  /** Slug / post_name of the object */
  name?: InputMaybe<Scalars["String"]>;
  /** Specify objects to retrieve. Use slugs */
  nameIn?: InputMaybe<Array<InputMaybe<Scalars["String"]>>>;
  /** Specify IDs NOT to retrieve. If this is used in the same query as "in", it will be ignored */
  notIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** What paramater to use to order the objects by. */
  orderby?: InputMaybe<Array<InputMaybe<PostObjectsConnectionOrderbyInput>>>;
  /** Use ID to return only children. Use 0 to return only top-level items */
  parent?: InputMaybe<Scalars["ID"]>;
  /** Specify objects whose parent is in an array */
  parentIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Specify posts whose parent is not in an array */
  parentNotIn?: InputMaybe<Array<InputMaybe<Scalars["ID"]>>>;
  /** Show posts with a specific password. */
  password?: InputMaybe<Scalars["String"]>;
  /** Show Posts based on a keyword search */
  search?: InputMaybe<Scalars["String"]>;
  /** Retrieve posts where post status is in an array. */
  stati?: InputMaybe<Array<InputMaybe<PostStatusEnum>>>;
  /** Show posts with a specific status. */
  status?: InputMaybe<PostStatusEnum>;
  /** Title of the object */
  title?: InputMaybe<Scalars["String"]>;
}

/** Field to order the connection by */
export enum UsersConnectionOrderbyEnum {
  /** Order by display name */
  DISPLAY_NAME = "DISPLAY_NAME",
  /** Order by email address */
  EMAIL = "EMAIL",
  /** Order by login */
  LOGIN = "LOGIN",
  /** Preserve the login order given in the LOGIN_IN array */
  LOGIN_IN = "LOGIN_IN",
  /** Order by nice name */
  NICE_NAME = "NICE_NAME",
  /** Preserve the nice name order given in the NICE_NAME_IN array */
  NICE_NAME_IN = "NICE_NAME_IN",
  /** Order by registration date */
  REGISTERED = "REGISTERED",
  /** Order by URL */
  URL = "URL",
}

/** Options for ordering the connection */
export interface UsersConnectionOrderbyInput {
  /** The field name used to sort the results. */
  field: UsersConnectionOrderbyEnum;
  /** The cardinality of the order of the connection */
  order?: InputMaybe<OrderEnum>;
}

/** Column used for searching for users. */
export enum UsersConnectionSearchColumnEnum {
  /** The user's email address. */
  EMAIL = "EMAIL",
  /** The globally unique ID. */
  ID = "ID",
  /** The username the User uses to login with. */
  LOGIN = "LOGIN",
  /** A URL-friendly name for the user. The default is the user's username. */
  NICENAME = "NICENAME",
  /** The URL of the user\s website. */
  URL = "URL",
}

export const scalarsEnumsHash: import("gqty").ScalarsEnumsHash = {
  AddressFieldCountryEnum: true,
  AddressFieldTypeEnum: true,
  AmPmEnum: true,
  AvatarRatingEnum: true,
  Boolean: true,
  CaptchaFieldBadgePositionEnum: true,
  CaptchaFieldThemeEnum: true,
  CaptchaFieldTypeEnum: true,
  CategoryIdType: true,
  CommentsConnectionOrderbyEnum: true,
  ConditionalLogicActionTypeEnum: true,
  ConditionalLogicLogicTypeEnum: true,
  ContentNodeIdTypeEnum: true,
  ContentTypeEnum: true,
  ContentTypeIdTypeEnum: true,
  ContentTypesOfCategoryEnum: true,
  ContentTypesOfNewMediaCenterEnum: true,
  ContentTypesOfPostFormatEnum: true,
  ContentTypesOfTagEnum: true,
  DateFieldFormatEnum: true,
  DateFieldTypeEnum: true,
  DraftEntryIdTypeEnum: true,
  EntryIdTypeEnum: true,
  EntryStatusEnum: true,
  EntryTypeEnum: true,
  FieldFiltersModeEnum: true,
  FieldFiltersOperatorEnum: true,
  Float: true,
  FormButtonTypeEnum: true,
  FormConfirmationTypeEnum: true,
  FormDescriptionPlacementEnum: true,
  FormFieldCalendarIconTypeEnum: true,
  FormFieldDescriptionPlacementEnum: true,
  FormFieldLabelPlacementEnum: true,
  FormFieldRequiredIndicatorEnum: true,
  FormFieldSizeEnum: true,
  FormFieldSubLabelPlacementEnum: true,
  FormFieldTypeEnum: true,
  FormFieldVisibilityEnum: true,
  FormIdTypeEnum: true,
  FormLabelPlacementEnum: true,
  FormLimitEntriesPeriodEnum: true,
  FormNotificationToTypeEnum: true,
  FormPageProgressStyleEnum: true,
  FormPageProgressTypeEnum: true,
  FormRetentionPolicyEnum: true,
  FormRuleOperatorEnum: true,
  FormStatusEnum: true,
  FormSubLabelPlacementEnum: true,
  GfCurrencyEnum: true,
  ID: true,
  Int: true,
  MediaItemIdType: true,
  MediaItemSizeEnum: true,
  MediaItemStatusEnum: true,
  MenuItemNodeIdTypeEnum: true,
  MenuLocationEnum: true,
  MenuNodeIdTypeEnum: true,
  MimeTypeEnum: true,
  NewEventIdType: true,
  NewMediaCenterIdType: true,
  NewPressCoverageIdType: true,
  NewPressReleaseIdType: true,
  NumberFieldFormatEnum: true,
  OrderEnum: true,
  PageIdType: true,
  PartnerIdType: true,
  PasswordFieldMinStrengthEnum: true,
  PhoneFieldFormatEnum: true,
  PostFormatIdType: true,
  PostFormatTypeEnum: true,
  PostIdType: true,
  PostObjectFieldFormatEnum: true,
  PostObjectsConnectionDateColumnEnum: true,
  PostObjectsConnectionOrderbyEnum: true,
  PostStatusEnum: true,
  PressCoverageIdType: true,
  PressReleaseIdType: true,
  ProIdType: true,
  ProductCardIdType: true,
  ProductsServiceIdType: true,
  ProjectIdType: true,
  RelationEnum: true,
  SignatureFieldBorderStyleEnum: true,
  SignatureFieldBorderWidthEnum: true,
  String: true,
  SubmittedEntryIdTypeEnum: true,
  TagIdType: true,
  TaxonomyEnum: true,
  TaxonomyIdTypeEnum: true,
  TeamMemberIdType: true,
  TermNodeIdTypeEnum: true,
  TermObjectsConnectionOrderbyEnum: true,
  TimeFieldFormatEnum: true,
  Upload: true,
  UserNodeIdTypeEnum: true,
  UserRoleEnum: true,
  UsersConnectionOrderbyEnum: true,
  UsersConnectionSearchColumnEnum: true,
};
export const generatedSchema = {
  AcfFieldGroup: {
    __typename: { __type: "String!" },
    fieldGroupName: { __type: "String" },
    $on: { __type: "$AcfFieldGroup!" },
  },
  AcfLink: {
    __typename: { __type: "String!" },
    target: { __type: "String" },
    title: { __type: "String" },
    url: { __type: "String" },
  },
  AddressField: {
    __typename: { __type: "String!" },
    addressType: { __type: "AddressFieldTypeEnum" },
    addressValues: { __type: "AddressFieldValue" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    copyValuesOptionFieldId: { __type: "Int" },
    copyValuesOptionLabel: { __type: "String" },
    cssClass: { __type: "String" },
    defaultCountry: { __type: "AddressFieldCountryEnum" },
    defaultProvince: { __type: "String" },
    defaultState: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[AddressInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldCopyValuesOption: { __type: "Boolean" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  AddressFieldInput: {
    city: { __type: "String" },
    country: { __type: "AddressFieldCountryEnum" },
    lineTwo: { __type: "String" },
    state: { __type: "String" },
    street: { __type: "String" },
    zip: { __type: "String" },
  },
  AddressFieldValue: {
    __typename: { __type: "String!" },
    city: { __type: "String" },
    country: { __type: "AddressFieldCountryEnum" },
    lineTwo: { __type: "String" },
    state: { __type: "String" },
    street: { __type: "String" },
    zip: { __type: "String" },
  },
  AddressInputProperty: {
    __typename: { __type: "String!" },
    autocompleteAttribute: { __type: "String" },
    customLabel: { __type: "String" },
    defaultValue: { __type: "String" },
    id: { __type: "Float" },
    isHidden: { __type: "Boolean" },
    key: { __type: "String" },
    label: { __type: "String" },
    name: { __type: "String" },
    placeholder: { __type: "String" },
  },
  AtlasContentModelerSettingsSettings: {
    __typename: { __type: "String!" },
    atlasContentModelerUsageTracking: { __type: "String" },
  },
  Avatar: {
    __typename: { __type: "String!" },
    default: { __type: "String" },
    extraAttr: { __type: "String" },
    forceDefault: { __type: "Boolean" },
    foundAvatar: { __type: "Boolean" },
    height: { __type: "Int" },
    isRestricted: { __type: "Boolean" },
    rating: { __type: "String" },
    scheme: { __type: "String" },
    size: { __type: "Int" },
    url: { __type: "String" },
    width: { __type: "Int" },
  },
  CaptchaField: {
    __typename: { __type: "String!" },
    captchaBadgePosition: { __type: "CaptchaFieldBadgePositionEnum" },
    captchaLanguage: { __type: "String" },
    captchaTheme: { __type: "CaptchaFieldThemeEnum" },
    captchaType: { __type: "CaptchaFieldTypeEnum" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    simpleCaptchaBackgroundColor: { __type: "String" },
    simpleCaptchaFontColor: { __type: "String" },
    simpleCaptchaSize: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  Category: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "CategoryToAncestorsCategoryConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    categoryId: { __type: "Int" },
    children: {
      __type: "CategoryToCategoryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "CategoryToCategoryConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    contentNodes: {
      __type: "CategoryToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "CategoryToContentNodeConnectionWhereArgs",
      },
    },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    parent: { __type: "CategoryToParentCategoryConnectionEdge" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    posts: {
      __type: "CategoryToPostConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "CategoryToPostConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    taxonomy: { __type: "CategoryToTaxonomyConnectionEdge" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
  },
  CategoryToAncestorsCategoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CategoryToAncestorsCategoryConnectionEdge]" },
    nodes: { __type: "[Category]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  CategoryToAncestorsCategoryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Category" },
  },
  CategoryToCategoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CategoryToCategoryConnectionEdge]" },
    nodes: { __type: "[Category]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  CategoryToCategoryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Category" },
  },
  CategoryToCategoryConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  CategoryToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CategoryToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  CategoryToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  CategoryToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypesOfCategoryEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CategoryToParentCategoryConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Category" },
  },
  CategoryToPostConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CategoryToPostConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  CategoryToPostConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  CategoryToPostConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  CategoryToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Taxonomy" },
  },
  CheckboxField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    checkboxValues: { __type: "[CheckboxFieldValue]" },
    choices: { __type: "[CheckboxFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasSelectAll: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[CheckboxInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  CheckboxFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  CheckboxFieldInput: {
    inputId: { __type: "Float" },
    value: { __type: "String" },
  },
  CheckboxFieldValue: {
    __typename: { __type: "String!" },
    inputId: { __type: "Float" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  CheckboxInputProperty: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
    label: { __type: "String" },
    name: { __type: "String" },
  },
  Comment: {
    __typename: { __type: "String!" },
    agent: { __type: "String" },
    approved: { __type: "Boolean" },
    author: { __type: "CommentToCommenterConnectionEdge" },
    authorIp: { __type: "String" },
    commentId: { __type: "Int" },
    commentedOn: { __type: "CommentToContentNodeConnectionEdge" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    karma: { __type: "Int" },
    parent: {
      __type: "CommentToParentCommentConnectionEdge",
      __args: { where: "CommentToParentCommentConnectionWhereArgs" },
    },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    replies: {
      __type: "CommentToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "CommentToCommentConnectionWhereArgs",
      },
    },
    type: { __type: "String" },
  },
  CommentAuthor: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int!" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    name: { __type: "String" },
    url: { __type: "String" },
  },
  CommentToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[CommentToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  CommentToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  CommentToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  CommentToCommenterConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Commenter" },
  },
  CommentToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ContentNode" },
  },
  CommentToParentCommentConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Comment" },
  },
  CommentToParentCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  Commenter: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int!" },
    email: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    name: { __type: "String" },
    url: { __type: "String" },
    $on: { __type: "$Commenter!" },
  },
  ConditionalLogic: {
    __typename: { __type: "String!" },
    actionType: { __type: "ConditionalLogicActionTypeEnum" },
    logicType: { __type: "ConditionalLogicLogicTypeEnum" },
    rules: { __type: "[ConditionalLogicRule]" },
  },
  ConditionalLogicRule: {
    __typename: { __type: "String!" },
    fieldId: { __type: "Float" },
    operator: { __type: "FormRuleOperatorEnum" },
    value: { __type: "String" },
  },
  ConditionalTags: {
    __typename: { __type: "String!" },
    isArchive: { __type: "Boolean" },
    isAttachment: { __type: "Boolean" },
    isAuthor: { __type: "Boolean" },
    isCategory: { __type: "Boolean" },
    isDate: { __type: "Boolean" },
    isDay: { __type: "Boolean" },
    isFrontPage: { __type: "Boolean" },
    isHome: { __type: "Boolean" },
    isMonth: { __type: "Boolean" },
    isMultiAuthor: { __type: "Boolean" },
    isPage: { __type: "Boolean" },
    isPageTemplate: { __type: "Boolean" },
    isPostTypeArchive: { __type: "Boolean" },
    isPreview: { __type: "Boolean" },
    isPrivacyPolicy: { __type: "Boolean" },
    isSearch: { __type: "Boolean" },
    isSingle: { __type: "Boolean" },
    isSingular: { __type: "Boolean" },
    isSticky: { __type: "Boolean" },
    isTag: { __type: "Boolean" },
    isTax: { __type: "Boolean" },
    isYear: { __type: "Boolean" },
  },
  ConsentField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    checkboxLabel: { __type: "String" },
    conditionalLogic: { __type: "ConditionalLogic" },
    consentValue: { __type: "Boolean" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  ContentNode: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    uri: { __type: "String" },
    $on: { __type: "$ContentNode!" },
  },
  ContentNodeToContentTypeConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ContentType" },
  },
  ContentNodeToEditLastConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "User" },
  },
  ContentNodeToEditLockConnectionEdge: {
    __typename: { __type: "String!" },
    lockTimestamp: { __type: "String" },
    node: { __type: "User" },
  },
  ContentNodeToEnqueuedScriptConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ContentNodeToEnqueuedScriptConnectionEdge]" },
    nodes: { __type: "[EnqueuedScript]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ContentNodeToEnqueuedScriptConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedScript" },
  },
  ContentNodeToEnqueuedStylesheetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ContentNodeToEnqueuedStylesheetConnectionEdge]" },
    nodes: { __type: "[EnqueuedStylesheet]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ContentNodeToEnqueuedStylesheetConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedStylesheet" },
  },
  ContentRevisionUnion: {
    __typename: { __type: "String!" },
    $on: { __type: "$ContentRevisionUnion!" },
  },
  ContentTemplate: {
    __typename: { __type: "String!" },
    templateName: { __type: "String" },
    $on: { __type: "$ContentTemplate!" },
  },
  ContentType: {
    __typename: { __type: "String!" },
    canExport: { __type: "Boolean" },
    conditionalTags: { __type: "ConditionalTags" },
    connectedTaxonomies: {
      __type: "ContentTypeToTaxonomyConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    contentNodes: {
      __type: "ContentTypeToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "ContentTypeToContentNodeConnectionWhereArgs",
      },
    },
    deleteWithUser: { __type: "Boolean" },
    description: { __type: "String" },
    excludeFromSearch: { __type: "Boolean" },
    graphqlPluralName: { __type: "String" },
    graphqlSingleName: { __type: "String" },
    hasArchive: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isFrontPage: { __type: "Boolean!" },
    isPostsPage: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    label: { __type: "String" },
    labels: { __type: "PostTypeLabelDetails" },
    menuIcon: { __type: "String" },
    menuPosition: { __type: "Int" },
    name: { __type: "String" },
    public: { __type: "Boolean" },
    publiclyQueryable: { __type: "Boolean" },
    restBase: { __type: "String" },
    restControllerClass: { __type: "String" },
    showInAdminBar: { __type: "Boolean" },
    showInGraphql: { __type: "Boolean" },
    showInMenu: { __type: "Boolean" },
    showInNavMenus: { __type: "Boolean" },
    showInRest: { __type: "Boolean" },
    showUi: { __type: "Boolean" },
    templates: { __type: "[String]" },
    uri: { __type: "String" },
  },
  ContentTypeToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ContentTypeToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ContentTypeToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  ContentTypeToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  ContentTypeToTaxonomyConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ContentTypeToTaxonomyConnectionEdge]" },
    nodes: { __type: "[Taxonomy]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ContentTypeToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Taxonomy" },
  },
  CreateCategoryInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    name: { __type: "String!" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  CreateCategoryPayload: {
    __typename: { __type: "String!" },
    category: { __type: "Category" },
    clientMutationId: { __type: "String" },
  },
  CreateCommentInput: {
    approved: { __type: "String" },
    author: { __type: "String" },
    authorEmail: { __type: "String" },
    authorUrl: { __type: "String" },
    clientMutationId: { __type: "String" },
    commentOn: { __type: "Int" },
    content: { __type: "String" },
    date: { __type: "String" },
    parent: { __type: "ID" },
    type: { __type: "String" },
  },
  CreateCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "Comment" },
    success: { __type: "Boolean" },
  },
  CreateMediaItemInput: {
    altText: { __type: "String" },
    authorId: { __type: "ID" },
    caption: { __type: "String" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    description: { __type: "String" },
    filePath: { __type: "String" },
    fileType: { __type: "MimeTypeEnum" },
    parentId: { __type: "ID" },
    pingStatus: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "MediaItemStatusEnum" },
    title: { __type: "String" },
  },
  CreateMediaItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    mediaItem: { __type: "MediaItem" },
  },
  CreateNewEventInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewEventNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateNewEventPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newEvent: { __type: "NewEvent" },
  },
  CreateNewMediaCenterInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    name: { __type: "String!" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  CreateNewMediaCenterPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newMediaCenter: { __type: "NewMediaCenter" },
  },
  CreateNewPressCoverageInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewPressCoverageNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateNewPressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newPressCoverage: { __type: "NewPressCoverage" },
  },
  CreateNewPressReleaseInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewPressReleaseNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateNewPressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newPressRelease: { __type: "NewPressRelease" },
  },
  CreatePageInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    parentId: { __type: "ID" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreatePagePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    page: { __type: "Page" },
  },
  CreatePartnerInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreatePartnerPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    partner: { __type: "Partner" },
  },
  CreatePostFormatInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    name: { __type: "String!" },
    slug: { __type: "String" },
  },
  CreatePostFormatPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    postFormat: { __type: "PostFormat" },
  },
  CreatePostInput: {
    authorId: { __type: "ID" },
    categories: { __type: "PostCategoriesInput" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    excerpt: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    pingStatus: { __type: "String" },
    pinged: { __type: "[String]" },
    postFormats: { __type: "PostPostFormatsInput" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    tags: { __type: "PostTagsInput" },
    title: { __type: "String" },
    toPing: { __type: "[String]" },
  },
  CreatePostPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    post: { __type: "Post" },
  },
  CreatePressCoverageInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreatePressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pressCoverage: { __type: "PressCoverage" },
  },
  CreatePressReleaseInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreatePressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pressRelease: { __type: "PressRelease" },
  },
  CreateProInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    name: { __type: "String!" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  CreateProPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pro: { __type: "Pro" },
  },
  CreateProductCardInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateProductCardPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    productCard: { __type: "ProductCard" },
  },
  CreateProductsServiceInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    parentId: { __type: "ID" },
    password: { __type: "String" },
    postFormats: { __type: "ProductsServicePostFormatsInput" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateProductsServicePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    productsService: { __type: "ProductsService" },
  },
  CreateProjectInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
  },
  CreateTagInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    name: { __type: "String!" },
    slug: { __type: "String" },
  },
  CreateTagPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    tag: { __type: "Tag" },
  },
  CreateTeamMemberInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  CreateTeamMemberPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamMember: { __type: "TeamMember" },
  },
  CreateUserInput: {
    aim: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    displayName: { __type: "String" },
    email: { __type: "String" },
    firstName: { __type: "String" },
    jabber: { __type: "String" },
    lastName: { __type: "String" },
    locale: { __type: "String" },
    nicename: { __type: "String" },
    nickname: { __type: "String" },
    password: { __type: "String" },
    registered: { __type: "String" },
    richEditing: { __type: "String" },
    roles: { __type: "[String]" },
    username: { __type: "String!" },
    websiteUrl: { __type: "String" },
    yim: { __type: "String" },
  },
  CreateUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  DatabaseIdentifier: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int!" },
    $on: { __type: "$DatabaseIdentifier!" },
  },
  DateField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    calendarIconType: { __type: "FormFieldCalendarIconTypeEnum" },
    calendarIconUrl: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    dateFormat: { __type: "DateFieldFormatEnum" },
    dateType: { __type: "DateFieldTypeEnum" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[DateInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  DateInput: {
    day: { __type: "Int" },
    month: { __type: "Int" },
    year: { __type: "Int" },
  },
  DateInputProperty: {
    __typename: { __type: "String!" },
    autocompleteAttribute: { __type: "String" },
    customLabel: { __type: "String" },
    defaultValue: { __type: "String" },
    id: { __type: "Float" },
    label: { __type: "String" },
    placeholder: { __type: "String" },
  },
  DateQueryInput: {
    after: { __type: "DateInput" },
    before: { __type: "DateInput" },
    column: { __type: "PostObjectsConnectionDateColumnEnum" },
    compare: { __type: "String" },
    day: { __type: "Int" },
    hour: { __type: "Int" },
    inclusive: { __type: "Boolean" },
    minute: { __type: "Int" },
    month: { __type: "Int" },
    relation: { __type: "RelationEnum" },
    second: { __type: "Int" },
    week: { __type: "Int" },
    year: { __type: "Int" },
  },
  DefaultTemplate: {
    __typename: { __type: "String!" },
    templateName: { __type: "String" },
  },
  DeleteCategoryInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteCategoryPayload: {
    __typename: { __type: "String!" },
    category: { __type: "Category" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
  },
  DeleteCommentInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "Comment" },
    deletedId: { __type: "ID" },
  },
  DeleteGfDraftEntryInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
    idType: { __type: "DraftEntryIdTypeEnum" },
  },
  DeleteGfDraftEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    draftEntry: { __type: "GfDraftEntry" },
  },
  DeleteGfEntryInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteGfEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    entry: { __type: "GfSubmittedEntry" },
  },
  DeleteMediaItemInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteMediaItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    mediaItem: { __type: "MediaItem" },
  },
  DeleteNewEventInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteNewEventPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    newEvent: { __type: "NewEvent" },
  },
  DeleteNewMediaCenterInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteNewMediaCenterPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    newMediaCenter: { __type: "NewMediaCenter" },
  },
  DeleteNewPressCoverageInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteNewPressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    newPressCoverage: { __type: "NewPressCoverage" },
  },
  DeleteNewPressReleaseInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteNewPressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    newPressRelease: { __type: "NewPressRelease" },
  },
  DeletePageInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeletePagePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    page: { __type: "Page" },
  },
  DeletePartnerInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeletePartnerPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    partner: { __type: "Partner" },
  },
  DeletePostFormatInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeletePostFormatPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    postFormat: { __type: "PostFormat" },
  },
  DeletePostInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeletePostPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    post: { __type: "Post" },
  },
  DeletePressCoverageInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeletePressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    pressCoverage: { __type: "PressCoverage" },
  },
  DeletePressReleaseInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeletePressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    pressRelease: { __type: "PressRelease" },
  },
  DeleteProInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteProPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    pro: { __type: "Pro" },
  },
  DeleteProductCardInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteProductCardPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    productCard: { __type: "ProductCard" },
  },
  DeleteProductsServiceInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteProductsServicePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    productsService: { __type: "ProductsService" },
  },
  DeleteProjectInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    project: { __type: "Project" },
  },
  DeleteTagInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  DeleteTagPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    tag: { __type: "Tag" },
  },
  DeleteTeamMemberInput: {
    clientMutationId: { __type: "String" },
    forceDelete: { __type: "Boolean" },
    id: { __type: "ID!" },
  },
  DeleteTeamMemberPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    teamMember: { __type: "TeamMember" },
  },
  DeleteUserInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
    reassignId: { __type: "ID" },
  },
  DeleteUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    deletedId: { __type: "ID" },
    user: { __type: "User" },
  },
  DiscussionSettings: {
    __typename: { __type: "String!" },
    defaultCommentStatus: { __type: "String" },
    defaultPingStatus: { __type: "String" },
  },
  EmailField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasEmailConfirmation: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[EmailInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  EmailFieldInput: {
    confirmationValue: { __type: "String" },
    value: { __type: "String" },
  },
  EmailInputProperty: {
    __typename: { __type: "String!" },
    autocompleteAttribute: { __type: "String" },
    customLabel: { __type: "String" },
    defaultValue: { __type: "String" },
    id: { __type: "Float" },
    label: { __type: "String" },
    name: { __type: "String" },
    placeholder: { __type: "String" },
  },
  EnqueuedAsset: {
    __typename: { __type: "String!" },
    args: { __type: "Boolean" },
    dependencies: { __type: "[EnqueuedScript]" },
    extra: { __type: "String" },
    handle: { __type: "String" },
    id: { __type: "ID!" },
    src: { __type: "String" },
    version: { __type: "String" },
    $on: { __type: "$EnqueuedAsset!" },
  },
  EnqueuedScript: {
    __typename: { __type: "String!" },
    args: { __type: "Boolean" },
    dependencies: { __type: "[EnqueuedScript]" },
    extra: { __type: "String" },
    handle: { __type: "String" },
    id: { __type: "ID!" },
    src: { __type: "String" },
    version: { __type: "String" },
  },
  EnqueuedStylesheet: {
    __typename: { __type: "String!" },
    args: { __type: "Boolean" },
    dependencies: { __type: "[EnqueuedScript]" },
    extra: { __type: "String" },
    handle: { __type: "String" },
    id: { __type: "ID!" },
    src: { __type: "String" },
    version: { __type: "String" },
  },
  EntriesConnectionOrderbyInput: {
    field: { __type: "String" },
    isNumeric: { __type: "Boolean" },
    order: { __type: "OrderEnum" },
  },
  EntriesDateFiltersInput: {
    endDate: { __type: "String" },
    startDate: { __type: "String" },
  },
  EntriesFieldFiltersInput: {
    boolValues: { __type: "[Boolean]" },
    floatValues: { __type: "[Float]" },
    intValues: { __type: "[Int]" },
    key: { __type: "String" },
    operator: { __type: "FieldFiltersOperatorEnum" },
    stringValues: { __type: "[String]" },
  },
  FieldError: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
    message: { __type: "String" },
  },
  FileUploadField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    allowedExtensions: { __type: "[String]" },
    canAcceptMultipleFiles: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxFileSize: { __type: "Int" },
    maxFiles: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  FormButton: {
    __typename: { __type: "String!" },
    conditionalLogic: { __type: "ConditionalLogic" },
    imageUrl: { __type: "String" },
    text: { __type: "String" },
    type: { __type: "FormButtonTypeEnum" },
  },
  FormConfirmation: {
    __typename: { __type: "String!" },
    conditionalLogic: { __type: "ConditionalLogic" },
    id: { __type: "String" },
    isActive: { __type: "Boolean" },
    isDefault: { __type: "Boolean" },
    message: { __type: "String" },
    name: { __type: "String" },
    pageId: { __type: "Int" },
    queryString: { __type: "String" },
    type: { __type: "FormConfirmationTypeEnum" },
    url: { __type: "String" },
  },
  FormDataPolicies: {
    __typename: { __type: "String!" },
    canExportAndErase: { __type: "Boolean" },
    entryData: { __type: "[FormEntryDataPolicy]" },
    identificationFieldDatabaseId: { __type: "Int" },
  },
  FormEntryDataPolicy: {
    __typename: { __type: "String!" },
    key: { __type: "String" },
    shouldErase: { __type: "Boolean" },
    shouldExport: { __type: "Boolean" },
  },
  FormEntryLimits: {
    __typename: { __type: "String!" },
    hasLimit: { __type: "Boolean" },
    limitReachedMessage: { __type: "String" },
    limitationPeriod: { __type: "FormLimitEntriesPeriodEnum" },
    maxEntries: { __type: "Int" },
  },
  FormField: {
    __typename: { __type: "String!" },
    displayOnly: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    type: { __type: "FormFieldTypeEnum" },
    visibility: { __type: "FormFieldVisibilityEnum" },
    $on: { __type: "$FormField!" },
  },
  FormFieldDataPolicy: {
    __typename: { __type: "String!" },
    isIdentificationField: { __type: "Boolean" },
    shouldErase: { __type: "Boolean" },
    shouldExport: { __type: "Boolean" },
  },
  FormFieldValuesInput: {
    addressValues: { __type: "AddressFieldInput" },
    checkboxValues: { __type: "[CheckboxFieldInput]" },
    emailValues: { __type: "EmailFieldInput" },
    fileUploadValues: { __type: "[Upload]" },
    id: { __type: "Int!" },
    imageValues: { __type: "ImageInput" },
    listValues: { __type: "[ListFieldInput]" },
    nameValues: { __type: "NameFieldInput" },
    value: { __type: "String" },
    values: { __type: "[String]" },
  },
  FormLastPageButton: {
    __typename: { __type: "String!" },
    imageUrl: { __type: "String" },
    text: { __type: "String" },
    type: { __type: "FormButtonTypeEnum" },
  },
  FormLogin: {
    __typename: { __type: "String!" },
    isLoginRequired: { __type: "Boolean" },
    loginRequiredMessage: { __type: "String" },
  },
  FormNotification: {
    __typename: { __type: "String!" },
    bcc: { __type: "String" },
    conditionalLogic: { __type: "ConditionalLogic" },
    event: { __type: "String" },
    from: { __type: "String" },
    fromName: { __type: "String" },
    id: { __type: "String" },
    isActive: { __type: "Boolean" },
    isAutoformatted: { __type: "Boolean" },
    message: { __type: "String" },
    name: { __type: "String" },
    replyTo: { __type: "String" },
    routing: { __type: "[FormNotificationRouting]" },
    service: { __type: "String" },
    shouldSendAttachments: { __type: "Boolean" },
    subject: { __type: "String" },
    to: { __type: "String" },
    toType: { __type: "FormNotificationToTypeEnum" },
  },
  FormNotificationRouting: {
    __typename: { __type: "String!" },
    email: { __type: "String" },
    fieldId: { __type: "Int" },
    operator: { __type: "FormRuleOperatorEnum" },
    value: { __type: "String" },
  },
  FormPagination: {
    __typename: { __type: "String!" },
    backgroundColor: { __type: "String" },
    color: { __type: "String" },
    hasProgressbarOnConfirmation: { __type: "Boolean" },
    pageNames: { __type: "[String]" },
    progressbarCompletionText: { __type: "String" },
    style: { __type: "FormPageProgressStyleEnum" },
    type: { __type: "FormPageProgressTypeEnum" },
  },
  FormPersonalData: {
    __typename: { __type: "String!" },
    dataPolicies: { __type: "FormDataPolicies" },
    daysToRetain: { __type: "Int" },
    retentionPolicy: { __type: "FormRetentionPolicyEnum" },
    shouldSaveIP: { __type: "Boolean" },
  },
  FormPostCreation: {
    __typename: { __type: "String!" },
    author: { __type: "User" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    categoryDatabaseId: { __type: "Int" },
    contentTemplate: { __type: "String" },
    format: { __type: "PostFormatTypeEnum" },
    hasContentTemplate: { __type: "Boolean" },
    hasTitleTemplate: { __type: "Boolean" },
    shouldUseCurrentUserAsAuthor: { __type: "Boolean" },
    status: { __type: "String" },
    titleTemplate: { __type: "String" },
  },
  FormSaveAndContinue: {
    __typename: { __type: "String!" },
    buttonText: { __type: "String" },
    hasSaveAndContinue: { __type: "Boolean" },
  },
  FormSchedule: {
    __typename: { __type: "String!" },
    closedMessage: { __type: "String" },
    endDetails: { __type: "FormScheduleDetails" },
    hasSchedule: { __type: "Boolean" },
    pendingMessage: { __type: "String" },
    startDetails: { __type: "FormScheduleDetails" },
  },
  FormScheduleDetails: {
    __typename: { __type: "String!" },
    amPm: { __type: "AmPmEnum" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    hour: { __type: "Int" },
    minute: { __type: "Int" },
  },
  FormsConnectionOrderbyInput: {
    field: { __type: "String" },
    order: { __type: "OrderEnum" },
  },
  GeneralSettings: {
    __typename: { __type: "String!" },
    dateFormat: { __type: "String" },
    description: { __type: "String" },
    email: { __type: "String" },
    language: { __type: "String" },
    startOfWeek: { __type: "Int" },
    timeFormat: { __type: "String" },
    timezone: { __type: "String" },
    title: { __type: "String" },
    url: { __type: "String" },
  },
  GenerateAuthorizationCodeInput: {
    clientMutationId: { __type: "String" },
    email: { __type: "String" },
    password: { __type: "String" },
    username: { __type: "String" },
  },
  GenerateAuthorizationCodePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    code: { __type: "String" },
    error: { __type: "String" },
  },
  GfDraftEntry: {
    __typename: { __type: "String!" },
    createdBy: { __type: "User" },
    createdByDatabaseId: { __type: "Int" },
    createdById: { __type: "ID" },
    dateCreated: { __type: "String" },
    dateCreatedGmt: { __type: "String" },
    dateUpdated: { __type: "String" },
    dateUpdatedGmt: { __type: "String" },
    form: { __type: "GfForm" },
    formDatabaseId: { __type: "Int" },
    formFields: {
      __type: "GfEntryToFormFieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "GfEntryToFormFieldConnectionWhereArgs",
      },
    },
    formId: { __type: "ID" },
    id: { __type: "ID!" },
    ip: { __type: "String" },
    isDraft: { __type: "Boolean" },
    isSubmitted: { __type: "Boolean" },
    resumeToken: { __type: "String" },
    sourceUrl: { __type: "String" },
    userAgent: { __type: "String" },
  },
  GfEntry: {
    __typename: { __type: "String!" },
    createdBy: { __type: "User" },
    createdByDatabaseId: { __type: "Int" },
    createdById: { __type: "ID" },
    dateCreated: { __type: "String" },
    dateCreatedGmt: { __type: "String" },
    dateUpdated: { __type: "String" },
    dateUpdatedGmt: { __type: "String" },
    form: { __type: "GfForm" },
    formDatabaseId: { __type: "Int" },
    formFields: {
      __type: "GfEntryToFormFieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "GfEntryToFormFieldConnectionWhereArgs",
      },
    },
    formId: { __type: "ID" },
    id: { __type: "ID!" },
    ip: { __type: "String" },
    isDraft: { __type: "Boolean" },
    isSubmitted: { __type: "Boolean" },
    sourceUrl: { __type: "String" },
    userAgent: { __type: "String" },
    $on: { __type: "$GfEntry!" },
  },
  GfEntryToFormFieldConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GfEntryToFormFieldConnectionEdge]" },
    nodes: { __type: "[FormField]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  GfEntryToFormFieldConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "FormField" },
  },
  GfEntryToFormFieldConnectionWhereArgs: {
    adminLabels: { __type: "[String]" },
    fieldTypes: { __type: "[FormFieldTypeEnum]" },
    ids: { __type: "[ID]" },
    pageNumber: { __type: "Int" },
  },
  GfForm: {
    __typename: { __type: "String!" },
    button: { __type: "FormButton" },
    confirmations: { __type: "[FormConfirmation]" },
    cssClass: { __type: "String" },
    customRequiredIndicator: { __type: "String" },
    databaseId: { __type: "Int!" },
    dateCreated: { __type: "String" },
    dateCreatedGmt: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormDescriptionPlacementEnum" },
    entries: {
      __type: "GfFormToGfEntryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "GfFormToGfEntryConnectionWhereArgs",
      },
    },
    entryLimits: { __type: "FormEntryLimits" },
    firstPageCssClass: { __type: "String" },
    formFields: {
      __type: "GfFormToFormFieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "GfFormToFormFieldConnectionWhereArgs",
      },
    },
    formId: { __type: "Int" },
    hasConditionalLogicAnimation: { __type: "Boolean" },
    hasHoneypot: { __type: "Boolean" },
    hasValidationSummary: { __type: "Boolean" },
    id: { __type: "ID!" },
    isActive: { __type: "Boolean" },
    isTrash: { __type: "Boolean" },
    labelPlacement: { __type: "FormLabelPlacementEnum" },
    lastPageButton: { __type: "FormLastPageButton" },
    login: { __type: "FormLogin" },
    markupVersion: { __type: "Int" },
    nextFieldId: { __type: "Int" },
    notifications: { __type: "[FormNotification]" },
    pagination: { __type: "FormPagination" },
    personalData: { __type: "FormPersonalData" },
    postCreation: { __type: "FormPostCreation" },
    requiredIndicator: { __type: "FormFieldRequiredIndicatorEnum" },
    saveAndContinue: { __type: "FormSaveAndContinue" },
    scheduling: { __type: "FormSchedule" },
    subLabelPlacement: { __type: "FormSubLabelPlacementEnum" },
    title: { __type: "String" },
    version: { __type: "String" },
  },
  GfFormToFormFieldConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GfFormToFormFieldConnectionEdge]" },
    nodes: { __type: "[FormField]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  GfFormToFormFieldConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "FormField" },
  },
  GfFormToFormFieldConnectionWhereArgs: {
    adminLabels: { __type: "[String]" },
    fieldTypes: { __type: "[FormFieldTypeEnum]" },
    ids: { __type: "[ID]" },
    pageNumber: { __type: "Int" },
  },
  GfFormToGfEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[GfFormToGfEntryConnectionEdge]" },
    nodes: { __type: "[GfEntry]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  GfFormToGfEntryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "GfEntry" },
  },
  GfFormToGfEntryConnectionWhereArgs: {
    dateFilters: { __type: "EntriesDateFiltersInput" },
    fieldFilters: { __type: "[EntriesFieldFiltersInput]" },
    fieldFiltersMode: { __type: "FieldFiltersModeEnum" },
    orderby: { __type: "EntriesConnectionOrderbyInput" },
    status: { __type: "EntryStatusEnum" },
  },
  GfLogger: {
    __typename: { __type: "String!" },
    isEnabled: { __type: "Boolean" },
    name: { __type: "String" },
  },
  GfSettings: {
    __typename: { __type: "String!" },
    currency: { __type: "GfCurrencyEnum" },
    hasBackgroundUpdates: { __type: "Boolean" },
    hasDefaultCss: { __type: "Boolean" },
    hasToolbar: { __type: "Boolean" },
    isHtml5Enabled: { __type: "Boolean" },
    isNoConflictModeEnabled: { __type: "Boolean" },
    logging: { __type: "GfSettingsLogging" },
  },
  GfSettingsLogging: {
    __typename: { __type: "String!" },
    isLoggingEnabled: { __type: "Boolean" },
    loggers: { __type: "[GfLogger]" },
  },
  GfSubmittedEntry: {
    __typename: { __type: "String!" },
    createdBy: { __type: "User" },
    createdByDatabaseId: { __type: "Int" },
    createdById: { __type: "ID" },
    databaseId: { __type: "Int!" },
    dateCreated: { __type: "String" },
    dateCreatedGmt: { __type: "String" },
    dateUpdated: { __type: "String" },
    dateUpdatedGmt: { __type: "String" },
    entryId: { __type: "Int" },
    form: { __type: "GfForm" },
    formDatabaseId: { __type: "Int" },
    formFields: {
      __type: "GfEntryToFormFieldConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "GfEntryToFormFieldConnectionWhereArgs",
      },
    },
    formId: { __type: "ID" },
    id: { __type: "ID!" },
    ip: { __type: "String" },
    isDraft: { __type: "Boolean" },
    isRead: { __type: "Boolean" },
    isStarred: { __type: "Boolean" },
    isSubmitted: { __type: "Boolean" },
    post: { __type: "Post" },
    postDatabaseId: { __type: "Int" },
    sourceUrl: { __type: "String" },
    status: { __type: "EntryStatusEnum" },
    userAgent: { __type: "String" },
  },
  HCMSFooter: {
    __typename: { __type: "String!" },
    copyrightText: { __type: "String" },
    sidebarOne: { __type: "String" },
    sidebarTwo: { __type: "String" },
    socialLinks: { __type: "[HCMSSocialLinks]" },
  },
  HCMSHeader: {
    __typename: { __type: "String!" },
    favicon: { __type: "String" },
    siteLogoUrl: { __type: "String" },
    siteTagLine: { __type: "String" },
    siteTitle: { __type: "String" },
  },
  HCMSSocialLinks: {
    __typename: { __type: "String!" },
    iconName: { __type: "String" },
    iconUrl: { __type: "String" },
  },
  HiddenField: {
    __typename: { __type: "String!" },
    canPrepopulate: { __type: "Boolean" },
    defaultValue: { __type: "String" },
    displayOnly: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    label: { __type: "String" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  HierarchicalContentNode: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "HierarchicalContentNodeToContentNodeAncestorsConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs",
      },
    },
    children: {
      __type: "HierarchicalContentNodeToContentNodeChildrenConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs",
      },
    },
    parent: {
      __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge",
    },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    $on: { __type: "$HierarchicalContentNode!" },
  },
  HierarchicalContentNodeToContentNodeAncestorsConnection: {
    __typename: { __type: "String!" },
    edges: {
      __type: "[HierarchicalContentNodeToContentNodeAncestorsConnectionEdge]",
    },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  HierarchicalContentNodeToContentNodeAncestorsConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  HierarchicalContentNodeToContentNodeChildrenConnection: {
    __typename: { __type: "String!" },
    edges: {
      __type: "[HierarchicalContentNodeToContentNodeChildrenConnectionEdge]",
    },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  HierarchicalContentNodeToContentNodeChildrenConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  HierarchicalContentNodeToParentContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ContentNode" },
  },
  HierarchicalTermNode: {
    __typename: { __type: "String!" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    $on: { __type: "$HierarchicalTermNode!" },
  },
  HtmlField: {
    __typename: { __type: "String!" },
    conditionalLogic: { __type: "ConditionalLogic" },
    content: { __type: "String" },
    cssClass: { __type: "String" },
    displayOnly: { __type: "Boolean" },
    hasMargins: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    label: { __type: "String" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    type: { __type: "FormFieldTypeEnum" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  ImageFieldValue: {
    __typename: { __type: "String!" },
    altText: { __type: "String" },
    caption: { __type: "String" },
    description: { __type: "String" },
    title: { __type: "String" },
    url: { __type: "String" },
  },
  ImageInput: {
    altText: { __type: "String" },
    caption: { __type: "String" },
    description: { __type: "String" },
    image: { __type: "Upload!" },
    title: { __type: "String" },
  },
  ListField: {
    __typename: { __type: "String!" },
    addIconUrl: { __type: "String" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[ListFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    deleteIconUrl: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasColumns: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    listValues: { __type: "[ListFieldValue]" },
    maxRows: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  ListFieldChoice: {
    __typename: { __type: "String!" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  ListFieldInput: { rowValues: { __type: "[String]" } },
  ListFieldValue: {
    __typename: { __type: "String!" },
    values: { __type: "[String]" },
  },
  MediaDetails: {
    __typename: { __type: "String!" },
    file: { __type: "String" },
    height: { __type: "Int" },
    meta: { __type: "MediaItemMeta" },
    sizes: { __type: "[MediaSize]" },
    width: { __type: "Int" },
  },
  MediaItem: {
    __typename: { __type: "String!" },
    altText: { __type: "String" },
    ancestors: {
      __type: "HierarchicalContentNodeToContentNodeAncestorsConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs",
      },
    },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    caption: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    children: {
      __type: "HierarchicalContentNodeToContentNodeChildrenConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs",
      },
    },
    commentCount: { __type: "Int" },
    commentStatus: { __type: "String" },
    comments: {
      __type: "MediaItemToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "MediaItemToCommentConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    description: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    fileSize: { __type: "Int", __args: { size: "MediaItemSizeEnum" } },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    mediaDetails: { __type: "MediaDetails" },
    mediaItemId: { __type: "Int!" },
    mediaItemUrl: { __type: "String" },
    mediaType: { __type: "String" },
    mimeType: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    parent: {
      __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge",
    },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    sizes: { __type: "String", __args: { size: "MediaItemSizeEnum" } },
    slug: { __type: "String" },
    sourceUrl: { __type: "String", __args: { size: "MediaItemSizeEnum" } },
    srcSet: { __type: "String", __args: { size: "MediaItemSizeEnum" } },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  MediaItemMeta: {
    __typename: { __type: "String!" },
    aperture: { __type: "Float" },
    camera: { __type: "String" },
    caption: { __type: "String" },
    copyright: { __type: "String" },
    createdTimestamp: { __type: "Int" },
    credit: { __type: "String" },
    focalLength: { __type: "Float" },
    iso: { __type: "Int" },
    keywords: { __type: "[String]" },
    orientation: { __type: "String" },
    shutterSpeed: { __type: "Float" },
    title: { __type: "String" },
  },
  MediaItemToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MediaItemToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  MediaItemToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  MediaItemToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  MediaSize: {
    __typename: { __type: "String!" },
    file: { __type: "String" },
    fileSize: { __type: "Int" },
    height: { __type: "String" },
    mimeType: { __type: "String" },
    name: { __type: "String" },
    sourceUrl: { __type: "String" },
    width: { __type: "String" },
  },
  Menu: {
    __typename: { __type: "String!" },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    locations: { __type: "[MenuLocationEnum]" },
    menuId: { __type: "Int" },
    menuItems: {
      __type: "MenuToMenuItemConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "MenuToMenuItemConnectionWhereArgs",
      },
    },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  MenuItem: {
    __typename: { __type: "String!" },
    childItems: {
      __type: "MenuItemToMenuItemConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "MenuItemToMenuItemConnectionWhereArgs",
      },
    },
    connectedNode: { __type: "MenuItemToMenuItemLinkableConnectionEdge" },
    connectedObject: { __type: "MenuItemObjectUnion" },
    cssClasses: { __type: "[String]" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    label: { __type: "String" },
    linkRelationship: { __type: "String" },
    locations: { __type: "[MenuLocationEnum]" },
    menu: { __type: "MenuItemToMenuConnectionEdge" },
    menuItemId: { __type: "Int" },
    order: { __type: "Int" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    path: { __type: "String" },
    target: { __type: "String" },
    title: { __type: "String" },
    url: { __type: "String" },
  },
  MenuItemLinkable: {
    __typename: { __type: "String!" },
    databaseId: { __type: "Int!" },
    id: { __type: "ID!" },
    uri: { __type: "String" },
    $on: { __type: "$MenuItemLinkable!" },
  },
  MenuItemObjectUnion: {
    __typename: { __type: "String!" },
    $on: { __type: "$MenuItemObjectUnion!" },
  },
  MenuItemToMenuConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Menu" },
  },
  MenuItemToMenuItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MenuItemToMenuItemConnectionEdge]" },
    nodes: { __type: "[MenuItem]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  MenuItemToMenuItemConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "MenuItem" },
  },
  MenuItemToMenuItemConnectionWhereArgs: {
    id: { __type: "Int" },
    location: { __type: "MenuLocationEnum" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
  },
  MenuItemToMenuItemLinkableConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "MenuItemLinkable" },
  },
  MenuToMenuItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[MenuToMenuItemConnectionEdge]" },
    nodes: { __type: "[MenuItem]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  MenuToMenuItemConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "MenuItem" },
  },
  MenuToMenuItemConnectionWhereArgs: {
    id: { __type: "Int" },
    location: { __type: "MenuLocationEnum" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
  },
  MultiSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[MultiSelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  MultiSelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  NameField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[NameInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    nameValues: { __type: "NameFieldValue" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  NameFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  NameFieldInput: {
    first: { __type: "String" },
    last: { __type: "String" },
    middle: { __type: "String" },
    prefix: { __type: "String" },
    suffix: { __type: "String" },
  },
  NameFieldValue: {
    __typename: { __type: "String!" },
    first: { __type: "String" },
    last: { __type: "String" },
    middle: { __type: "String" },
    prefix: { __type: "String" },
    suffix: { __type: "String" },
  },
  NameInputProperty: {
    __typename: { __type: "String!" },
    autocompleteAttribute: { __type: "String" },
    choices: { __type: "[NameFieldChoice]" },
    customLabel: { __type: "String" },
    defaultValue: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    id: { __type: "Float" },
    isHidden: { __type: "Boolean" },
    key: { __type: "String" },
    label: { __type: "String" },
    name: { __type: "String" },
    placeholder: { __type: "String" },
  },
  NewEvent: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    newEventId: { __type: "Int!" },
    newMediaCenters: {
      __type: "NewEventToNewMediaCenterConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewEventToNewMediaCenterConnectionWhereArgs",
      },
    },
    preview: { __type: "NewEventToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "NewEventToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewEventToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  NewEventNewMediaCentersInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[NewEventNewMediaCentersNodeInput]" },
  },
  NewEventNewMediaCentersNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  NewEventToNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewEventToNewMediaCenterConnectionEdge]" },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewEventToNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  NewEventToNewMediaCenterConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewEventToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "NewEvent" },
  },
  NewEventToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewEventToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewEventToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  NewEventToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewMediaCenter: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "NewMediaCenterToAncestorsNewMediaCenterConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    children: {
      __type: "NewMediaCenterToNewMediaCenterConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewMediaCenterToNewMediaCenterConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    contentNodes: {
      __type: "NewMediaCenterToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewMediaCenterToContentNodeConnectionWhereArgs",
      },
    },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    newEvents: {
      __type: "NewMediaCenterToNewEventConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewMediaCenterToNewEventConnectionWhereArgs",
      },
    },
    newMediaCenterId: { __type: "Int" },
    newPressCoverages: {
      __type: "NewMediaCenterToNewPressCoverageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewMediaCenterToNewPressCoverageConnectionWhereArgs",
      },
    },
    newPressReleases: {
      __type: "NewMediaCenterToNewPressReleaseConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewMediaCenterToNewPressReleaseConnectionWhereArgs",
      },
    },
    parent: { __type: "NewMediaCenterToParentNewMediaCenterConnectionEdge" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
    taxonomy: { __type: "NewMediaCenterToTaxonomyConnectionEdge" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
  },
  NewMediaCenterToAncestorsNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: {
      __type: "[NewMediaCenterToAncestorsNewMediaCenterConnectionEdge]",
    },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToAncestorsNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  NewMediaCenterToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewMediaCenterToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  NewMediaCenterToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypesOfNewMediaCenterEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  NewMediaCenterToNewEventConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewMediaCenterToNewEventConnectionEdge]" },
    nodes: { __type: "[NewEvent]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToNewEventConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewEvent" },
  },
  NewMediaCenterToNewEventConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  NewMediaCenterToNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewMediaCenterToNewMediaCenterConnectionEdge]" },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  NewMediaCenterToNewMediaCenterConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewMediaCenterToNewPressCoverageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewMediaCenterToNewPressCoverageConnectionEdge]" },
    nodes: { __type: "[NewPressCoverage]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToNewPressCoverageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressCoverage" },
  },
  NewMediaCenterToNewPressCoverageConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  NewMediaCenterToNewPressReleaseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewMediaCenterToNewPressReleaseConnectionEdge]" },
    nodes: { __type: "[NewPressRelease]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewMediaCenterToNewPressReleaseConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressRelease" },
  },
  NewMediaCenterToNewPressReleaseConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  NewMediaCenterToParentNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "NewMediaCenter" },
  },
  NewMediaCenterToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Taxonomy" },
  },
  NewPressCoverage: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    imageAndLink: { __type: "String" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    newMediaCenters: {
      __type: "NewPressCoverageToNewMediaCenterConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewPressCoverageToNewMediaCenterConnectionWhereArgs",
      },
    },
    newPressCoverageId: { __type: "Int!" },
    pressImage: { __type: "MediaItem" },
    pressTitle: { __type: "String" },
    preview: { __type: "NewPressCoverageToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "NewPressCoverageToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewPressCoverageToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  NewPressCoverageNewMediaCentersInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[NewPressCoverageNewMediaCentersNodeInput]" },
  },
  NewPressCoverageNewMediaCentersNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  NewPressCoverageToNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewPressCoverageToNewMediaCenterConnectionEdge]" },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewPressCoverageToNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  NewPressCoverageToNewMediaCenterConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewPressCoverageToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "NewPressCoverage" },
  },
  NewPressCoverageToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewPressCoverageToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewPressCoverageToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  NewPressCoverageToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewPressRelease: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    newMediaCenters: {
      __type: "NewPressReleaseToNewMediaCenterConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewPressReleaseToNewMediaCenterConnectionWhereArgs",
      },
    },
    newPressReleaseId: { __type: "Int!" },
    pressreleaseText: { __type: "String" },
    pressreleaseTitle: { __type: "String" },
    preview: { __type: "NewPressReleaseToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "NewPressReleaseToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "NewPressReleaseToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  NewPressReleaseNewMediaCentersInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[NewPressReleaseNewMediaCentersNodeInput]" },
  },
  NewPressReleaseNewMediaCentersNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  NewPressReleaseToNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewPressReleaseToNewMediaCenterConnectionEdge]" },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewPressReleaseToNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  NewPressReleaseToNewMediaCenterConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  NewPressReleaseToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "NewPressRelease" },
  },
  NewPressReleaseToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[NewPressReleaseToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  NewPressReleaseToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  NewPressReleaseToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  Node: {
    __typename: { __type: "String!" },
    id: { __type: "ID!" },
    $on: { __type: "$Node!" },
  },
  NodeWithAuthor: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    $on: { __type: "$NodeWithAuthor!" },
  },
  NodeWithAuthorToUserConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "User" },
  },
  NodeWithComments: {
    __typename: { __type: "String!" },
    commentCount: { __type: "Int" },
    commentStatus: { __type: "String" },
    $on: { __type: "$NodeWithComments!" },
  },
  NodeWithContentEditor: {
    __typename: { __type: "String!" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    $on: { __type: "$NodeWithContentEditor!" },
  },
  NodeWithExcerpt: {
    __typename: { __type: "String!" },
    excerpt: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    $on: { __type: "$NodeWithExcerpt!" },
  },
  NodeWithFeaturedImage: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    uri: { __type: "String" },
    $on: { __type: "$NodeWithFeaturedImage!" },
  },
  NodeWithFeaturedImageToMediaItemConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "MediaItem" },
  },
  NodeWithForm: {
    __typename: { __type: "String!" },
    form: { __type: "GfForm" },
    formDatabaseId: { __type: "Int" },
    formId: { __type: "ID" },
    $on: { __type: "$NodeWithForm!" },
  },
  NodeWithPageAttributes: {
    __typename: { __type: "String!" },
    menuOrder: { __type: "Int" },
    $on: { __type: "$NodeWithPageAttributes!" },
  },
  NodeWithRevisions: {
    __typename: { __type: "String!" },
    isRevision: { __type: "Boolean" },
    revisionOf: { __type: "NodeWithRevisionsToContentNodeConnectionEdge" },
    $on: { __type: "$NodeWithRevisions!" },
  },
  NodeWithRevisionsToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ContentNode" },
  },
  NodeWithTemplate: {
    __typename: { __type: "String!" },
    template: { __type: "ContentTemplate" },
    $on: { __type: "$NodeWithTemplate!" },
  },
  NodeWithTitle: {
    __typename: { __type: "String!" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    $on: { __type: "$NodeWithTitle!" },
  },
  NodeWithTrackbacks: {
    __typename: { __type: "String!" },
    pingStatus: { __type: "String" },
    pinged: { __type: "[String]" },
    toPing: { __type: "[String]" },
    $on: { __type: "$NodeWithTrackbacks!" },
  },
  NumberField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    calculationFormula: { __type: "String" },
    calculationRounding: { __type: "Int" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isCalculation: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    numberFormat: { __type: "NumberFieldFormatEnum" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    rangeMax: { __type: "Float" },
    rangeMin: { __type: "Float" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  Page: {
    __typename: { __type: "String!" },
    ThreeColumnStaticPage: { __type: "Page_Threecolumnstaticpage" },
    ancestors: {
      __type: "HierarchicalContentNodeToContentNodeAncestorsConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs",
      },
    },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    bodyClasses: { __type: "String" },
    children: {
      __type: "HierarchicalContentNodeToContentNodeChildrenConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs",
      },
    },
    commentCount: { __type: "Int" },
    commentStatus: { __type: "String" },
    comments: {
      __type: "PageToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PageToCommentConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isFrontPage: { __type: "Boolean!" },
    isPostsPage: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isPrivacyPage: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isRevision: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    menuOrder: { __type: "Int" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    pageId: { __type: "Int!" },
    parent: {
      __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge",
    },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    preview: { __type: "PageToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    revisionOf: { __type: "NodeWithRevisionsToContentNodeConnectionEdge" },
    revisions: {
      __type: "PageToRevisionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PageToRevisionConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    standardPage: { __type: "Page_Standardpage" },
    status: { __type: "String" },
    successStoriesACF: { __type: "Page_Successstoriesacf" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  PageField: {
    __typename: { __type: "String!" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    displayOnly: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    nextButton: { __type: "FormButton" },
    pageNumber: { __type: "Int" },
    previousButton: { __type: "FormButton" },
    type: { __type: "FormFieldTypeEnum" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PageToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PageToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PageToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  PageToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  PageToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Page" },
  },
  PageToRevisionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PageToRevisionConnectionEdge]" },
    nodes: { __type: "[Page]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PageToRevisionConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Page" },
  },
  PageToRevisionConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  Page_Standardpage: {
    __typename: { __type: "String!" },
    buttonLink: { __type: "AcfLink" },
    fieldGroupName: { __type: "String" },
    heroBanner: { __type: "MediaItem" },
    heroButton: { __type: "String" },
    heroDescription: { __type: "String" },
    heroTitle: { __type: "String" },
  },
  Page_Successstoriesacf: {
    __typename: { __type: "String!" },
    carouselSlider: { __type: "[Page_Successstoriesacf_carouselSlider]" },
    fieldGroupName: { __type: "String" },
    footerContent: { __type: "String" },
    pageLargeSlider: { __type: "[Page_Successstoriesacf_pageLargeSlider]" },
    suggestedResources: {
      __type: "[Page_Successstoriesacf_suggestedResources]",
    },
  },
  Page_Successstoriesacf_carouselSlider: {
    __typename: { __type: "String!" },
    carouselContent: { __type: "String" },
    carouselImage: { __type: "MediaItem" },
    fieldGroupName: { __type: "String" },
  },
  Page_Successstoriesacf_pageLargeSlider: {
    __typename: { __type: "String!" },
    fieldGroupName: { __type: "String" },
    sliderContent: { __type: "String" },
    sliderImage: { __type: "MediaItem" },
  },
  Page_Successstoriesacf_suggestedResources: {
    __typename: { __type: "String!" },
    fieldGroupName: { __type: "String" },
    link: { __type: "String" },
    resourceContent: { __type: "String" },
    svgIcon: { __type: "MediaItem" },
  },
  Page_Threecolumnstaticpage: {
    __typename: { __type: "String!" },
    banner: { __type: "Page_Threecolumnstaticpage_Banner" },
    cards: { __type: "[Page_Threecolumnstaticpage_cards]" },
    fieldGroupName: { __type: "String" },
    financeSolution: { __type: "String" },
  },
  Page_Threecolumnstaticpage_Banner: {
    __typename: { __type: "String!" },
    bannerButton: { __type: "String" },
    bannerDescription: { __type: "String" },
    bannerImage: { __type: "MediaItem" },
    bannerTitle: { __type: "String" },
    fieldGroupName: { __type: "String" },
    mobileBannerImage: { __type: "MediaItem" },
  },
  Page_Threecolumnstaticpage_cards: {
    __typename: { __type: "String!" },
    buttonLink: { __type: "String" },
    cardButton: { __type: "String" },
    cardContent: { __type: "String" },
    cardTitle: { __type: "String" },
    fieldGroupName: { __type: "String" },
    svgIcon: { __type: "MediaItem" },
  },
  Partner: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    heroBanner: { __type: "MediaItem" },
    heroButton: { __type: "String" },
    heroSubtitle: { __type: "String" },
    heroTitle: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    partnerId: { __type: "Int!" },
    partnerTitle: { __type: "String" },
    preview: { __type: "PartnerToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  PartnerToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Partner" },
  },
  PasswordField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasPasswordStrengthIndicator: { __type: "Boolean" },
    hasPasswordVisibilityToggle: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PasswordInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    minPasswordStrength: { __type: "PasswordFieldMinStrengthEnum" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    size: { __type: "FormFieldSizeEnum" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PasswordInputProperty: {
    __typename: { __type: "String!" },
    customLabel: { __type: "String" },
    id: { __type: "Float" },
    isHidden: { __type: "Boolean" },
    label: { __type: "String" },
    placeholder: { __type: "String" },
  },
  PhoneField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    phoneFormat: { __type: "PhoneFieldFormatEnum" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  Plugin: {
    __typename: { __type: "String!" },
    author: { __type: "String" },
    authorUri: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    name: { __type: "String" },
    path: { __type: "String" },
    pluginUri: { __type: "String" },
    version: { __type: "String" },
  },
  Post: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    bodyClasses: { __type: "String" },
    categories: {
      __type: "PostToCategoryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToCategoryConnectionWhereArgs",
      },
    },
    coAuthors: { __type: "String" },
    commentCount: { __type: "Int" },
    commentStatus: { __type: "String" },
    comments: {
      __type: "PostToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToCommentConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    excerpt: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isRevision: { __type: "Boolean" },
    isSticky: { __type: "Boolean!" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    pingStatus: { __type: "String" },
    pinged: { __type: "[String]" },
    postFormats: {
      __type: "PostToPostFormatConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToPostFormatConnectionWhereArgs",
      },
    },
    postId: { __type: "Int!" },
    preview: { __type: "PostToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    revisionOf: { __type: "NodeWithRevisionsToContentNodeConnectionEdge" },
    revisions: {
      __type: "PostToRevisionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToRevisionConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    status: { __type: "String" },
    tags: {
      __type: "PostToTagConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToTagConnectionWhereArgs",
      },
    },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "PostToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    toPing: { __type: "[String]" },
    uri: { __type: "String" },
  },
  PostCategoriesInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[PostCategoriesNodeInput]" },
  },
  PostCategoriesNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  PostCategoryCheckboxField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    checkboxValues: { __type: "[CheckboxFieldValue]" },
    choices: { __type: "[PostCategoryFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    dropdownPlaceholder: { __type: "String" },
    errorMessage: { __type: "String" },
    hasAllCategories: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasSelectAll: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostCategoryInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCategoryField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCategoryFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    dropdownPlaceholder: { __type: "String" },
    errorMessage: { __type: "String" },
    hasAllCategories: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
    $on: { __type: "$PostCategoryField!" },
  },
  PostCategoryFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCategoryInputProperty: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
    label: { __type: "String" },
    name: { __type: "String" },
  },
  PostCategoryMultiSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCategoryFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    dropdownPlaceholder: { __type: "String" },
    errorMessage: { __type: "String" },
    hasAllCategories: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCategoryRadioField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCategoryFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    dropdownPlaceholder: { __type: "String" },
    errorMessage: { __type: "String" },
    hasAllCategories: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasOtherChoice: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCategorySelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCategoryFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    dropdownPlaceholder: { __type: "String" },
    errorMessage: { __type: "String" },
    hasAllCategories: { __type: "Boolean" },
    hasAutocomplete: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostContentField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasRichTextEditor: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomCheckboxField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    checkboxValues: { __type: "[CheckboxFieldValue]" },
    choices: { __type: "[PostCustomCheckboxFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasSelectAll: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostCustomInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomCheckboxFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCustomDateField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    calendarIconType: { __type: "FormFieldCalendarIconTypeEnum" },
    calendarIconUrl: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    dateFormat: { __type: "DateFieldFormatEnum" },
    dateType: { __type: "DateFieldTypeEnum" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostCustomInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomEmailField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasEmailConfirmation: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostCustomInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
    $on: { __type: "$PostCustomField!" },
  },
  PostCustomFileuploadField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    allowedExtensions: { __type: "[String]" },
    canAcceptMultipleFiles: { __type: "Boolean" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxFileSize: { __type: "Int" },
    maxFiles: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomHiddenField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomInputProperty: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
    label: { __type: "String" },
    name: { __type: "String" },
  },
  PostCustomListField: {
    __typename: { __type: "String!" },
    addIconUrl: { __type: "String" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCustomListFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    deleteIconUrl: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasColumns: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    listValues: { __type: "[ListFieldValue]" },
    maxRows: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomListFieldChoice: {
    __typename: { __type: "String!" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCustomMultiSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCustomMultiSelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomMultiSelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCustomNumberField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    calculationFormula: { __type: "String" },
    calculationRounding: { __type: "Int" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isCalculation: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    numberFormat: { __type: "NumberFieldFormatEnum" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    rangeMax: { __type: "Float" },
    rangeMin: { __type: "Float" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomPhoneField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    phoneFormat: { __type: "PhoneFieldFormatEnum" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomRadioField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCustomRadioFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasOtherChoice: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomRadioFieldChoice: {
    __typename: { __type: "String!" },
    isOtherChoice: { __type: "Boolean" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCustomSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostCustomSelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomSelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostCustomTextAreaField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasRichTextEditor: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomTextField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasInputMask: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputMaskValue: { __type: "String" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isPasswordInput: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomTimeField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostCustomInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    timeFormat: { __type: "TimeFieldFormatEnum" },
    timeValues: { __type: "TimeFieldValue" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostCustomWebsiteField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    postMetaFieldName: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostExcerptField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostFormat: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    contentNodes: {
      __type: "PostFormatToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostFormatToContentNodeConnectionWhereArgs",
      },
    },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    postFormatId: { __type: "Int" },
    posts: {
      __type: "PostFormatToPostConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostFormatToPostConnectionWhereArgs",
      },
    },
    productsServices: {
      __type: "PostFormatToProductsServiceConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PostFormatToProductsServiceConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    taxonomy: { __type: "PostFormatToTaxonomyConnectionEdge" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
  },
  PostFormatToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostFormatToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostFormatToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  PostFormatToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypesOfPostFormatEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  PostFormatToPostConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostFormatToPostConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostFormatToPostConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  PostFormatToPostConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  PostFormatToProductsServiceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostFormatToProductsServiceConnectionEdge]" },
    nodes: { __type: "[ProductsService]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostFormatToProductsServiceConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ProductsService" },
  },
  PostFormatToProductsServiceConnectionWhereArgs: {
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  PostFormatToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Taxonomy" },
  },
  PostImageField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    allowedExtensions: { __type: "[String]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAlt: { __type: "Boolean" },
    hasCaption: { __type: "Boolean" },
    hasDescription: { __type: "Boolean" },
    hasTitle: { __type: "Boolean" },
    id: { __type: "Int!" },
    imageValues: { __type: "ImageFieldValue" },
    inputType: { __type: "FormFieldTypeEnum" },
    isFeaturedImage: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostObjectsConnectionOrderbyInput: {
    field: { __type: "PostObjectsConnectionOrderbyEnum!" },
    order: { __type: "OrderEnum!" },
  },
  PostPostFormatsInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[PostPostFormatsNodeInput]" },
  },
  PostPostFormatsNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  PostTagsCheckboxField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    checkboxValues: { __type: "[CheckboxFieldValue]" },
    choices: { __type: "[PostTagsCheckboxFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasSelectAll: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[PostTagsInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostTagsCheckboxFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostTagsField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
    $on: { __type: "$PostTagsField!" },
  },
  PostTagsInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[PostTagsNodeInput]" },
  },
  PostTagsInputProperty: {
    __typename: { __type: "String!" },
    id: { __type: "Float" },
    label: { __type: "String" },
    name: { __type: "String" },
  },
  PostTagsMultiSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostTagsMultiSelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    values: { __type: "[String]" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostTagsMultiSelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostTagsNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  PostTagsRadioField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostTagsRadioFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasOtherChoice: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostTagsRadioFieldChoice: {
    __typename: { __type: "String!" },
    isOtherChoice: { __type: "Boolean" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostTagsSelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[PostTagsSelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostTagsSelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  PostTagsTextField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasInputMask: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputMaskValue: { __type: "String" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isPasswordInput: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostTitleField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  PostToCategoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToCategoryConnectionEdge]" },
    nodes: { __type: "[Category]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToCategoryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Category" },
  },
  PostToCategoryConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  PostToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  PostToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  PostToPostFormatConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToPostFormatConnectionEdge]" },
    nodes: { __type: "[PostFormat]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToPostFormatConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "PostFormat" },
  },
  PostToPostFormatConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  PostToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Post" },
  },
  PostToRevisionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToRevisionConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToRevisionConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  PostToRevisionConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  PostToTagConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToTagConnectionEdge]" },
    nodes: { __type: "[Tag]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToTagConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Tag" },
  },
  PostToTagConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  PostToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PostToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PostToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  PostToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  PostTypeLabelDetails: {
    __typename: { __type: "String!" },
    addNew: { __type: "String" },
    addNewItem: { __type: "String" },
    allItems: { __type: "String" },
    archives: { __type: "String" },
    attributes: { __type: "String" },
    editItem: { __type: "String" },
    featuredImage: { __type: "String" },
    filterItemsList: { __type: "String" },
    insertIntoItem: { __type: "String" },
    itemsList: { __type: "String" },
    itemsListNavigation: { __type: "String" },
    menuName: { __type: "String" },
    name: { __type: "String" },
    newItem: { __type: "String" },
    notFound: { __type: "String" },
    notFoundInTrash: { __type: "String" },
    parentItemColon: { __type: "String" },
    removeFeaturedImage: { __type: "String" },
    searchItems: { __type: "String" },
    setFeaturedImage: { __type: "String" },
    singularName: { __type: "String" },
    uploadedToThisItem: { __type: "String" },
    useFeaturedImage: { __type: "String" },
    viewItem: { __type: "String" },
    viewItems: { __type: "String" },
  },
  PressCoverage: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    pressCoverageId: { __type: "Int!" },
    preview: { __type: "PressCoverageToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "PressCoverageToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PressCoverageToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  PressCoverageToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "PressCoverage" },
  },
  PressCoverageToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PressCoverageToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PressCoverageToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  PressCoverageToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  PressRelease: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    pressReleaseId: { __type: "Int!" },
    preview: { __type: "PressReleaseToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "PressReleaseToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "PressReleaseToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  PressReleaseToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "PressRelease" },
  },
  PressReleaseToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[PressReleaseToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  PressReleaseToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  PressReleaseToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  Pro: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "ProToAncestorsProConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    children: {
      __type: "ProToProConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "ProToProConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    parent: { __type: "ProToParentProConnectionEdge" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    proId: { __type: "Int" },
    slug: { __type: "String" },
    taxonomy: { __type: "ProToTaxonomyConnectionEdge" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
  },
  ProToAncestorsProConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProToAncestorsProConnectionEdge]" },
    nodes: { __type: "[Pro]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ProToAncestorsProConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Pro" },
  },
  ProToParentProConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Pro" },
  },
  ProToProConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProToProConnectionEdge]" },
    nodes: { __type: "[Pro]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ProToProConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Pro" },
  },
  ProToProConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  ProToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Taxonomy" },
  },
  ProductCard: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    preview: { __type: "ProductCardToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    productCardButton: { __type: "String" },
    productCardDescription: { __type: "String" },
    productCardIcon: { __type: "MediaItem" },
    productCardId: { __type: "Int!" },
    productCardTitle: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  ProductCardToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ProductCard" },
  },
  ProductsService: {
    __typename: { __type: "String!" },
    ancestors: {
      __type: "HierarchicalContentNodeToContentNodeAncestorsConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs",
      },
    },
    children: {
      __type: "HierarchicalContentNodeToContentNodeChildrenConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where:
          "HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    content: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isRevision: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    menuOrder: { __type: "Int" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    parent: {
      __type: "HierarchicalContentNodeToParentContentNodeConnectionEdge",
    },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
    postFormats: {
      __type: "ProductsServiceToPostFormatConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "ProductsServiceToPostFormatConnectionWhereArgs",
      },
    },
    preview: { __type: "ProductsServiceToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    productsServiceId: { __type: "Int!" },
    revisionOf: { __type: "NodeWithRevisionsToContentNodeConnectionEdge" },
    revisions: {
      __type: "ProductsServiceToRevisionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "ProductsServiceToRevisionConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    standardPage: { __type: "ProductsService_Standardpage" },
    status: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    terms: {
      __type: "ProductsServiceToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "ProductsServiceToTermNodeConnectionWhereArgs",
      },
    },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  ProductsServicePostFormatsInput: {
    append: { __type: "Boolean" },
    nodes: { __type: "[ProductsServicePostFormatsNodeInput]" },
  },
  ProductsServicePostFormatsNodeInput: {
    description: { __type: "String" },
    id: { __type: "ID" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  ProductsServiceToPostFormatConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProductsServiceToPostFormatConnectionEdge]" },
    nodes: { __type: "[PostFormat]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ProductsServiceToPostFormatConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "PostFormat" },
  },
  ProductsServiceToPostFormatConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  ProductsServiceToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "ProductsService" },
  },
  ProductsServiceToRevisionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProductsServiceToRevisionConnectionEdge]" },
    nodes: { __type: "[ProductsService]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ProductsServiceToRevisionConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ProductsService" },
  },
  ProductsServiceToRevisionConnectionWhereArgs: {
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  ProductsServiceToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[ProductsServiceToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  ProductsServiceToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  ProductsServiceToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  ProductsService_Standardpage: {
    __typename: { __type: "String!" },
    buttonLink: { __type: "AcfLink" },
    fieldGroupName: { __type: "String" },
    heroBanner: { __type: "MediaItem" },
    heroButton: { __type: "String" },
    heroDescription: { __type: "String" },
    heroTitle: { __type: "String" },
  },
  Project: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    conditionalTags: { __type: "ConditionalTags" },
    contactName: { __type: "String" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    cost: { __type: "Float" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    dateOfService: { __type: "String" },
    descriptionOfWork: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    preview: { __type: "ProjectToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    projectId: { __type: "Int!" },
    propertyPhoto: { __type: "MediaItem" },
    slug: { __type: "String" },
    status: { __type: "String" },
    streetAddress: { __type: "String" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
    workOrderNumber: { __type: "String" },
  },
  ProjectToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Project" },
  },
  RadioField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[RadioFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasChoiceValue: { __type: "Boolean" },
    hasOtherChoice: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  RadioFieldChoice: {
    __typename: { __type: "String!" },
    isOtherChoice: { __type: "Boolean" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  ReadingSettings: {
    __typename: { __type: "String!" },
    postsPerPage: { __type: "Int" },
  },
  RegisterUserInput: {
    aim: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    displayName: { __type: "String" },
    email: { __type: "String" },
    firstName: { __type: "String" },
    jabber: { __type: "String" },
    lastName: { __type: "String" },
    locale: { __type: "String" },
    nicename: { __type: "String" },
    nickname: { __type: "String" },
    password: { __type: "String" },
    registered: { __type: "String" },
    richEditing: { __type: "String" },
    username: { __type: "String!" },
    websiteUrl: { __type: "String" },
    yim: { __type: "String" },
  },
  RegisterUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  ResetUserPasswordInput: {
    clientMutationId: { __type: "String" },
    key: { __type: "String" },
    login: { __type: "String" },
    password: { __type: "String" },
  },
  ResetUserPasswordPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  RestoreCommentInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
  },
  RestoreCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "Comment" },
    restoredId: { __type: "ID" },
  },
  RootQueryToCategoryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToCategoryConnectionEdge]" },
    nodes: { __type: "[Category]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToCategoryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Category" },
  },
  RootQueryToCategoryConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  RootQueryToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  RootQueryToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  RootQueryToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToContentRevisionUnionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToContentRevisionUnionConnectionEdge]" },
    nodes: { __type: "[ContentRevisionUnion]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToContentRevisionUnionConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentRevisionUnion" },
  },
  RootQueryToContentRevisionUnionConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToContentTypeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToContentTypeConnectionEdge]" },
    nodes: { __type: "[ContentType]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToContentTypeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentType" },
  },
  RootQueryToEnqueuedScriptConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToEnqueuedScriptConnectionEdge]" },
    nodes: { __type: "[EnqueuedScript]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToEnqueuedScriptConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedScript" },
  },
  RootQueryToEnqueuedStylesheetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToEnqueuedStylesheetConnectionEdge]" },
    nodes: { __type: "[EnqueuedStylesheet]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToEnqueuedStylesheetConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedStylesheet" },
  },
  RootQueryToGfEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToGfEntryConnectionEdge]" },
    nodes: { __type: "[GfEntry]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToGfEntryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "GfEntry" },
  },
  RootQueryToGfEntryConnectionWhereArgs: {
    dateFilters: { __type: "EntriesDateFiltersInput" },
    entryType: { __type: "EntryTypeEnum" },
    fieldFilters: { __type: "[EntriesFieldFiltersInput]" },
    fieldFiltersMode: { __type: "FieldFiltersModeEnum" },
    formIds: { __type: "[ID]" },
    orderby: { __type: "EntriesConnectionOrderbyInput" },
    status: { __type: "EntryStatusEnum" },
  },
  RootQueryToGfFormConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToGfFormConnectionEdge]" },
    nodes: { __type: "[GfForm]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToGfFormConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "GfForm" },
  },
  RootQueryToGfFormConnectionWhereArgs: {
    formIds: { __type: "[ID]" },
    orderby: { __type: "FormsConnectionOrderbyInput" },
    status: { __type: "FormStatusEnum" },
  },
  RootQueryToGfSubmittedEntryConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToGfSubmittedEntryConnectionEdge]" },
    nodes: { __type: "[GfSubmittedEntry]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToGfSubmittedEntryConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "GfSubmittedEntry" },
  },
  RootQueryToGfSubmittedEntryConnectionWhereArgs: {
    dateFilters: { __type: "EntriesDateFiltersInput" },
    fieldFilters: { __type: "[EntriesFieldFiltersInput]" },
    fieldFiltersMode: { __type: "FieldFiltersModeEnum" },
    formIds: { __type: "[ID]" },
    orderby: { __type: "EntriesConnectionOrderbyInput" },
    status: { __type: "EntryStatusEnum" },
  },
  RootQueryToMediaItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToMediaItemConnectionEdge]" },
    nodes: { __type: "[MediaItem]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToMediaItemConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "MediaItem" },
  },
  RootQueryToMediaItemConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToMenuConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToMenuConnectionEdge]" },
    nodes: { __type: "[Menu]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToMenuConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Menu" },
  },
  RootQueryToMenuConnectionWhereArgs: {
    id: { __type: "Int" },
    location: { __type: "MenuLocationEnum" },
    slug: { __type: "String" },
  },
  RootQueryToMenuItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToMenuItemConnectionEdge]" },
    nodes: { __type: "[MenuItem]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToMenuItemConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "MenuItem" },
  },
  RootQueryToMenuItemConnectionWhereArgs: {
    id: { __type: "Int" },
    location: { __type: "MenuLocationEnum" },
    parentDatabaseId: { __type: "Int" },
    parentId: { __type: "ID" },
  },
  RootQueryToNewEventConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToNewEventConnectionEdge]" },
    nodes: { __type: "[NewEvent]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToNewEventConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewEvent" },
  },
  RootQueryToNewEventConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToNewMediaCenterConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToNewMediaCenterConnectionEdge]" },
    nodes: { __type: "[NewMediaCenter]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToNewMediaCenterConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewMediaCenter" },
  },
  RootQueryToNewMediaCenterConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToNewPressCoverageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToNewPressCoverageConnectionEdge]" },
    nodes: { __type: "[NewPressCoverage]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToNewPressCoverageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressCoverage" },
  },
  RootQueryToNewPressCoverageConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToNewPressReleaseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToNewPressReleaseConnectionEdge]" },
    nodes: { __type: "[NewPressRelease]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToNewPressReleaseConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressRelease" },
  },
  RootQueryToNewPressReleaseConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToPageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPageConnectionEdge]" },
    nodes: { __type: "[Page]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Page" },
  },
  RootQueryToPageConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToPartnerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPartnerConnectionEdge]" },
    nodes: { __type: "[Partner]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPartnerConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Partner" },
  },
  RootQueryToPartnerConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToPluginConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPluginConnectionEdge]" },
    nodes: { __type: "[Plugin]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPluginConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Plugin" },
  },
  RootQueryToPostConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPostConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPostConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  RootQueryToPostConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    onlySticky: { __type: "Boolean" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  RootQueryToPostFormatConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPostFormatConnectionEdge]" },
    nodes: { __type: "[PostFormat]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPostFormatConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "PostFormat" },
  },
  RootQueryToPostFormatConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToPressCoverageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPressCoverageConnectionEdge]" },
    nodes: { __type: "[PressCoverage]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPressCoverageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "PressCoverage" },
  },
  RootQueryToPressCoverageConnectionWhereArgs: {
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToPressReleaseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToPressReleaseConnectionEdge]" },
    nodes: { __type: "[PressRelease]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToPressReleaseConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "PressRelease" },
  },
  RootQueryToPressReleaseConnectionWhereArgs: {
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToProConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToProConnectionEdge]" },
    nodes: { __type: "[Pro]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToProConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Pro" },
  },
  RootQueryToProConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToProductCardConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToProductCardConnectionEdge]" },
    nodes: { __type: "[ProductCard]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToProductCardConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ProductCard" },
  },
  RootQueryToProductCardConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToProductsServiceConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToProductsServiceConnectionEdge]" },
    nodes: { __type: "[ProductsService]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToProductsServiceConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ProductsService" },
  },
  RootQueryToProductsServiceConnectionWhereArgs: {
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToProjectConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToProjectConnectionEdge]" },
    nodes: { __type: "[Project]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToProjectConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Project" },
  },
  RootQueryToProjectConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToTagConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToTagConnectionEdge]" },
    nodes: { __type: "[Tag]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToTagConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Tag" },
  },
  RootQueryToTagConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToTaxonomyConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToTaxonomyConnectionEdge]" },
    nodes: { __type: "[Taxonomy]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Taxonomy" },
  },
  RootQueryToTeamMemberConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToTeamMemberConnectionEdge]" },
    nodes: { __type: "[TeamMember]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToTeamMemberConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TeamMember" },
  },
  RootQueryToTeamMemberConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  RootQueryToTermNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToTermNodeConnectionEdge]" },
    nodes: { __type: "[TermNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToTermNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TermNode" },
  },
  RootQueryToTermNodeConnectionWhereArgs: {
    cacheDomain: { __type: "String" },
    childOf: { __type: "Int" },
    childless: { __type: "Boolean" },
    descriptionLike: { __type: "String" },
    exclude: { __type: "[ID]" },
    excludeTree: { __type: "[ID]" },
    hideEmpty: { __type: "Boolean" },
    hierarchical: { __type: "Boolean" },
    include: { __type: "[ID]" },
    name: { __type: "[String]" },
    nameLike: { __type: "String" },
    objectIds: { __type: "[ID]" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "TermObjectsConnectionOrderbyEnum" },
    padCounts: { __type: "Boolean" },
    parent: { __type: "Int" },
    search: { __type: "String" },
    slug: { __type: "[String]" },
    taxonomies: { __type: "[TaxonomyEnum]" },
    termTaxonomId: { __type: "[ID]" },
    updateTermMetaCache: { __type: "Boolean" },
  },
  RootQueryToThemeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToThemeConnectionEdge]" },
    nodes: { __type: "[Theme]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToThemeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Theme" },
  },
  RootQueryToUserConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToUserConnectionEdge]" },
    nodes: { __type: "[User]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToUserConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "User" },
  },
  RootQueryToUserConnectionWhereArgs: {
    exclude: { __type: "[Int]" },
    hasPublishedPosts: { __type: "[ContentTypeEnum]" },
    include: { __type: "[Int]" },
    login: { __type: "String" },
    loginIn: { __type: "[String]" },
    loginNotIn: { __type: "[String]" },
    nicename: { __type: "String" },
    nicenameIn: { __type: "[String]" },
    nicenameNotIn: { __type: "[String]" },
    orderby: { __type: "[UsersConnectionOrderbyInput]" },
    role: { __type: "UserRoleEnum" },
    roleIn: { __type: "[UserRoleEnum]" },
    roleNotIn: { __type: "[UserRoleEnum]" },
    search: { __type: "String" },
    searchColumns: { __type: "[UsersConnectionSearchColumnEnum]" },
  },
  RootQueryToUserRoleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[RootQueryToUserRoleConnectionEdge]" },
    nodes: { __type: "[UserRole]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  RootQueryToUserRoleConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "UserRole" },
  },
  SectionField: {
    __typename: { __type: "String!" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    displayOnly: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    label: { __type: "String" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    type: { __type: "FormFieldTypeEnum" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  SelectField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    choices: { __type: "[SelectFieldChoice]" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasChoiceValue: { __type: "Boolean" },
    hasEnhancedUI: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  SelectFieldChoice: {
    __typename: { __type: "String!" },
    isSelected: { __type: "Boolean" },
    text: { __type: "String" },
    value: { __type: "String" },
  },
  SendPasswordResetEmailInput: {
    clientMutationId: { __type: "String" },
    username: { __type: "String!" },
  },
  SendPasswordResetEmailPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  Settings: {
    __typename: { __type: "String!" },
    atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking: {
      __type: "String",
    },
    discussionSettingsDefaultCommentStatus: { __type: "String" },
    discussionSettingsDefaultPingStatus: { __type: "String" },
    generalSettingsDateFormat: { __type: "String" },
    generalSettingsDescription: { __type: "String" },
    generalSettingsEmail: { __type: "String" },
    generalSettingsLanguage: { __type: "String" },
    generalSettingsStartOfWeek: { __type: "Int" },
    generalSettingsTimeFormat: { __type: "String" },
    generalSettingsTimezone: { __type: "String" },
    generalSettingsTitle: { __type: "String" },
    generalSettingsUrl: { __type: "String" },
    readingSettingsPostsPerPage: { __type: "Int" },
    writingSettingsDefaultCategory: { __type: "Int" },
    writingSettingsDefaultPostFormat: { __type: "String" },
    writingSettingsUseSmilies: { __type: "Boolean" },
  },
  SignatureField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    backgroundColor: { __type: "String" },
    borderColor: { __type: "String" },
    borderStyle: { __type: "SignatureFieldBorderStyleEnum" },
    borderWidth: { __type: "SignatureFieldBorderWidthEnum" },
    boxWidth: { __type: "Int" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    penColor: { __type: "String" },
    penSize: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  SubmitFormMetaInput: {
    createdById: { __type: "Int" },
    dateCreatedGmt: { __type: "String" },
    ip: { __type: "String" },
    sourceUrl: { __type: "String" },
    userAgent: { __type: "String" },
  },
  SubmitGfDraftEntryInput: {
    clientMutationId: { __type: "String" },
    id: { __type: "ID!" },
    idType: { __type: "DraftEntryIdTypeEnum" },
  },
  SubmitGfDraftEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    entry: { __type: "GfSubmittedEntry" },
    errors: { __type: "[FieldError]" },
  },
  SubmitGfFormInput: {
    clientMutationId: { __type: "String" },
    entryMeta: { __type: "SubmitFormMetaInput" },
    fieldValues: { __type: "[FormFieldValuesInput]!" },
    id: { __type: "ID!" },
    saveAsDraft: { __type: "Boolean" },
    sourcePage: { __type: "Int" },
    targetPage: { __type: "Int" },
  },
  SubmitGfFormPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    entry: { __type: "GfEntry" },
    errors: { __type: "[FieldError]" },
    resumeUrl: { __type: "String" },
  },
  Tag: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    contentNodes: {
      __type: "TagToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "TagToContentNodeConnectionWhereArgs",
      },
    },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    posts: {
      __type: "TagToPostConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "TagToPostConnectionWhereArgs",
      },
    },
    slug: { __type: "String" },
    tagId: { __type: "Int" },
    taxonomy: { __type: "TagToTaxonomyConnectionEdge" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
  },
  TagToContentNodeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TagToContentNodeConnectionEdge]" },
    nodes: { __type: "[ContentNode]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  TagToContentNodeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentNode" },
  },
  TagToContentNodeConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypesOfTagEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  TagToPostConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TagToPostConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  TagToPostConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  TagToPostConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  TagToTaxonomyConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "Taxonomy" },
  },
  Taxonomy: {
    __typename: { __type: "String!" },
    connectedContentTypes: {
      __type: "TaxonomyToContentTypeConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    description: { __type: "String" },
    graphqlPluralName: { __type: "String" },
    graphqlSingleName: { __type: "String" },
    hierarchical: { __type: "Boolean" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    label: { __type: "String" },
    name: { __type: "String" },
    public: { __type: "Boolean" },
    restBase: { __type: "String" },
    restControllerClass: { __type: "String" },
    showCloud: { __type: "Boolean" },
    showInAdminColumn: { __type: "Boolean" },
    showInGraphql: { __type: "Boolean" },
    showInMenu: { __type: "Boolean" },
    showInNavMenus: { __type: "Boolean" },
    showInQuickEdit: { __type: "Boolean" },
    showInRest: { __type: "Boolean" },
    showUi: { __type: "Boolean" },
  },
  TaxonomyToContentTypeConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TaxonomyToContentTypeConnectionEdge]" },
    nodes: { __type: "[ContentType]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  TaxonomyToContentTypeConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentType" },
  },
  TeamMember: {
    __typename: { __type: "String!" },
    author: { __type: "NodeWithAuthorToUserConnectionEdge" },
    authorDatabaseId: { __type: "Int" },
    authorId: { __type: "ID" },
    bio: { __type: "String" },
    conditionalTags: { __type: "ConditionalTags" },
    contentType: { __type: "ContentNodeToContentTypeConnectionEdge" },
    contentTypeName: { __type: "String!" },
    databaseId: { __type: "Int!" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    desiredSlug: { __type: "String" },
    editingLockedBy: { __type: "ContentNodeToEditLockConnectionEdge" },
    enclosure: { __type: "String" },
    enqueuedScripts: {
      __type: "ContentNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "ContentNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    featuredImage: { __type: "NodeWithFeaturedImageToMediaItemConnectionEdge" },
    featuredImageDatabaseId: { __type: "Int" },
    featuredImageId: { __type: "ID" },
    fullName: { __type: "String" },
    guid: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isPreview: { __type: "Boolean" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastEditedBy: { __type: "ContentNodeToEditLastConnectionEdge" },
    link: { __type: "String" },
    modified: { __type: "String" },
    modifiedGmt: { __type: "String" },
    preview: { __type: "TeamMemberToPreviewConnectionEdge" },
    previewRevisionDatabaseId: { __type: "Int" },
    previewRevisionId: { __type: "ID" },
    profilePic: { __type: "MediaItem" },
    slug: { __type: "String" },
    status: { __type: "String" },
    teamMemberId: { __type: "Int!" },
    template: { __type: "ContentTemplate" },
    templates: { __type: "[String]" },
    title: {
      __type: "String",
      __args: { format: "PostObjectFieldFormatEnum" },
    },
    uri: { __type: "String" },
  },
  TeamMemberToPreviewConnectionEdge: {
    __typename: { __type: "String!" },
    node: { __type: "TeamMember" },
  },
  TermNode: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    count: { __type: "Int" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    enqueuedScripts: {
      __type: "TermNodeToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "TermNodeToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    link: { __type: "String" },
    name: { __type: "String" },
    slug: { __type: "String" },
    taxonomyName: { __type: "String" },
    templates: { __type: "[String]" },
    termGroupId: { __type: "Int" },
    termTaxonomyId: { __type: "Int" },
    uri: { __type: "String" },
    $on: { __type: "$TermNode!" },
  },
  TermNodeToEnqueuedScriptConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TermNodeToEnqueuedScriptConnectionEdge]" },
    nodes: { __type: "[EnqueuedScript]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  TermNodeToEnqueuedScriptConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedScript" },
  },
  TermNodeToEnqueuedStylesheetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[TermNodeToEnqueuedStylesheetConnectionEdge]" },
    nodes: { __type: "[EnqueuedStylesheet]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  TermNodeToEnqueuedStylesheetConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedStylesheet" },
  },
  TextAreaField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasRichTextEditor: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  TextField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    autocompleteAttribute: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    hasAutocomplete: { __type: "Boolean" },
    hasInputMask: { __type: "Boolean" },
    id: { __type: "Int!" },
    inputMaskValue: { __type: "String" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isPasswordInput: { __type: "Boolean" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    maxLength: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  Theme: {
    __typename: { __type: "String!" },
    author: { __type: "String" },
    authorUri: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    name: { __type: "String" },
    screenshot: { __type: "String" },
    slug: { __type: "String" },
    tags: { __type: "[String]" },
    themeUri: { __type: "String" },
    version: { __type: "String" },
  },
  TimeField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputType: { __type: "FormFieldTypeEnum" },
    inputs: { __type: "[TimeInputProperty]" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    shouldAllowDuplicates: { __type: "Boolean" },
    subLabelPlacement: { __type: "FormFieldSubLabelPlacementEnum" },
    timeFormat: { __type: "TimeFieldFormatEnum" },
    timeValues: { __type: "TimeFieldValue" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  TimeFieldValue: {
    __typename: { __type: "String!" },
    amPm: { __type: "AmPmEnum" },
    displayValue: { __type: "String" },
    hours: { __type: "String" },
    minutes: { __type: "String" },
  },
  TimeInputProperty: {
    __typename: { __type: "String!" },
    autocompleteAttribute: { __type: "String" },
    customLabel: { __type: "String" },
    defaultValue: { __type: "String" },
    id: { __type: "Float" },
    label: { __type: "String" },
    placeholder: { __type: "String" },
  },
  UniformResourceIdentifiable: {
    __typename: { __type: "String!" },
    conditionalTags: { __type: "ConditionalTags" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isTermNode: { __type: "Boolean!" },
    templates: { __type: "[String]" },
    uri: { __type: "String" },
    $on: { __type: "$UniformResourceIdentifiable!" },
  },
  UpdateCategoryInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  UpdateCategoryPayload: {
    __typename: { __type: "String!" },
    category: { __type: "Category" },
    clientMutationId: { __type: "String" },
  },
  UpdateCommentInput: {
    approved: { __type: "String" },
    author: { __type: "String" },
    authorEmail: { __type: "String" },
    authorUrl: { __type: "String" },
    clientMutationId: { __type: "String" },
    commentOn: { __type: "Int" },
    content: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    parent: { __type: "ID" },
    type: { __type: "String" },
  },
  UpdateCommentPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    comment: { __type: "Comment" },
    success: { __type: "Boolean" },
  },
  UpdateDraftEntryMetaInput: {
    createdById: { __type: "Int" },
    dateCreatedGmt: { __type: "String" },
    ip: { __type: "String" },
    sourceUrl: { __type: "String" },
    userAgent: { __type: "String" },
  },
  UpdateEntryMetaInput: {
    createdById: { __type: "Int" },
    dateCreatedGmt: { __type: "String" },
    ip: { __type: "String" },
    isRead: { __type: "Boolean" },
    isStarred: { __type: "Boolean" },
    sourceUrl: { __type: "String" },
    status: { __type: "EntryStatusEnum" },
    userAgent: { __type: "String" },
  },
  UpdateGfDraftEntryInput: {
    clientMutationId: { __type: "String" },
    entryMeta: { __type: "UpdateDraftEntryMetaInput" },
    fieldValues: { __type: "[FormFieldValuesInput]" },
    id: { __type: "ID!" },
    idType: { __type: "DraftEntryIdTypeEnum" },
    shouldValidate: { __type: "Boolean" },
  },
  UpdateGfDraftEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    draftEntry: { __type: "GfDraftEntry" },
    errors: { __type: "[FieldError]" },
    resumeUrl: { __type: "String" },
  },
  UpdateGfEntryInput: {
    clientMutationId: { __type: "String" },
    entryMeta: { __type: "UpdateEntryMetaInput" },
    fieldValues: { __type: "[FormFieldValuesInput]" },
    id: { __type: "ID!" },
    shouldValidate: { __type: "Boolean" },
  },
  UpdateGfEntryPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    entry: { __type: "GfSubmittedEntry" },
    errors: { __type: "[FieldError]" },
  },
  UpdateMediaItemInput: {
    altText: { __type: "String" },
    authorId: { __type: "ID" },
    caption: { __type: "String" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    date: { __type: "String" },
    dateGmt: { __type: "String" },
    description: { __type: "String" },
    filePath: { __type: "String" },
    fileType: { __type: "MimeTypeEnum" },
    id: { __type: "ID!" },
    parentId: { __type: "ID" },
    pingStatus: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "MediaItemStatusEnum" },
    title: { __type: "String" },
  },
  UpdateMediaItemPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    mediaItem: { __type: "MediaItem" },
  },
  UpdateNewEventInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewEventNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateNewEventPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newEvent: { __type: "NewEvent" },
  },
  UpdateNewMediaCenterInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  UpdateNewMediaCenterPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newMediaCenter: { __type: "NewMediaCenter" },
  },
  UpdateNewPressCoverageInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewPressCoverageNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateNewPressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newPressCoverage: { __type: "NewPressCoverage" },
  },
  UpdateNewPressReleaseInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    newMediaCenters: { __type: "NewPressReleaseNewMediaCentersInput" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateNewPressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    newPressRelease: { __type: "NewPressRelease" },
  },
  UpdatePageInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    parentId: { __type: "ID" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdatePagePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    page: { __type: "Page" },
  },
  UpdatePartnerInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdatePartnerPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    partner: { __type: "Partner" },
  },
  UpdatePostFormatInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  UpdatePostFormatPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    postFormat: { __type: "PostFormat" },
  },
  UpdatePostInput: {
    authorId: { __type: "ID" },
    categories: { __type: "PostCategoriesInput" },
    clientMutationId: { __type: "String" },
    commentStatus: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    excerpt: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    pingStatus: { __type: "String" },
    pinged: { __type: "[String]" },
    postFormats: { __type: "PostPostFormatsInput" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    tags: { __type: "PostTagsInput" },
    title: { __type: "String" },
    toPing: { __type: "[String]" },
  },
  UpdatePostPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    post: { __type: "Post" },
  },
  UpdatePressCoverageInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdatePressCoveragePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pressCoverage: { __type: "PressCoverage" },
  },
  UpdatePressReleaseInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdatePressReleasePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pressRelease: { __type: "PressRelease" },
  },
  UpdateProInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String" },
    parentId: { __type: "ID" },
    slug: { __type: "String" },
  },
  UpdateProPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    pro: { __type: "Pro" },
  },
  UpdateProductCardInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateProductCardPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    productCard: { __type: "ProductCard" },
  },
  UpdateProductsServiceInput: {
    clientMutationId: { __type: "String" },
    content: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    parentId: { __type: "ID" },
    password: { __type: "String" },
    postFormats: { __type: "ProductsServicePostFormatsInput" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateProductsServicePayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    productsService: { __type: "ProductsService" },
  },
  UpdateProjectInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateProjectPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    project: { __type: "Project" },
  },
  UpdateSettingsInput: {
    atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking: {
      __type: "String",
    },
    clientMutationId: { __type: "String" },
    discussionSettingsDefaultCommentStatus: { __type: "String" },
    discussionSettingsDefaultPingStatus: { __type: "String" },
    generalSettingsDateFormat: { __type: "String" },
    generalSettingsDescription: { __type: "String" },
    generalSettingsEmail: { __type: "String" },
    generalSettingsLanguage: { __type: "String" },
    generalSettingsStartOfWeek: { __type: "Int" },
    generalSettingsTimeFormat: { __type: "String" },
    generalSettingsTimezone: { __type: "String" },
    generalSettingsTitle: { __type: "String" },
    generalSettingsUrl: { __type: "String" },
    readingSettingsPostsPerPage: { __type: "Int" },
    writingSettingsDefaultCategory: { __type: "Int" },
    writingSettingsDefaultPostFormat: { __type: "String" },
    writingSettingsUseSmilies: { __type: "Boolean" },
  },
  UpdateSettingsPayload: {
    __typename: { __type: "String!" },
    allSettings: { __type: "Settings" },
    atlasContentModelerSettingsSettings: {
      __type: "AtlasContentModelerSettingsSettings",
    },
    clientMutationId: { __type: "String" },
    discussionSettings: { __type: "DiscussionSettings" },
    generalSettings: { __type: "GeneralSettings" },
    readingSettings: { __type: "ReadingSettings" },
    writingSettings: { __type: "WritingSettings" },
  },
  UpdateTagInput: {
    aliasOf: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    id: { __type: "ID!" },
    name: { __type: "String" },
    slug: { __type: "String" },
  },
  UpdateTagPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    tag: { __type: "Tag" },
  },
  UpdateTeamMemberInput: {
    authorId: { __type: "ID" },
    clientMutationId: { __type: "String" },
    date: { __type: "String" },
    id: { __type: "ID!" },
    menuOrder: { __type: "Int" },
    password: { __type: "String" },
    slug: { __type: "String" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UpdateTeamMemberPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    teamMember: { __type: "TeamMember" },
  },
  UpdateUserInput: {
    aim: { __type: "String" },
    clientMutationId: { __type: "String" },
    description: { __type: "String" },
    displayName: { __type: "String" },
    email: { __type: "String" },
    firstName: { __type: "String" },
    id: { __type: "ID!" },
    jabber: { __type: "String" },
    lastName: { __type: "String" },
    locale: { __type: "String" },
    nicename: { __type: "String" },
    nickname: { __type: "String" },
    password: { __type: "String" },
    registered: { __type: "String" },
    richEditing: { __type: "String" },
    roles: { __type: "[String]" },
    websiteUrl: { __type: "String" },
    yim: { __type: "String" },
  },
  UpdateUserPayload: {
    __typename: { __type: "String!" },
    clientMutationId: { __type: "String" },
    user: { __type: "User" },
  },
  User: {
    __typename: { __type: "String!" },
    avatar: {
      __type: "Avatar",
      __args: {
        forceDefault: "Boolean",
        rating: "AvatarRatingEnum",
        size: "Int",
      },
    },
    capKey: { __type: "String" },
    capabilities: { __type: "[String]" },
    comments: {
      __type: "UserToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToCommentConnectionWhereArgs",
      },
    },
    conditionalTags: { __type: "ConditionalTags" },
    databaseId: { __type: "Int!" },
    description: { __type: "String" },
    email: { __type: "String" },
    enqueuedScripts: {
      __type: "UserToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    enqueuedStylesheets: {
      __type: "UserToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    extraCapabilities: { __type: "[String]" },
    firstName: { __type: "String" },
    id: { __type: "ID!" },
    isContentNode: { __type: "Boolean!" },
    isRestricted: { __type: "Boolean" },
    isTermNode: { __type: "Boolean!" },
    lastName: { __type: "String" },
    locale: { __type: "String" },
    mediaItems: {
      __type: "UserToMediaItemConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToMediaItemConnectionWhereArgs",
      },
    },
    name: { __type: "String" },
    newEvents: {
      __type: "UserToNewEventConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToNewEventConnectionWhereArgs",
      },
    },
    newPressCoverages: {
      __type: "UserToNewPressCoverageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToNewPressCoverageConnectionWhereArgs",
      },
    },
    newPressReleases: {
      __type: "UserToNewPressReleaseConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToNewPressReleaseConnectionWhereArgs",
      },
    },
    nicename: { __type: "String" },
    nickname: { __type: "String" },
    pages: {
      __type: "UserToPageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToPageConnectionWhereArgs",
      },
    },
    partners: {
      __type: "UserToPartnerConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToPartnerConnectionWhereArgs",
      },
    },
    posts: {
      __type: "UserToPostConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToPostConnectionWhereArgs",
      },
    },
    productCards: {
      __type: "UserToProductCardConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToProductCardConnectionWhereArgs",
      },
    },
    projects: {
      __type: "UserToProjectConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToProjectConnectionWhereArgs",
      },
    },
    registeredDate: { __type: "String" },
    revisions: {
      __type: "UserToContentRevisionUnionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToContentRevisionUnionConnectionWhereArgs",
      },
    },
    roles: {
      __type: "UserToUserRoleConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    slug: { __type: "String" },
    teamMembers: {
      __type: "UserToTeamMemberConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "UserToTeamMemberConnectionWhereArgs",
      },
    },
    templates: { __type: "[String]" },
    uri: { __type: "String" },
    url: { __type: "String" },
    userId: { __type: "Int" },
    username: { __type: "String" },
  },
  UserRole: {
    __typename: { __type: "String!" },
    capabilities: { __type: "[String]" },
    displayName: { __type: "String" },
    id: { __type: "ID!" },
    isRestricted: { __type: "Boolean" },
    name: { __type: "String" },
  },
  UserToCommentConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToCommentConnectionEdge]" },
    nodes: { __type: "[Comment]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToCommentConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Comment" },
  },
  UserToCommentConnectionWhereArgs: {
    authorEmail: { __type: "String" },
    authorIn: { __type: "[ID]" },
    authorNotIn: { __type: "[ID]" },
    authorUrl: { __type: "String" },
    commentIn: { __type: "[ID]" },
    commentNotIn: { __type: "[ID]" },
    commentType: { __type: "String" },
    commentTypeIn: { __type: "[String]" },
    commentTypeNotIn: { __type: "String" },
    contentAuthor: { __type: "[ID]" },
    contentAuthorIn: { __type: "[ID]" },
    contentAuthorNotIn: { __type: "[ID]" },
    contentId: { __type: "ID" },
    contentIdIn: { __type: "[ID]" },
    contentIdNotIn: { __type: "[ID]" },
    contentName: { __type: "String" },
    contentParent: { __type: "Int" },
    contentStatus: { __type: "[PostStatusEnum]" },
    contentType: { __type: "[ContentTypeEnum]" },
    includeUnapproved: { __type: "[ID]" },
    karma: { __type: "Int" },
    order: { __type: "OrderEnum" },
    orderby: { __type: "CommentsConnectionOrderbyEnum" },
    parent: { __type: "Int" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    search: { __type: "String" },
    status: { __type: "String" },
    userId: { __type: "ID" },
  },
  UserToContentRevisionUnionConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToContentRevisionUnionConnectionEdge]" },
    nodes: { __type: "[ContentRevisionUnion]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToContentRevisionUnionConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ContentRevisionUnion" },
  },
  UserToContentRevisionUnionConnectionWhereArgs: {
    contentTypes: { __type: "[ContentTypeEnum]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToEnqueuedScriptConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToEnqueuedScriptConnectionEdge]" },
    nodes: { __type: "[EnqueuedScript]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToEnqueuedScriptConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedScript" },
  },
  UserToEnqueuedStylesheetConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToEnqueuedStylesheetConnectionEdge]" },
    nodes: { __type: "[EnqueuedStylesheet]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToEnqueuedStylesheetConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "EnqueuedStylesheet" },
  },
  UserToMediaItemConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToMediaItemConnectionEdge]" },
    nodes: { __type: "[MediaItem]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToMediaItemConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "MediaItem" },
  },
  UserToMediaItemConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToNewEventConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToNewEventConnectionEdge]" },
    nodes: { __type: "[NewEvent]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToNewEventConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewEvent" },
  },
  UserToNewEventConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToNewPressCoverageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToNewPressCoverageConnectionEdge]" },
    nodes: { __type: "[NewPressCoverage]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToNewPressCoverageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressCoverage" },
  },
  UserToNewPressCoverageConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToNewPressReleaseConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToNewPressReleaseConnectionEdge]" },
    nodes: { __type: "[NewPressRelease]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToNewPressReleaseConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "NewPressRelease" },
  },
  UserToNewPressReleaseConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToPageConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToPageConnectionEdge]" },
    nodes: { __type: "[Page]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToPageConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Page" },
  },
  UserToPageConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToPartnerConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToPartnerConnectionEdge]" },
    nodes: { __type: "[Partner]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToPartnerConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Partner" },
  },
  UserToPartnerConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToPostConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToPostConnectionEdge]" },
    nodes: { __type: "[Post]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToPostConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Post" },
  },
  UserToPostConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    categoryId: { __type: "Int" },
    categoryIn: { __type: "[ID]" },
    categoryName: { __type: "String" },
    categoryNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    tag: { __type: "String" },
    tagId: { __type: "String" },
    tagIn: { __type: "[ID]" },
    tagNotIn: { __type: "[ID]" },
    tagSlugAnd: { __type: "[String]" },
    tagSlugIn: { __type: "[String]" },
    title: { __type: "String" },
  },
  UserToProductCardConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToProductCardConnectionEdge]" },
    nodes: { __type: "[ProductCard]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToProductCardConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "ProductCard" },
  },
  UserToProductCardConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToProjectConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToProjectConnectionEdge]" },
    nodes: { __type: "[Project]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToProjectConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "Project" },
  },
  UserToProjectConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToTeamMemberConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToTeamMemberConnectionEdge]" },
    nodes: { __type: "[TeamMember]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToTeamMemberConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "TeamMember" },
  },
  UserToTeamMemberConnectionWhereArgs: {
    author: { __type: "Int" },
    authorIn: { __type: "[ID]" },
    authorName: { __type: "String" },
    authorNotIn: { __type: "[ID]" },
    dateQuery: { __type: "DateQueryInput" },
    hasPassword: { __type: "Boolean" },
    id: { __type: "Int" },
    in: { __type: "[ID]" },
    mimeType: { __type: "MimeTypeEnum" },
    name: { __type: "String" },
    nameIn: { __type: "[String]" },
    notIn: { __type: "[ID]" },
    orderby: { __type: "[PostObjectsConnectionOrderbyInput]" },
    parent: { __type: "ID" },
    parentIn: { __type: "[ID]" },
    parentNotIn: { __type: "[ID]" },
    password: { __type: "String" },
    search: { __type: "String" },
    stati: { __type: "[PostStatusEnum]" },
    status: { __type: "PostStatusEnum" },
    title: { __type: "String" },
  },
  UserToUserRoleConnection: {
    __typename: { __type: "String!" },
    edges: { __type: "[UserToUserRoleConnectionEdge]" },
    nodes: { __type: "[UserRole]" },
    pageInfo: { __type: "WPPageInfo" },
  },
  UserToUserRoleConnectionEdge: {
    __typename: { __type: "String!" },
    cursor: { __type: "String" },
    node: { __type: "UserRole" },
  },
  UsersConnectionOrderbyInput: {
    field: { __type: "UsersConnectionOrderbyEnum!" },
    order: { __type: "OrderEnum" },
  },
  WPPageInfo: {
    __typename: { __type: "String!" },
    endCursor: { __type: "String" },
    hasNextPage: { __type: "Boolean!" },
    hasPreviousPage: { __type: "Boolean!" },
    startCursor: { __type: "String" },
  },
  WebsiteField: {
    __typename: { __type: "String!" },
    adminLabel: { __type: "String" },
    canPrepopulate: { __type: "Boolean" },
    conditionalLogic: { __type: "ConditionalLogic" },
    cssClass: { __type: "String" },
    defaultValue: { __type: "String" },
    description: { __type: "String" },
    descriptionPlacement: { __type: "FormFieldDescriptionPlacementEnum" },
    displayOnly: { __type: "Boolean" },
    errorMessage: { __type: "String" },
    id: { __type: "Int!" },
    inputName: { __type: "String" },
    inputType: { __type: "FormFieldTypeEnum" },
    isRequired: { __type: "Boolean" },
    label: { __type: "String" },
    labelPlacement: { __type: "FormFieldLabelPlacementEnum" },
    layoutGridColumnSpan: { __type: "Int" },
    layoutSpacerGridColumnSpan: { __type: "Int" },
    pageNumber: { __type: "Int" },
    personalData: { __type: "FormFieldDataPolicy" },
    placeholder: { __type: "String" },
    shouldAllowDuplicates: { __type: "Boolean" },
    size: { __type: "FormFieldSizeEnum" },
    type: { __type: "FormFieldTypeEnum" },
    value: { __type: "String" },
    visibility: { __type: "FormFieldVisibilityEnum" },
  },
  WritingSettings: {
    __typename: { __type: "String!" },
    defaultCategory: { __type: "Int" },
    defaultPostFormat: { __type: "String" },
    useSmilies: { __type: "Boolean" },
  },
  mutation: {
    __typename: { __type: "String!" },
    createCategory: {
      __type: "CreateCategoryPayload",
      __args: { input: "CreateCategoryInput!" },
    },
    createComment: {
      __type: "CreateCommentPayload",
      __args: { input: "CreateCommentInput!" },
    },
    createMediaItem: {
      __type: "CreateMediaItemPayload",
      __args: { input: "CreateMediaItemInput!" },
    },
    createNewEvent: {
      __type: "CreateNewEventPayload",
      __args: { input: "CreateNewEventInput!" },
    },
    createNewMediaCenter: {
      __type: "CreateNewMediaCenterPayload",
      __args: { input: "CreateNewMediaCenterInput!" },
    },
    createNewPressCoverage: {
      __type: "CreateNewPressCoveragePayload",
      __args: { input: "CreateNewPressCoverageInput!" },
    },
    createNewPressRelease: {
      __type: "CreateNewPressReleasePayload",
      __args: { input: "CreateNewPressReleaseInput!" },
    },
    createPage: {
      __type: "CreatePagePayload",
      __args: { input: "CreatePageInput!" },
    },
    createPartner: {
      __type: "CreatePartnerPayload",
      __args: { input: "CreatePartnerInput!" },
    },
    createPost: {
      __type: "CreatePostPayload",
      __args: { input: "CreatePostInput!" },
    },
    createPostFormat: {
      __type: "CreatePostFormatPayload",
      __args: { input: "CreatePostFormatInput!" },
    },
    createPressCoverage: {
      __type: "CreatePressCoveragePayload",
      __args: { input: "CreatePressCoverageInput!" },
    },
    createPressRelease: {
      __type: "CreatePressReleasePayload",
      __args: { input: "CreatePressReleaseInput!" },
    },
    createPro: {
      __type: "CreateProPayload",
      __args: { input: "CreateProInput!" },
    },
    createProductCard: {
      __type: "CreateProductCardPayload",
      __args: { input: "CreateProductCardInput!" },
    },
    createProductsService: {
      __type: "CreateProductsServicePayload",
      __args: { input: "CreateProductsServiceInput!" },
    },
    createProject: {
      __type: "CreateProjectPayload",
      __args: { input: "CreateProjectInput!" },
    },
    createTag: {
      __type: "CreateTagPayload",
      __args: { input: "CreateTagInput!" },
    },
    createTeamMember: {
      __type: "CreateTeamMemberPayload",
      __args: { input: "CreateTeamMemberInput!" },
    },
    createUser: {
      __type: "CreateUserPayload",
      __args: { input: "CreateUserInput!" },
    },
    deleteCategory: {
      __type: "DeleteCategoryPayload",
      __args: { input: "DeleteCategoryInput!" },
    },
    deleteComment: {
      __type: "DeleteCommentPayload",
      __args: { input: "DeleteCommentInput!" },
    },
    deleteGfDraftEntry: {
      __type: "DeleteGfDraftEntryPayload",
      __args: { input: "DeleteGfDraftEntryInput!" },
    },
    deleteGfEntry: {
      __type: "DeleteGfEntryPayload",
      __args: { input: "DeleteGfEntryInput!" },
    },
    deleteMediaItem: {
      __type: "DeleteMediaItemPayload",
      __args: { input: "DeleteMediaItemInput!" },
    },
    deleteNewEvent: {
      __type: "DeleteNewEventPayload",
      __args: { input: "DeleteNewEventInput!" },
    },
    deleteNewMediaCenter: {
      __type: "DeleteNewMediaCenterPayload",
      __args: { input: "DeleteNewMediaCenterInput!" },
    },
    deleteNewPressCoverage: {
      __type: "DeleteNewPressCoveragePayload",
      __args: { input: "DeleteNewPressCoverageInput!" },
    },
    deleteNewPressRelease: {
      __type: "DeleteNewPressReleasePayload",
      __args: { input: "DeleteNewPressReleaseInput!" },
    },
    deletePage: {
      __type: "DeletePagePayload",
      __args: { input: "DeletePageInput!" },
    },
    deletePartner: {
      __type: "DeletePartnerPayload",
      __args: { input: "DeletePartnerInput!" },
    },
    deletePost: {
      __type: "DeletePostPayload",
      __args: { input: "DeletePostInput!" },
    },
    deletePostFormat: {
      __type: "DeletePostFormatPayload",
      __args: { input: "DeletePostFormatInput!" },
    },
    deletePressCoverage: {
      __type: "DeletePressCoveragePayload",
      __args: { input: "DeletePressCoverageInput!" },
    },
    deletePressRelease: {
      __type: "DeletePressReleasePayload",
      __args: { input: "DeletePressReleaseInput!" },
    },
    deletePro: {
      __type: "DeleteProPayload",
      __args: { input: "DeleteProInput!" },
    },
    deleteProductCard: {
      __type: "DeleteProductCardPayload",
      __args: { input: "DeleteProductCardInput!" },
    },
    deleteProductsService: {
      __type: "DeleteProductsServicePayload",
      __args: { input: "DeleteProductsServiceInput!" },
    },
    deleteProject: {
      __type: "DeleteProjectPayload",
      __args: { input: "DeleteProjectInput!" },
    },
    deleteTag: {
      __type: "DeleteTagPayload",
      __args: { input: "DeleteTagInput!" },
    },
    deleteTeamMember: {
      __type: "DeleteTeamMemberPayload",
      __args: { input: "DeleteTeamMemberInput!" },
    },
    deleteUser: {
      __type: "DeleteUserPayload",
      __args: { input: "DeleteUserInput!" },
    },
    generateAuthorizationCode: {
      __type: "GenerateAuthorizationCodePayload",
      __args: { input: "GenerateAuthorizationCodeInput!" },
    },
    increaseCount: { __type: "Int", __args: { count: "Int" } },
    registerUser: {
      __type: "RegisterUserPayload",
      __args: { input: "RegisterUserInput!" },
    },
    resetUserPassword: {
      __type: "ResetUserPasswordPayload",
      __args: { input: "ResetUserPasswordInput!" },
    },
    restoreComment: {
      __type: "RestoreCommentPayload",
      __args: { input: "RestoreCommentInput!" },
    },
    sendPasswordResetEmail: {
      __type: "SendPasswordResetEmailPayload",
      __args: { input: "SendPasswordResetEmailInput!" },
    },
    submitGfDraftEntry: {
      __type: "SubmitGfDraftEntryPayload",
      __args: { input: "SubmitGfDraftEntryInput!" },
    },
    submitGfForm: {
      __type: "SubmitGfFormPayload",
      __args: { input: "SubmitGfFormInput!" },
    },
    updateCategory: {
      __type: "UpdateCategoryPayload",
      __args: { input: "UpdateCategoryInput!" },
    },
    updateComment: {
      __type: "UpdateCommentPayload",
      __args: { input: "UpdateCommentInput!" },
    },
    updateGfDraftEntry: {
      __type: "UpdateGfDraftEntryPayload",
      __args: { input: "UpdateGfDraftEntryInput!" },
    },
    updateGfEntry: {
      __type: "UpdateGfEntryPayload",
      __args: { input: "UpdateGfEntryInput!" },
    },
    updateMediaItem: {
      __type: "UpdateMediaItemPayload",
      __args: { input: "UpdateMediaItemInput!" },
    },
    updateNewEvent: {
      __type: "UpdateNewEventPayload",
      __args: { input: "UpdateNewEventInput!" },
    },
    updateNewMediaCenter: {
      __type: "UpdateNewMediaCenterPayload",
      __args: { input: "UpdateNewMediaCenterInput!" },
    },
    updateNewPressCoverage: {
      __type: "UpdateNewPressCoveragePayload",
      __args: { input: "UpdateNewPressCoverageInput!" },
    },
    updateNewPressRelease: {
      __type: "UpdateNewPressReleasePayload",
      __args: { input: "UpdateNewPressReleaseInput!" },
    },
    updatePage: {
      __type: "UpdatePagePayload",
      __args: { input: "UpdatePageInput!" },
    },
    updatePartner: {
      __type: "UpdatePartnerPayload",
      __args: { input: "UpdatePartnerInput!" },
    },
    updatePost: {
      __type: "UpdatePostPayload",
      __args: { input: "UpdatePostInput!" },
    },
    updatePostFormat: {
      __type: "UpdatePostFormatPayload",
      __args: { input: "UpdatePostFormatInput!" },
    },
    updatePressCoverage: {
      __type: "UpdatePressCoveragePayload",
      __args: { input: "UpdatePressCoverageInput!" },
    },
    updatePressRelease: {
      __type: "UpdatePressReleasePayload",
      __args: { input: "UpdatePressReleaseInput!" },
    },
    updatePro: {
      __type: "UpdateProPayload",
      __args: { input: "UpdateProInput!" },
    },
    updateProductCard: {
      __type: "UpdateProductCardPayload",
      __args: { input: "UpdateProductCardInput!" },
    },
    updateProductsService: {
      __type: "UpdateProductsServicePayload",
      __args: { input: "UpdateProductsServiceInput!" },
    },
    updateProject: {
      __type: "UpdateProjectPayload",
      __args: { input: "UpdateProjectInput!" },
    },
    updateSettings: {
      __type: "UpdateSettingsPayload",
      __args: { input: "UpdateSettingsInput!" },
    },
    updateTag: {
      __type: "UpdateTagPayload",
      __args: { input: "UpdateTagInput!" },
    },
    updateTeamMember: {
      __type: "UpdateTeamMemberPayload",
      __args: { input: "UpdateTeamMemberInput!" },
    },
    updateUser: {
      __type: "UpdateUserPayload",
      __args: { input: "UpdateUserInput!" },
    },
  },
  query: {
    __typename: { __type: "String!" },
    allSettings: { __type: "Settings" },
    atlasContentModelerSettingsSettings: {
      __type: "AtlasContentModelerSettingsSettings",
    },
    categories: {
      __type: "RootQueryToCategoryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToCategoryConnectionWhereArgs",
      },
    },
    category: {
      __type: "Category",
      __args: { id: "ID!", idType: "CategoryIdType" },
    },
    comment: { __type: "Comment", __args: { id: "ID!" } },
    comments: {
      __type: "RootQueryToCommentConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToCommentConnectionWhereArgs",
      },
    },
    contentNode: {
      __type: "ContentNode",
      __args: {
        asPreview: "Boolean",
        contentType: "ContentTypeEnum",
        id: "ID!",
        idType: "ContentNodeIdTypeEnum",
      },
    },
    contentNodes: {
      __type: "RootQueryToContentNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToContentNodeConnectionWhereArgs",
      },
    },
    contentType: {
      __type: "ContentType",
      __args: { id: "ID!", idType: "ContentTypeIdTypeEnum" },
    },
    contentTypes: {
      __type: "RootQueryToContentTypeConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    discussionSettings: { __type: "DiscussionSettings" },
    generalSettings: { __type: "GeneralSettings" },
    getFooter: { __type: "HCMSFooter" },
    getHeader: { __type: "HCMSHeader" },
    gfDraftEntry: {
      __type: "GfDraftEntry",
      __args: { id: "ID!", idType: "DraftEntryIdTypeEnum" },
    },
    gfEntries: {
      __type: "RootQueryToGfEntryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToGfEntryConnectionWhereArgs",
      },
    },
    gfEntry: {
      __type: "GfEntry",
      __args: { id: "ID!", idType: "EntryIdTypeEnum" },
    },
    gfForm: {
      __type: "GfForm",
      __args: { id: "ID!", idType: "FormIdTypeEnum" },
    },
    gfForms: {
      __type: "RootQueryToGfFormConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToGfFormConnectionWhereArgs",
      },
    },
    gfSettings: { __type: "GfSettings" },
    gfSubmittedEntries: {
      __type: "RootQueryToGfSubmittedEntryConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToGfSubmittedEntryConnectionWhereArgs",
      },
    },
    gfSubmittedEntry: {
      __type: "GfSubmittedEntry",
      __args: { id: "ID!", idType: "SubmittedEntryIdTypeEnum" },
    },
    mediaItem: {
      __type: "MediaItem",
      __args: { asPreview: "Boolean", id: "ID!", idType: "MediaItemIdType" },
    },
    mediaItemBy: {
      __type: "MediaItem",
      __args: { id: "ID", mediaItemId: "Int", slug: "String", uri: "String" },
    },
    mediaItems: {
      __type: "RootQueryToMediaItemConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToMediaItemConnectionWhereArgs",
      },
    },
    menu: {
      __type: "Menu",
      __args: { id: "ID!", idType: "MenuNodeIdTypeEnum" },
    },
    menuItem: {
      __type: "MenuItem",
      __args: { id: "ID!", idType: "MenuItemNodeIdTypeEnum" },
    },
    menuItems: {
      __type: "RootQueryToMenuItemConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToMenuItemConnectionWhereArgs",
      },
    },
    menus: {
      __type: "RootQueryToMenuConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToMenuConnectionWhereArgs",
      },
    },
    newEvent: {
      __type: "NewEvent",
      __args: { asPreview: "Boolean", id: "ID!", idType: "NewEventIdType" },
    },
    newEventBy: {
      __type: "NewEvent",
      __args: { id: "ID", newEventId: "Int", slug: "String", uri: "String" },
    },
    newEvents: {
      __type: "RootQueryToNewEventConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToNewEventConnectionWhereArgs",
      },
    },
    newMediaCenter: {
      __type: "NewMediaCenter",
      __args: { id: "ID!", idType: "NewMediaCenterIdType" },
    },
    newMediaCenters: {
      __type: "RootQueryToNewMediaCenterConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToNewMediaCenterConnectionWhereArgs",
      },
    },
    newPressCoverage: {
      __type: "NewPressCoverage",
      __args: {
        asPreview: "Boolean",
        id: "ID!",
        idType: "NewPressCoverageIdType",
      },
    },
    newPressCoverageBy: {
      __type: "NewPressCoverage",
      __args: {
        id: "ID",
        newPressCoverageId: "Int",
        slug: "String",
        uri: "String",
      },
    },
    newPressCoverages: {
      __type: "RootQueryToNewPressCoverageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToNewPressCoverageConnectionWhereArgs",
      },
    },
    newPressRelease: {
      __type: "NewPressRelease",
      __args: {
        asPreview: "Boolean",
        id: "ID!",
        idType: "NewPressReleaseIdType",
      },
    },
    newPressReleaseBy: {
      __type: "NewPressRelease",
      __args: {
        id: "ID",
        newPressReleaseId: "Int",
        slug: "String",
        uri: "String",
      },
    },
    newPressReleases: {
      __type: "RootQueryToNewPressReleaseConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToNewPressReleaseConnectionWhereArgs",
      },
    },
    node: { __type: "Node", __args: { id: "ID" } },
    nodeByUri: {
      __type: "UniformResourceIdentifiable",
      __args: { uri: "String!" },
    },
    page: {
      __type: "Page",
      __args: { asPreview: "Boolean", id: "ID!", idType: "PageIdType" },
    },
    pageBy: {
      __type: "Page",
      __args: { id: "ID", pageId: "Int", uri: "String" },
    },
    pages: {
      __type: "RootQueryToPageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPageConnectionWhereArgs",
      },
    },
    partner: {
      __type: "Partner",
      __args: { asPreview: "Boolean", id: "ID!", idType: "PartnerIdType" },
    },
    partnerBy: {
      __type: "Partner",
      __args: { id: "ID", partnerId: "Int", slug: "String", uri: "String" },
    },
    partners: {
      __type: "RootQueryToPartnerConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPartnerConnectionWhereArgs",
      },
    },
    plugin: { __type: "Plugin", __args: { id: "ID!" } },
    plugins: {
      __type: "RootQueryToPluginConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    post: {
      __type: "Post",
      __args: { asPreview: "Boolean", id: "ID!", idType: "PostIdType" },
    },
    postBy: {
      __type: "Post",
      __args: { id: "ID", postId: "Int", slug: "String", uri: "String" },
    },
    postFormat: {
      __type: "PostFormat",
      __args: { id: "ID!", idType: "PostFormatIdType" },
    },
    postFormats: {
      __type: "RootQueryToPostFormatConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPostFormatConnectionWhereArgs",
      },
    },
    posts: {
      __type: "RootQueryToPostConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPostConnectionWhereArgs",
      },
    },
    pressCoverage: {
      __type: "PressCoverage",
      __args: {
        asPreview: "Boolean",
        id: "ID!",
        idType: "PressCoverageIdType",
      },
    },
    pressCoverageBy: {
      __type: "PressCoverage",
      __args: {
        id: "ID",
        pressCoverageId: "Int",
        slug: "String",
        uri: "String",
      },
    },
    pressCoverages: {
      __type: "RootQueryToPressCoverageConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPressCoverageConnectionWhereArgs",
      },
    },
    pressRelease: {
      __type: "PressRelease",
      __args: { asPreview: "Boolean", id: "ID!", idType: "PressReleaseIdType" },
    },
    pressReleaseBy: {
      __type: "PressRelease",
      __args: {
        id: "ID",
        pressReleaseId: "Int",
        slug: "String",
        uri: "String",
      },
    },
    pressReleases: {
      __type: "RootQueryToPressReleaseConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToPressReleaseConnectionWhereArgs",
      },
    },
    pro: { __type: "Pro", __args: { id: "ID!", idType: "ProIdType" } },
    productCard: {
      __type: "ProductCard",
      __args: { asPreview: "Boolean", id: "ID!", idType: "ProductCardIdType" },
    },
    productCardBy: {
      __type: "ProductCard",
      __args: { id: "ID", productCardId: "Int", slug: "String", uri: "String" },
    },
    productCards: {
      __type: "RootQueryToProductCardConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToProductCardConnectionWhereArgs",
      },
    },
    productsService: {
      __type: "ProductsService",
      __args: {
        asPreview: "Boolean",
        id: "ID!",
        idType: "ProductsServiceIdType",
      },
    },
    productsServiceBy: {
      __type: "ProductsService",
      __args: { id: "ID", productsServiceId: "Int", uri: "String" },
    },
    productsServices: {
      __type: "RootQueryToProductsServiceConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToProductsServiceConnectionWhereArgs",
      },
    },
    project: {
      __type: "Project",
      __args: { asPreview: "Boolean", id: "ID!", idType: "ProjectIdType" },
    },
    projectBy: {
      __type: "Project",
      __args: { id: "ID", projectId: "Int", slug: "String", uri: "String" },
    },
    projects: {
      __type: "RootQueryToProjectConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToProjectConnectionWhereArgs",
      },
    },
    pros: {
      __type: "RootQueryToProConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToProConnectionWhereArgs",
      },
    },
    readingSettings: { __type: "ReadingSettings" },
    registeredScripts: {
      __type: "RootQueryToEnqueuedScriptConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    registeredStylesheets: {
      __type: "RootQueryToEnqueuedStylesheetConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    revisions: {
      __type: "RootQueryToContentRevisionUnionConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToContentRevisionUnionConnectionWhereArgs",
      },
    },
    tag: { __type: "Tag", __args: { id: "ID!", idType: "TagIdType" } },
    tags: {
      __type: "RootQueryToTagConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToTagConnectionWhereArgs",
      },
    },
    taxonomies: {
      __type: "RootQueryToTaxonomyConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    taxonomy: {
      __type: "Taxonomy",
      __args: { id: "ID!", idType: "TaxonomyIdTypeEnum" },
    },
    teamMember: {
      __type: "TeamMember",
      __args: { asPreview: "Boolean", id: "ID!", idType: "TeamMemberIdType" },
    },
    teamMemberBy: {
      __type: "TeamMember",
      __args: { id: "ID", slug: "String", teamMemberId: "Int", uri: "String" },
    },
    teamMembers: {
      __type: "RootQueryToTeamMemberConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToTeamMemberConnectionWhereArgs",
      },
    },
    termNode: {
      __type: "TermNode",
      __args: {
        id: "ID!",
        idType: "TermNodeIdTypeEnum",
        taxonomy: "TaxonomyEnum",
      },
    },
    terms: {
      __type: "RootQueryToTermNodeConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToTermNodeConnectionWhereArgs",
      },
    },
    theme: { __type: "Theme", __args: { id: "ID!" } },
    themes: {
      __type: "RootQueryToThemeConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    user: {
      __type: "User",
      __args: { id: "ID!", idType: "UserNodeIdTypeEnum" },
    },
    userRole: { __type: "UserRole", __args: { id: "ID!" } },
    userRoles: {
      __type: "RootQueryToUserRoleConnection",
      __args: { after: "String", before: "String", first: "Int", last: "Int" },
    },
    users: {
      __type: "RootQueryToUserConnection",
      __args: {
        after: "String",
        before: "String",
        first: "Int",
        last: "Int",
        where: "RootQueryToUserConnectionWhereArgs",
      },
    },
    viewer: { __type: "User" },
    writingSettings: { __type: "WritingSettings" },
  },
  subscription: {},
  [SchemaUnionsKey]: {
    FormField: [
      "AddressField",
      "CaptchaField",
      "CheckboxField",
      "ConsentField",
      "DateField",
      "EmailField",
      "FileUploadField",
      "HiddenField",
      "HtmlField",
      "ListField",
      "MultiSelectField",
      "NameField",
      "NumberField",
      "PageField",
      "PasswordField",
      "PhoneField",
      "PostCategoryCheckboxField",
      "PostCategoryMultiSelectField",
      "PostCategoryRadioField",
      "PostCategorySelectField",
      "PostContentField",
      "PostCustomCheckboxField",
      "PostCustomDateField",
      "PostCustomEmailField",
      "PostCustomFileuploadField",
      "PostCustomHiddenField",
      "PostCustomListField",
      "PostCustomMultiSelectField",
      "PostCustomNumberField",
      "PostCustomPhoneField",
      "PostCustomRadioField",
      "PostCustomSelectField",
      "PostCustomTextAreaField",
      "PostCustomTextField",
      "PostCustomTimeField",
      "PostCustomWebsiteField",
      "PostExcerptField",
      "PostImageField",
      "PostTagsCheckboxField",
      "PostTagsMultiSelectField",
      "PostTagsRadioField",
      "PostTagsSelectField",
      "PostTagsTextField",
      "PostTitleField",
      "RadioField",
      "SectionField",
      "SelectField",
      "SignatureField",
      "TextAreaField",
      "TextField",
      "TimeField",
      "WebsiteField",
    ],
    DatabaseIdentifier: [
      "Category",
      "Comment",
      "GfForm",
      "GfSubmittedEntry",
      "MediaItem",
      "Menu",
      "MenuItem",
      "NewEvent",
      "NewMediaCenter",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "PostFormat",
      "PressCoverage",
      "PressRelease",
      "Pro",
      "ProductCard",
      "ProductsService",
      "Project",
      "Tag",
      "TeamMember",
      "User",
    ],
    HierarchicalTermNode: ["Category", "NewMediaCenter", "Pro"],
    MenuItemLinkable: [
      "Category",
      "NewMediaCenter",
      "Page",
      "Post",
      "PressCoverage",
      "PressRelease",
      "Pro",
      "ProductsService",
      "Tag",
    ],
    Node: [
      "Category",
      "Comment",
      "CommentAuthor",
      "ContentType",
      "EnqueuedScript",
      "EnqueuedStylesheet",
      "GfDraftEntry",
      "GfForm",
      "GfSubmittedEntry",
      "MediaItem",
      "Menu",
      "MenuItem",
      "NewEvent",
      "NewMediaCenter",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Plugin",
      "Post",
      "PostFormat",
      "PressCoverage",
      "PressRelease",
      "Pro",
      "ProductCard",
      "ProductsService",
      "Project",
      "Tag",
      "Taxonomy",
      "TeamMember",
      "Theme",
      "User",
      "UserRole",
    ],
    TermNode: ["Category", "NewMediaCenter", "PostFormat", "Pro", "Tag"],
    UniformResourceIdentifiable: [
      "Category",
      "ContentType",
      "MediaItem",
      "NewEvent",
      "NewMediaCenter",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "PostFormat",
      "PressCoverage",
      "PressRelease",
      "Pro",
      "ProductCard",
      "ProductsService",
      "Project",
      "Tag",
      "TeamMember",
      "User",
    ],
    Commenter: ["CommentAuthor", "User"],
    ContentRevisionUnion: ["Page", "Post", "ProductsService"],
    ContentTemplate: ["DefaultTemplate"],
    EnqueuedAsset: ["EnqueuedScript", "EnqueuedStylesheet"],
    GfEntry: ["GfDraftEntry", "GfSubmittedEntry"],
    NodeWithForm: ["GfDraftEntry", "GfSubmittedEntry"],
    ContentNode: [
      "MediaItem",
      "NewEvent",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "PressCoverage",
      "PressRelease",
      "ProductCard",
      "ProductsService",
      "Project",
      "TeamMember",
    ],
    HierarchicalContentNode: ["MediaItem", "Page", "ProductsService"],
    NodeWithAuthor: [
      "MediaItem",
      "NewEvent",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "ProductCard",
      "Project",
      "TeamMember",
    ],
    NodeWithComments: ["MediaItem", "Page", "Post"],
    NodeWithTemplate: [
      "MediaItem",
      "NewEvent",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "PressCoverage",
      "PressRelease",
      "ProductCard",
      "ProductsService",
      "Project",
      "TeamMember",
    ],
    NodeWithTitle: [
      "MediaItem",
      "NewEvent",
      "NewPressCoverage",
      "NewPressRelease",
      "Page",
      "Partner",
      "Post",
      "PressCoverage",
      "PressRelease",
      "ProductCard",
      "ProductsService",
      "Project",
      "TeamMember",
    ],
    MenuItemObjectUnion: [
      "Category",
      "NewMediaCenter",
      "Page",
      "Post",
      "PressCoverage",
      "PressRelease",
      "Pro",
      "ProductsService",
      "Tag",
    ],
    NodeWithContentEditor: [
      "Page",
      "Post",
      "PressCoverage",
      "PressRelease",
      "ProductsService",
    ],
    NodeWithFeaturedImage: [
      "Page",
      "Partner",
      "Post",
      "PressCoverage",
      "PressRelease",
      "ProductsService",
      "TeamMember",
    ],
    NodeWithPageAttributes: ["Page", "ProductsService"],
    NodeWithRevisions: ["Page", "Post", "ProductsService"],
    AcfFieldGroup: [
      "Page_Standardpage",
      "Page_Successstoriesacf",
      "Page_Successstoriesacf_carouselSlider",
      "Page_Successstoriesacf_pageLargeSlider",
      "Page_Successstoriesacf_suggestedResources",
      "Page_Threecolumnstaticpage",
      "Page_Threecolumnstaticpage_Banner",
      "Page_Threecolumnstaticpage_cards",
      "ProductsService_Standardpage",
    ],
    NodeWithExcerpt: ["Post"],
    NodeWithTrackbacks: ["Post"],
    PostCategoryField: [
      "PostCategoryCheckboxField",
      "PostCategoryMultiSelectField",
      "PostCategoryRadioField",
      "PostCategorySelectField",
    ],
    PostCustomField: [
      "PostCustomCheckboxField",
      "PostCustomDateField",
      "PostCustomEmailField",
      "PostCustomFileuploadField",
      "PostCustomHiddenField",
      "PostCustomListField",
      "PostCustomMultiSelectField",
      "PostCustomNumberField",
      "PostCustomPhoneField",
      "PostCustomRadioField",
      "PostCustomSelectField",
      "PostCustomTextAreaField",
      "PostCustomTextField",
      "PostCustomTimeField",
      "PostCustomWebsiteField",
    ],
    PostTagsField: [
      "PostTagsCheckboxField",
      "PostTagsMultiSelectField",
      "PostTagsRadioField",
      "PostTagsSelectField",
      "PostTagsTextField",
    ],
  },
} as const;

/**
 * A Field Group registered by ACF
 */
export interface AcfFieldGroup {
  __typename?:
    | "Page_Standardpage"
    | "Page_Successstoriesacf"
    | "Page_Successstoriesacf_carouselSlider"
    | "Page_Successstoriesacf_pageLargeSlider"
    | "Page_Successstoriesacf_suggestedResources"
    | "Page_Threecolumnstaticpage"
    | "Page_Threecolumnstaticpage_Banner"
    | "Page_Threecolumnstaticpage_cards"
    | "ProductsService_Standardpage";
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  $on: $AcfFieldGroup;
}

/**
 * ACF Link field
 */
export interface AcfLink {
  __typename?: "AcfLink";
  /**
   * The target of the link (_blank, etc)
   */
  target?: Maybe<ScalarsEnums["String"]>;
  /**
   * The title of the link
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * The url of the link
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface AddressField {
  __typename?: "AddressField";
  /**
   * Determines the type of address to be displayed.
   */
  addressType?: Maybe<ScalarsEnums["AddressFieldTypeEnum"]>;
  /**
   * Address field value.
   */
  addressValues?: Maybe<AddressFieldValue>;
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * The field id of the field being used as the copy source.
   */
  copyValuesOptionFieldId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The label that appears next to the copy values option when the form is displayed. The default value is \“Same as previous\”.
   */
  copyValuesOptionLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the country that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;INTERATIONAL&quot;.
   */
  defaultCountry?: Maybe<ScalarsEnums["AddressFieldCountryEnum"]>;
  /**
   * Contains the province that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;CANADA&quot;.
   */
  defaultProvince?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the state that will be selected by default. Only applicable when &quot;addressType&quot; is set to &quot;US&quot;.
   */
  defaultState?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the address field.
   */
  inputs?: Maybe<Array<Maybe<AddressInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Indicates whether the copy values option can be used. This option allows users to skip filling out the field and use the same values as another. For example, if the mailing and billing address are the same.
   */
  shouldCopyValuesOption?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The individual properties for each element of the address value field.
 */
export interface AddressFieldValue {
  __typename?: "AddressFieldValue";
  /**
   * Address city.
   */
  city?: Maybe<ScalarsEnums["String"]>;
  /**
   * Address country.
   */
  country?: Maybe<ScalarsEnums["AddressFieldCountryEnum"]>;
  /**
   * Address line two.
   */
  lineTwo?: Maybe<ScalarsEnums["String"]>;
  /**
   * Address state/region/province name.
   */
  state?: Maybe<ScalarsEnums["String"]>;
  /**
   * Street address.
   */
  street?: Maybe<ScalarsEnums["String"]>;
  /**
   * Address zip code.
   */
  zip?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Address input values.
 */
export interface AddressInputProperty {
  __typename?: "AddressInputProperty";
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Whether or not this field should be hidden.
   */
  isHidden?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Key used to identify this input.
   */
  key?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The atlasContentModelerSettings setting type
 */
export interface AtlasContentModelerSettingsSettings {
  __typename?: "AtlasContentModelerSettingsSettings";
  /**
   * The string Settings Group
   */
  atlasContentModelerUsageTracking?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Avatars are profile images for users. WordPress by default uses the Gravatar service to host and fetch avatars from.
 */
export interface Avatar {
  __typename?: "Avatar";
  /**
   * URL for the default image or a default type. Accepts &#039;404&#039; (return a 404 instead of a default image), &#039;retro&#039; (8bit), &#039;monsterid&#039; (monster), &#039;wavatar&#039; (cartoon face), &#039;indenticon&#039; (the &#039;quilt&#039;), &#039;mystery&#039;, &#039;mm&#039;, or &#039;mysteryman&#039; (The Oyster Man), &#039;blank&#039; (transparent GIF), or &#039;gravatar_default&#039; (the Gravatar logo).
   */
  default?: Maybe<ScalarsEnums["String"]>;
  /**
   * HTML attributes to insert in the IMG element. Is not sanitized.
   */
  extraAttr?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether to always show the default image, never the Gravatar.
   */
  forceDefault?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the avatar was successfully found.
   */
  foundAvatar?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Height of the avatar image.
   */
  height?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * What rating to display avatars up to. Accepts &#039;G&#039;, &#039;PG&#039;, &#039;R&#039;, &#039;X&#039;, and are judged in that order.
   */
  rating?: Maybe<ScalarsEnums["String"]>;
  /**
   * Type of url scheme to use. Typically HTTP vs. HTTPS.
   */
  scheme?: Maybe<ScalarsEnums["String"]>;
  /**
   * The size of the avatar in pixels. A value of 96 will match a 96px x 96px gravatar image.
   */
  size?: Maybe<ScalarsEnums["Int"]>;
  /**
   * URL for the gravatar image source.
   */
  url?: Maybe<ScalarsEnums["String"]>;
  /**
   * Width of the avatar image.
   */
  width?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface CaptchaField {
  __typename?: "CaptchaField";
  /**
   * The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
   */
  captchaBadgePosition?: Maybe<ScalarsEnums["CaptchaFieldBadgePositionEnum"]>;
  /**
   * The language used when the captcha is displayed. This property is available when the captchaType is “captcha”, the default. The possible values are the language codes used by WordPress.
   */
  captchaLanguage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the theme to be used for the reCAPTCHA field. Only applicable to the recaptcha captcha type.
   */
  captchaTheme?: Maybe<ScalarsEnums["CaptchaFieldThemeEnum"]>;
  /**
   * Determines the type of CAPTCHA field to be used.
   */
  captchaType?: Maybe<ScalarsEnums["CaptchaFieldTypeEnum"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Determines the image’s background color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
   */
  simpleCaptchaBackgroundColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the image’s font color, in HEX format (i.e. #CCCCCC). Only applicable to simple_captcha and math captcha types.
   */
  simpleCaptchaFontColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the CAPTCHA image size. Only applicable to simple_captcha and math captcha types.
   */
  simpleCaptchaSize?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The category type
 */
export interface Category {
  __typename?: "Category";
  /**
   * The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<CategoryToAncestorsCategoryConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  categoryId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the category type and the category type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<CategoryToCategoryConnectionWhereArgs>;
  }) => Maybe<CategoryToCategoryConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the category type and the ContentNode type
   */
  contentNodes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<CategoryToContentNodeConnectionWhereArgs>;
  }) => Maybe<CategoryToContentNodeConnection>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the category type and the category type
   */
  parent?: Maybe<CategoryToParentCategoryConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Connection between the category type and the post type
   */
  posts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<CategoryToPostConnectionWhereArgs>;
  }) => Maybe<CategoryToPostConnection>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the category type and the Taxonomy type
   */
  taxonomy?: Maybe<CategoryToTaxonomyConnectionEdge>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the category type and the category type
 */
export interface CategoryToAncestorsCategoryConnection {
  __typename?: "CategoryToAncestorsCategoryConnection";
  /**
   * Edges for the CategoryToAncestorsCategoryConnection connection
   */
  edges?: Maybe<Array<Maybe<CategoryToAncestorsCategoryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Category>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface CategoryToAncestorsCategoryConnectionEdge {
  __typename?: "CategoryToAncestorsCategoryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Category>;
}

/**
 * Connection between the category type and the category type
 */
export interface CategoryToCategoryConnection {
  __typename?: "CategoryToCategoryConnection";
  /**
   * Edges for the CategoryToCategoryConnection connection
   */
  edges?: Maybe<Array<Maybe<CategoryToCategoryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Category>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface CategoryToCategoryConnectionEdge {
  __typename?: "CategoryToCategoryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Category>;
}

/**
 * Connection between the category type and the ContentNode type
 */
export interface CategoryToContentNodeConnection {
  __typename?: "CategoryToContentNodeConnection";
  /**
   * Edges for the CategoryToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<CategoryToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface CategoryToContentNodeConnectionEdge {
  __typename?: "CategoryToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the category type and the category type
 */
export interface CategoryToParentCategoryConnectionEdge {
  __typename?: "CategoryToParentCategoryConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Category>;
}

/**
 * Connection between the category type and the post type
 */
export interface CategoryToPostConnection {
  __typename?: "CategoryToPostConnection";
  /**
   * Edges for the CategoryToPostConnection connection
   */
  edges?: Maybe<Array<Maybe<CategoryToPostConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface CategoryToPostConnectionEdge {
  __typename?: "CategoryToPostConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the category type and the Taxonomy type
 */
export interface CategoryToTaxonomyConnectionEdge {
  __typename?: "CategoryToTaxonomyConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Taxonomy>;
}

/**
 * A Gravity Forms   field.
 */
export interface CheckboxField {
  __typename?: "CheckboxField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Checkbox field value.
   */
  checkboxValues?: Maybe<Array<Maybe<CheckboxFieldValue>>>;
  /**
   * The available choices for the checkbox field.
   */
  choices?: Maybe<Array<Maybe<CheckboxFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the \&quot;select all\&quot; choice should be displayed.
   */
  hasSelectAll?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the checkbox field.
   */
  inputs?: Maybe<Array<Maybe<CheckboxInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Checkbox choice values.
 */
export interface CheckboxFieldChoice {
  __typename?: "CheckboxFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The individual properties for each element of the Checkbox value field.
 */
export interface CheckboxFieldValue {
  __typename?: "CheckboxFieldValue";
  /**
   * Input ID.
   */
  inputId?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Input text.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * Input value.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Checkbox input values.
 */
export interface CheckboxInputProperty {
  __typename?: "CheckboxInputProperty";
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Comment object
 */
export interface Comment {
  __typename?: "Comment";
  /**
   * User agent used to post the comment. This field is equivalent to WP_Comment-&gt;comment_agent and the value matching the &quot;comment_agent&quot; column in SQL.
   */
  agent?: Maybe<ScalarsEnums["String"]>;
  /**
   * The approval status of the comment. This field is equivalent to WP_Comment-&gt;comment_approved and the value matching the &quot;comment_approved&quot; column in SQL.
   */
  approved?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The author of the comment
   */
  author?: Maybe<CommentToCommenterConnectionEdge>;
  /**
   * IP address for the author. This field is equivalent to WP_Comment-&gt;comment_author_IP and the value matching the &quot;comment_author_IP&quot; column in SQL.
   */
  authorIp?: Maybe<ScalarsEnums["String"]>;
  /**
   * ID for the comment, unique among comments.
   * @deprecated Deprecated in favor of databaseId
   */
  commentId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the Comment type and the ContentNode type
   */
  commentedOn?: Maybe<CommentToContentNodeConnectionEdge>;
  /**
   * Content of the comment. This field is equivalent to WP_Comment-&gt;comment_content and the value matching the &quot;comment_content&quot; column in SQL.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Date the comment was posted in local time. This field is equivalent to WP_Comment-&gt;date and the value matching the &quot;date&quot; column in SQL.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * Date the comment was posted in GMT. This field is equivalent to WP_Comment-&gt;date_gmt and the value matching the &quot;date_gmt&quot; column in SQL.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier for the comment object
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Karma value for the comment. This field is equivalent to WP_Comment-&gt;comment_karma and the value matching the &quot;comment_karma&quot; column in SQL.
   */
  karma?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the Comment type and the Comment type
   */
  parent: (args?: {
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<CommentToParentCommentConnectionWhereArgs>;
  }) => Maybe<CommentToParentCommentConnectionEdge>;
  /**
   * The database id of the parent comment node or null if it is the root comment
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent comment node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Connection between the Comment type and the Comment type
   */
  replies: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<CommentToCommentConnectionWhereArgs>;
  }) => Maybe<CommentToCommentConnection>;
  /**
   * Type of comment. This field is equivalent to WP_Comment-&gt;comment_type and the value matching the &quot;comment_type&quot; column in SQL.
   */
  type?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Comment Author object
 */
export interface CommentAuthor {
  __typename?: "CommentAuthor";
  /**
   * Identifies the primary key from the database.
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The email for the comment author
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier for the comment author object
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The name for the comment author.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The url the comment author.
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the Comment type and the Comment type
 */
export interface CommentToCommentConnection {
  __typename?: "CommentToCommentConnection";
  /**
   * Edges for the CommentToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<CommentToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface CommentToCommentConnectionEdge {
  __typename?: "CommentToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Connection between the Comment type and the Commenter type
 */
export interface CommentToCommenterConnectionEdge {
  __typename?: "CommentToCommenterConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Commenter>;
}

/**
 * Connection between the Comment type and the ContentNode type
 */
export interface CommentToContentNodeConnectionEdge {
  __typename?: "CommentToContentNodeConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the Comment type and the Comment type
 */
export interface CommentToParentCommentConnectionEdge {
  __typename?: "CommentToParentCommentConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Comment>;
}

/**
 * The author of a comment
 */
export interface Commenter {
  __typename?: "CommentAuthor" | "User";
  /**
   * Identifies the primary key from the database.
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The email address of the author of a comment.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier for the comment author.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the author information is considered restricted. (not fully public)
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The name of the author of a comment.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The url of the author of a comment.
   */
  url?: Maybe<ScalarsEnums["String"]>;
  $on: $Commenter;
}

/**
 * Gravity Forms conditional logic.
 */
export interface ConditionalLogic {
  __typename?: "ConditionalLogic";
  /**
   * The type of action the conditional logic will perform.
   */
  actionType?: Maybe<ScalarsEnums["ConditionalLogicActionTypeEnum"]>;
  /**
   * Determines how to the rules should be evaluated.
   */
  logicType?: Maybe<ScalarsEnums["ConditionalLogicLogicTypeEnum"]>;
  /**
   * Conditional logic rules.
   */
  rules?: Maybe<Array<Maybe<ConditionalLogicRule>>>;
}

/**
 * Gravity Forms conditional logic rule.
 */
export interface ConditionalLogicRule {
  __typename?: "ConditionalLogicRule";
  /**
   * Target field Id. Field that will have it’s value compared with the value property to determine if this rule is a match.
   */
  fieldId?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Operator to be used when evaluating this rule.
   */
  operator?: Maybe<ScalarsEnums["FormRuleOperatorEnum"]>;
  /**
   * The value to compare with field specified by fieldId.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * GraphQL representation of WordPress Conditional Tags.
 */
export interface ConditionalTags {
  __typename?: "ConditionalTags";
  /**
   * Determines whether the query is for an existing archive page.
   */
  isArchive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing attachment page.
   */
  isAttachment?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing author archive page.
   */
  isAuthor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing category archive page.
   */
  isCategory?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing date archive.
   */
  isDate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing day archive.
   */
  isDay?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for the front page of the site.
   */
  isFrontPage?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for the blog homepage.
   */
  isHome?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing month archive.
   */
  isMonth?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether this site has more than one author.
   */
  isMultiAuthor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing single page.
   */
  isPage?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether currently in a page template.
   */
  isPageTemplate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing post type archive page.
   */
  isPostTypeArchive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for a post or page preview.
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for the Privacy Policy page.
   */
  isPrivacyPolicy?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for a search.
   */
  isSearch?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing single post.
   */
  isSingle?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing single post of any post type (post, attachment, page, custom post types).
   */
  isSingular?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether a post is sticky.
   */
  isSticky?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing tag archive page.
   */
  isTag?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing custom taxonomy archive page.
   */
  isTax?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the query is for an existing year archive.
   */
  isYear?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface ConsentField {
  __typename?: "ConsentField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Text of the consent checkbox.
   */
  checkboxLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * Consent field value. This is `true` when consent is given, `false` when it is not.
   */
  consentValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Nodes used to manage content
 */
export interface ContentNode {
  __typename?:
    | "MediaItem"
    | "NewEvent"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "TeamMember";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The ID of the node in the database.
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  $on: $ContentNode;
}

/**
 * Connection between the ContentNode type and the ContentType type
 */
export interface ContentNodeToContentTypeConnectionEdge {
  __typename?: "ContentNodeToContentTypeConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ContentType>;
}

/**
 * Connection between the ContentNode type and the User type
 */
export interface ContentNodeToEditLastConnectionEdge {
  __typename?: "ContentNodeToEditLastConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<User>;
}

/**
 * Connection between the ContentNode type and the User type
 */
export interface ContentNodeToEditLockConnectionEdge {
  __typename?: "ContentNodeToEditLockConnectionEdge";
  /**
   * The timestamp for when the node was last edited
   */
  lockTimestamp?: Maybe<ScalarsEnums["String"]>;
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<User>;
}

/**
 * Connection between the ContentNode type and the EnqueuedScript type
 */
export interface ContentNodeToEnqueuedScriptConnection {
  __typename?: "ContentNodeToEnqueuedScriptConnection";
  /**
   * Edges for the ContentNodeToEnqueuedScriptConnection connection
   */
  edges?: Maybe<Array<Maybe<ContentNodeToEnqueuedScriptConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ContentNodeToEnqueuedScriptConnectionEdge {
  __typename?: "ContentNodeToEnqueuedScriptConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedScript>;
}

/**
 * Connection between the ContentNode type and the EnqueuedStylesheet type
 */
export interface ContentNodeToEnqueuedStylesheetConnection {
  __typename?: "ContentNodeToEnqueuedStylesheetConnection";
  /**
   * Edges for the ContentNodeToEnqueuedStylesheetConnection connection
   */
  edges?: Maybe<Array<Maybe<ContentNodeToEnqueuedStylesheetConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ContentNodeToEnqueuedStylesheetConnectionEdge {
  __typename?: "ContentNodeToEnqueuedStylesheetConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedStylesheet>;
}

/**
 * A union of Content Node Types that support revisions
 */
export interface ContentRevisionUnion {
  __typename?: "Page" | "Post" | "ProductsService";
  $on: $ContentRevisionUnion;
}

/**
 * The template assigned to a node of content
 */
export interface ContentTemplate {
  __typename?: "DefaultTemplate";
  /**
   * The name of the template
   */
  templateName?: Maybe<ScalarsEnums["String"]>;
  $on: $ContentTemplate;
}

/**
 * An Post Type object
 */
export interface ContentType {
  __typename?: "ContentType";
  /**
   * Whether this content type should can be exported.
   */
  canExport?: Maybe<ScalarsEnums["Boolean"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentType type and the Taxonomy type
   */
  connectedTaxonomies: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentTypeToTaxonomyConnection>;
  /**
   * Connection between the ContentType type and the ContentNode type
   */
  contentNodes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<ContentTypeToContentNodeConnectionWhereArgs>;
  }) => Maybe<ContentTypeToContentNodeConnection>;
  /**
   * Whether content of this type should be deleted when the author of it is deleted from the system.
   */
  deleteWithUser?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Description of the content type.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether to exclude nodes of this content type from front end search results.
   */
  excludeFromSearch?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The plural name of the content type within the GraphQL Schema.
   */
  graphqlPluralName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The singular name of the content type within the GraphQL Schema.
   */
  graphqlSingleName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether this content type should have archives. Content archives are generated by type and by date.
   */
  hasArchive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the content type is hierarchical, for example pages.
   */
  hierarchical?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The globally unique identifier of the post-type object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether this page is set to the static front page.
   */
  isFrontPage: ScalarsEnums["Boolean"];
  /**
   * Whether this page is set to the blog posts page.
   */
  isPostsPage: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * Display name of the content type.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Details about the content type labels.
   */
  labels?: Maybe<PostTypeLabelDetails>;
  /**
   * The name of the icon file to display as a menu icon.
   */
  menuIcon?: Maybe<ScalarsEnums["String"]>;
  /**
   * The position of this post type in the menu. Only applies if show_in_menu is true.
   */
  menuPosition?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The internal name of the post type. This should not be used for display purposes.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether a content type is intended for use publicly either via the admin interface or by front-end users. While the default settings of exclude_from_search, publicly_queryable, show_ui, and show_in_nav_menus are inherited from public, each does not rely on this relationship and controls a very specific intention.
   */
  public?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether queries can be performed on the front end for the content type as part of parse_request().
   */
  publiclyQueryable?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Name of content type to display in REST API &quot;wp/v2&quot; namespace.
   */
  restBase?: Maybe<ScalarsEnums["String"]>;
  /**
   * The REST Controller class assigned to handling this content type.
   */
  restControllerClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Makes this content type available via the admin bar.
   */
  showInAdminBar?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to add the content type to the GraphQL Schema.
   */
  showInGraphql?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Where to show the content type in the admin menu. To work, $show_ui must be true. If true, the post type is shown in its own top level menu. If false, no menu is shown. If a string of an existing top level menu (eg. &quot;tools.php&quot; or &quot;edit.php?post_type=page&quot;), the post type will be placed as a sub-menu of that.
   */
  showInMenu?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Makes this content type available for selection in navigation menus.
   */
  showInNavMenus?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the content type is associated with a route under the the REST API &quot;wp/v2&quot; namespace.
   */
  showInRest?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to generate and allow a UI for managing this content type in the admin.
   */
  showUi?: Maybe<ScalarsEnums["Boolean"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the ContentType type and the ContentNode type
 */
export interface ContentTypeToContentNodeConnection {
  __typename?: "ContentTypeToContentNodeConnection";
  /**
   * Edges for the ContentTypeToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<ContentTypeToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ContentTypeToContentNodeConnectionEdge {
  __typename?: "ContentTypeToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the ContentType type and the Taxonomy type
 */
export interface ContentTypeToTaxonomyConnection {
  __typename?: "ContentTypeToTaxonomyConnection";
  /**
   * Edges for the ContentTypeToTaxonomyConnection connection
   */
  edges?: Maybe<Array<Maybe<ContentTypeToTaxonomyConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Taxonomy>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ContentTypeToTaxonomyConnectionEdge {
  __typename?: "ContentTypeToTaxonomyConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Taxonomy>;
}

/**
 * The payload for the createCategory mutation
 */
export interface CreateCategoryPayload {
  __typename?: "CreateCategoryPayload";
  /**
   * The created category
   */
  category?: Maybe<Category>;
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the createComment mutation
 */
export interface CreateCommentPayload {
  __typename?: "CreateCommentPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The comment that was created
   */
  comment?: Maybe<Comment>;
  /**
   * Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * The payload for the createMediaItem mutation
 */
export interface CreateMediaItemPayload {
  __typename?: "CreateMediaItemPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The MediaItem object mutation type.
   */
  mediaItem?: Maybe<MediaItem>;
}

/**
 * The payload for the createNewEvent mutation
 */
export interface CreateNewEventPayload {
  __typename?: "CreateNewEventPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newEvent?: Maybe<NewEvent>;
}

/**
 * The payload for the createNewMediaCenter mutation
 */
export interface CreateNewMediaCenterPayload {
  __typename?: "CreateNewMediaCenterPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created newmediacenter
   */
  newMediaCenter?: Maybe<NewMediaCenter>;
}

/**
 * The payload for the createNewPressCoverage mutation
 */
export interface CreateNewPressCoveragePayload {
  __typename?: "CreateNewPressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newPressCoverage?: Maybe<NewPressCoverage>;
}

/**
 * The payload for the createNewPressRelease mutation
 */
export interface CreateNewPressReleasePayload {
  __typename?: "CreateNewPressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newPressRelease?: Maybe<NewPressRelease>;
}

/**
 * The payload for the createPage mutation
 */
export interface CreatePagePayload {
  __typename?: "CreatePagePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  page?: Maybe<Page>;
}

/**
 * The payload for the createPartner mutation
 */
export interface CreatePartnerPayload {
  __typename?: "CreatePartnerPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  partner?: Maybe<Partner>;
}

/**
 * The payload for the createPostFormat mutation
 */
export interface CreatePostFormatPayload {
  __typename?: "CreatePostFormatPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created post_format
   */
  postFormat?: Maybe<PostFormat>;
}

/**
 * The payload for the createPost mutation
 */
export interface CreatePostPayload {
  __typename?: "CreatePostPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  post?: Maybe<Post>;
}

/**
 * The payload for the createPressCoverage mutation
 */
export interface CreatePressCoveragePayload {
  __typename?: "CreatePressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  pressCoverage?: Maybe<PressCoverage>;
}

/**
 * The payload for the createPressRelease mutation
 */
export interface CreatePressReleasePayload {
  __typename?: "CreatePressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  pressRelease?: Maybe<PressRelease>;
}

/**
 * The payload for the createPro mutation
 */
export interface CreateProPayload {
  __typename?: "CreateProPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created pro
   */
  pro?: Maybe<Pro>;
}

/**
 * The payload for the createProductCard mutation
 */
export interface CreateProductCardPayload {
  __typename?: "CreateProductCardPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  productCard?: Maybe<ProductCard>;
}

/**
 * The payload for the createProductsService mutation
 */
export interface CreateProductsServicePayload {
  __typename?: "CreateProductsServicePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  productsService?: Maybe<ProductsService>;
}

/**
 * The payload for the createProject mutation
 */
export interface CreateProjectPayload {
  __typename?: "CreateProjectPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  project?: Maybe<Project>;
}

/**
 * The payload for the createTag mutation
 */
export interface CreateTagPayload {
  __typename?: "CreateTagPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created post_tag
   */
  tag?: Maybe<Tag>;
}

/**
 * The payload for the createTeamMember mutation
 */
export interface CreateTeamMemberPayload {
  __typename?: "CreateTeamMemberPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  teamMember?: Maybe<TeamMember>;
}

/**
 * The payload for the createUser mutation
 */
export interface CreateUserPayload {
  __typename?: "CreateUserPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The User object mutation type.
   */
  user?: Maybe<User>;
}

/**
 * Object that can be identified with a Database ID
 */
export interface DatabaseIdentifier {
  __typename?:
    | "Category"
    | "Comment"
    | "GfForm"
    | "GfSubmittedEntry"
    | "MediaItem"
    | "Menu"
    | "MenuItem"
    | "NewEvent"
    | "NewMediaCenter"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "PostFormat"
    | "PressCoverage"
    | "PressRelease"
    | "Pro"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "Tag"
    | "TeamMember"
    | "User";
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  $on: $DatabaseIdentifier;
}

/**
 * A Gravity Forms   field.
 */
export interface DateField {
  __typename?: "DateField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines how the date field displays it’s calendar icon.
   */
  calendarIconType?: Maybe<ScalarsEnums["FormFieldCalendarIconTypeEnum"]>;
  /**
   * Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom.
   */
  calendarIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines how the date is displayed.
   */
  dateFormat?: Maybe<ScalarsEnums["DateFieldFormatEnum"]>;
  /**
   * The type of date field to display.
   */
  dateType?: Maybe<ScalarsEnums["DateFieldTypeEnum"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the date field.
   */
  inputs?: Maybe<Array<Maybe<DateInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Date input values.
 */
export interface DateInputProperty {
  __typename?: "DateInputProperty";
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The template assigned to the node
 */
export interface DefaultTemplate {
  __typename?: "DefaultTemplate";
  /**
   * The name of the template
   */
  templateName?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the deleteCategory mutation
 */
export interface DeleteCategoryPayload {
  __typename?: "DeleteCategoryPayload";
  /**
   * The deteted term object
   */
  category?: Maybe<Category>;
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
}

/**
 * The payload for the deleteComment mutation
 */
export interface DeleteCommentPayload {
  __typename?: "DeleteCommentPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The deleted comment object
   */
  comment?: Maybe<Comment>;
  /**
   * The deleted comment ID
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
}

/**
 * The payload for the deleteGfDraftEntry mutation
 */
export interface DeleteGfDraftEntryPayload {
  __typename?: "DeleteGfDraftEntryPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The global ID of the draft entry that was deleted.
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The draft entry object before it was deleted.
   */
  draftEntry?: Maybe<GfDraftEntry>;
}

/**
 * The payload for the deleteGfEntry mutation
 */
export interface DeleteGfEntryPayload {
  __typename?: "DeleteGfEntryPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The global ID of the draft entry that was deleted.
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The entry object before it was deleted.
   */
  entry?: Maybe<GfSubmittedEntry>;
}

/**
 * The payload for the deleteMediaItem mutation
 */
export interface DeleteMediaItemPayload {
  __typename?: "DeleteMediaItemPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted mediaItem
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The mediaItem before it was deleted
   */
  mediaItem?: Maybe<MediaItem>;
}

/**
 * The payload for the deleteNewEvent mutation
 */
export interface DeleteNewEventPayload {
  __typename?: "DeleteNewEventPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  newEvent?: Maybe<NewEvent>;
}

/**
 * The payload for the deleteNewMediaCenter mutation
 */
export interface DeleteNewMediaCenterPayload {
  __typename?: "DeleteNewMediaCenterPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The deteted term object
   */
  newMediaCenter?: Maybe<NewMediaCenter>;
}

/**
 * The payload for the deleteNewPressCoverage mutation
 */
export interface DeleteNewPressCoveragePayload {
  __typename?: "DeleteNewPressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  newPressCoverage?: Maybe<NewPressCoverage>;
}

/**
 * The payload for the deleteNewPressRelease mutation
 */
export interface DeleteNewPressReleasePayload {
  __typename?: "DeleteNewPressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  newPressRelease?: Maybe<NewPressRelease>;
}

/**
 * The payload for the deletePage mutation
 */
export interface DeletePagePayload {
  __typename?: "DeletePagePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  page?: Maybe<Page>;
}

/**
 * The payload for the deletePartner mutation
 */
export interface DeletePartnerPayload {
  __typename?: "DeletePartnerPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  partner?: Maybe<Partner>;
}

/**
 * The payload for the deletePostFormat mutation
 */
export interface DeletePostFormatPayload {
  __typename?: "DeletePostFormatPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The deteted term object
   */
  postFormat?: Maybe<PostFormat>;
}

/**
 * The payload for the deletePost mutation
 */
export interface DeletePostPayload {
  __typename?: "DeletePostPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  post?: Maybe<Post>;
}

/**
 * The payload for the deletePressCoverage mutation
 */
export interface DeletePressCoveragePayload {
  __typename?: "DeletePressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  pressCoverage?: Maybe<PressCoverage>;
}

/**
 * The payload for the deletePressRelease mutation
 */
export interface DeletePressReleasePayload {
  __typename?: "DeletePressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  pressRelease?: Maybe<PressRelease>;
}

/**
 * The payload for the deletePro mutation
 */
export interface DeleteProPayload {
  __typename?: "DeleteProPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The deteted term object
   */
  pro?: Maybe<Pro>;
}

/**
 * The payload for the deleteProductCard mutation
 */
export interface DeleteProductCardPayload {
  __typename?: "DeleteProductCardPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  productCard?: Maybe<ProductCard>;
}

/**
 * The payload for the deleteProductsService mutation
 */
export interface DeleteProductsServicePayload {
  __typename?: "DeleteProductsServicePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  productsService?: Maybe<ProductsService>;
}

/**
 * The payload for the deleteProject mutation
 */
export interface DeleteProjectPayload {
  __typename?: "DeleteProjectPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  project?: Maybe<Project>;
}

/**
 * The payload for the deleteTag mutation
 */
export interface DeleteTagPayload {
  __typename?: "DeleteTagPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The deteted term object
   */
  tag?: Maybe<Tag>;
}

/**
 * The payload for the deleteTeamMember mutation
 */
export interface DeleteTeamMemberPayload {
  __typename?: "DeleteTeamMemberPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the deleted object
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The object before it was deleted
   */
  teamMember?: Maybe<TeamMember>;
}

/**
 * The payload for the deleteUser mutation
 */
export interface DeleteUserPayload {
  __typename?: "DeleteUserPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the user that you just deleted
   */
  deletedId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The deleted user object
   */
  user?: Maybe<User>;
}

/**
 * The discussion setting type
 */
export interface DiscussionSettings {
  __typename?: "DiscussionSettings";
  /**
   * Allow people to submit comments on new posts.
   */
  defaultCommentStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Allow link notifications from other blogs (pingbacks and trackbacks) on new articles.
   */
  defaultPingStatus?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface EmailField {
  __typename?: "EmailField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the Confirm Email field is active.
   */
  hasEmailConfirmation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the email field.
   */
  inputs?: Maybe<Array<Maybe<EmailInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Email input values.
 */
export interface EmailInputProperty {
  __typename?: "EmailInputProperty";
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Asset enqueued by the CMS
 */
export interface EnqueuedAsset {
  __typename?: "EnqueuedScript" | "EnqueuedStylesheet";
  /**
   * @todo
   */
  args?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Dependencies needed to use this asset
   */
  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Extra information needed for the script
   */
  extra?: Maybe<ScalarsEnums["String"]>;
  /**
   * The handle of the enqueued asset
   */
  handle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the enqueued asset
   */
  id: ScalarsEnums["ID"];
  /**
   * The source of the asset
   */
  src?: Maybe<ScalarsEnums["String"]>;
  /**
   * The version of the enqueued asset
   */
  version?: Maybe<ScalarsEnums["String"]>;
  $on: $EnqueuedAsset;
}

/**
 * Script enqueued by the CMS
 */
export interface EnqueuedScript {
  __typename?: "EnqueuedScript";
  /**
   * @todo
   */
  args?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Dependencies needed to use this asset
   */
  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Extra information needed for the script
   */
  extra?: Maybe<ScalarsEnums["String"]>;
  /**
   * The handle of the enqueued asset
   */
  handle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the enqueued asset
   */
  id: ScalarsEnums["ID"];
  /**
   * The source of the asset
   */
  src?: Maybe<ScalarsEnums["String"]>;
  /**
   * The version of the enqueued asset
   */
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Stylesheet enqueued by the CMS
 */
export interface EnqueuedStylesheet {
  __typename?: "EnqueuedStylesheet";
  /**
   * @todo
   */
  args?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Dependencies needed to use this asset
   */
  dependencies?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Extra information needed for the script
   */
  extra?: Maybe<ScalarsEnums["String"]>;
  /**
   * The handle of the enqueued asset
   */
  handle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of the enqueued asset
   */
  id: ScalarsEnums["ID"];
  /**
   * The source of the asset
   */
  src?: Maybe<ScalarsEnums["String"]>;
  /**
   * The version of the enqueued asset
   */
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Field error.
 */
export interface FieldError {
  __typename?: "FieldError";
  /**
   * The field with the associated error message.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Error message.
   */
  message?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface FileUploadField {
  __typename?: "FileUploadField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * A comma-delimited list of the file extensions which may be uploaded.
   */
  allowedExtensions?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Indicates whether multiple files may be uploaded.
   */
  canAcceptMultipleFiles?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The maximum size (in MB) an uploaded file may be .
   */
  maxFileSize?: Maybe<ScalarsEnums["Int"]>;
  /**
   * When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded.
   */
  maxFiles?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Gravity Forms button.
 */
export interface FormButton {
  __typename?: "FormButton";
  /**
   * Controls when the form button should be visible based on values selected on the form.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * Contains the URL for the image button. Only applicable when type is set to image.
   */
  imageUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the button text. Only applicable when type is set to text.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * Specifies the type of button to be displayed. Defaults to TEXT.
   */
  type?: Maybe<ScalarsEnums["FormButtonTypeEnum"]>;
}

/**
 * Properties for all the email notifications which exist for a form.
 */
export interface FormConfirmation {
  __typename?: "FormConfirmation";
  /**
   * Controls which form confirmation message should be displayed.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * ID.
   */
  id?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the confirmation is active or inactive. The default confirmation is always active.
   */
  isActive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this is the default confirmation.
   */
  isDefault?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the confirmation message that will be displayed. Only applicable when type is set to &quot;MESSAGE&quot;.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The confirmation name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the Id of the WordPress page that the browser will be redirected to. Only applicable when type is set to `PAGE`.
   */
  pageId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Contains the query string to be appended to the redirection url. Only applicable when type is set to `REDIRECT`.
   */
  queryString?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the type of confirmation to be used.
   */
  type?: Maybe<ScalarsEnums["FormConfirmationTypeEnum"]>;
  /**
   * Contains the URL that the browser will be redirected to. Only applicable when type is set to `REDIRECT`.
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The policies governing which entry data to include when erasing and exporting personal data.
 */
export interface FormDataPolicies {
  __typename?: "FormDataPolicies";
  /**
   * Whether entry data from this form is included when erasing and exporting personal data.
   */
  canExportAndErase?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The individual entry data exporting and erasing policies.
   */
  entryData?: Maybe<Array<Maybe<FormEntryDataPolicy>>>;
  /**
   * The database ID of the Gravity Forms field used to identify the user.
   */
  identificationFieldDatabaseId?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * The individual entry data exporting and erasing policies.
 */
export interface FormEntryDataPolicy {
  __typename?: "FormEntryDataPolicy";
  /**
   * The array key for the Gravity Forms Entry.
   */
  key?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether this field should be included when erasing personal data.
   */
  shouldErase?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this field should be included when exporting personal data.
   */
  shouldExport?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Gravity Forms form entry limititation details.
 */
export interface FormEntryLimits {
  __typename?: "FormEntryLimits";
  /**
   * Whether the form has a limit on the number of submissions.
   */
  hasLimit?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Message that will be displayed when the maximum number of submissions have been reached.
   */
  limitReachedMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * The time period during which submissions are allowed.
   */
  limitationPeriod?: Maybe<ScalarsEnums["FormLimitEntriesPeriodEnum"]>;
  /**
   * The number of submissions allowed.
   */
  maxEntries?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * Gravity Forms field.
 */
export interface FormField {
  __typename?:
    | "AddressField"
    | "CaptchaField"
    | "CheckboxField"
    | "ConsentField"
    | "DateField"
    | "EmailField"
    | "FileUploadField"
    | "HiddenField"
    | "HtmlField"
    | "ListField"
    | "MultiSelectField"
    | "NameField"
    | "NumberField"
    | "PageField"
    | "PasswordField"
    | "PhoneField"
    | "PostCategoryCheckboxField"
    | "PostCategoryMultiSelectField"
    | "PostCategoryRadioField"
    | "PostCategorySelectField"
    | "PostContentField"
    | "PostCustomCheckboxField"
    | "PostCustomDateField"
    | "PostCustomEmailField"
    | "PostCustomFileuploadField"
    | "PostCustomHiddenField"
    | "PostCustomListField"
    | "PostCustomMultiSelectField"
    | "PostCustomNumberField"
    | "PostCustomPhoneField"
    | "PostCustomRadioField"
    | "PostCustomSelectField"
    | "PostCustomTextAreaField"
    | "PostCustomTextField"
    | "PostCustomTimeField"
    | "PostCustomWebsiteField"
    | "PostExcerptField"
    | "PostImageField"
    | "PostTagsCheckboxField"
    | "PostTagsMultiSelectField"
    | "PostTagsRadioField"
    | "PostTagsSelectField"
    | "PostTagsTextField"
    | "PostTitleField"
    | "RadioField"
    | "SectionField"
    | "SelectField"
    | "SignatureField"
    | "TextAreaField"
    | "TextField"
    | "TimeField"
    | "WebsiteField";
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
  $on: $FormField;
}

/**
 * The form field-specifc policies for exporting and erasing personal data.
 */
export interface FormFieldDataPolicy {
  __typename?: "FormFieldDataPolicy";
  /**
   * Whether this field is used to identify the user&#039;s personal data.
   */
  isIdentificationField?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this field should be included when erasing personal data.
   */
  shouldErase?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this field should be included when exporting personal data.
   */
  shouldExport?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Gravity Forms button.
 */
export interface FormLastPageButton {
  __typename?: "FormLastPageButton";
  /**
   * Contains the URL for the image button. Only applicable when type is set to image.
   */
  imageUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the button text. Only applicable when type is set to text.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * Specifies the type of button to be displayed. Defaults to TEXT.
   */
  type?: Maybe<ScalarsEnums["FormButtonTypeEnum"]>;
}

/**
 * Gravity Forms form login requirements data.
 */
export interface FormLogin {
  __typename?: "FormLogin";
  /**
   * Whether the form is configured to be displayed only to logged in users.
   */
  isLoginRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When `isLoginRequired` is set to true, this controls the message displayed when non-logged in user tries to access the form.
   */
  loginRequiredMessage?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Properties for all the email notifications which exist for a form.
 */
export interface FormNotification {
  __typename?: "FormNotification";
  /**
   * The email or merge tags to be used as the email bcc address.
   */
  bcc?: Maybe<ScalarsEnums["String"]>;
  /**
   * An associative array containing the conditional logic rules. See the Conditional Logic Object for more details.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * The notification event. Default is form_submission.
   */
  event?: Maybe<ScalarsEnums["String"]>;
  /**
   * The email or merge tag to be used as the email from address.
   */
  from?: Maybe<ScalarsEnums["String"]>;
  /**
   * The text or merge tag to be used as the email from name.
   */
  fromName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The notification ID. A 13 character unique ID.
   */
  id?: Maybe<ScalarsEnums["String"]>;
  /**
   * Is the notification active or inactive. The default is true (active).
   */
  isActive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the email message should be formatted so that paragraphs are automatically added for new lines.
   */
  isAutoformatted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The email body/content. Merge tags supported.
   */
  message?: Maybe<ScalarsEnums["String"]>;
  /**
   * The notification name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The email or merge tags to be used as the email reply to address.
   */
  replyTo?: Maybe<ScalarsEnums["String"]>;
  /**
   * Routing rules.
   */
  routing?: Maybe<Array<Maybe<FormNotificationRouting>>>;
  /**
   * The name of the service to be used when sending this notification. Default is wordpress.
   */
  service?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if files uploaded on the form should be included when the notification is sent.
   */
  shouldSendAttachments?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The email subject line. Merge tags supported.
   */
  subject?: Maybe<ScalarsEnums["String"]>;
  /**
   * The ID of an email field, an email address or merge tag to be used as the email to address.
   */
  to?: Maybe<ScalarsEnums["String"]>;
  /**
   * Identifies what to use for the notification &quot;to&quot;.
   */
  toType?: Maybe<ScalarsEnums["FormNotificationToTypeEnum"]>;
}

/**
 * Properties for all the email notifications which exist for a form.
 */
export interface FormNotificationRouting {
  __typename?: "FormNotificationRouting";
  /**
   * The email or merge tag to be used as the email To address if this rule is a match.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * Target field ID. The field that will have it’s value compared with the value property to determine if this rule is a match.
   */
  fieldId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Operator to be used when evaluating this rule.
   */
  operator?: Maybe<ScalarsEnums["FormRuleOperatorEnum"]>;
  /**
   * The value to compare with the field specified by fieldId.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Gravity Forms form pagination data.
 */
export interface FormPagination {
  __typename?: "FormPagination";
  /**
   * Progress bar background color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;.
   */
  backgroundColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Progress bar text color. Can be any CSS color value. Only applies when `style` is set to &quot;CUSTOM&quot;.
   */
  color?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the confirmation bar should be displayed with the confirmation text.
   */
  hasProgressbarOnConfirmation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Names of the form&#039;s pages.
   */
  pageNames?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The confirmation text to display once the end of the progress bar has been reached. Only applies when `hasProgressbarOnConfirmation` is set to true.
   */
  progressbarCompletionText?: Maybe<ScalarsEnums["String"]>;
  /**
   * Style of progress bar.
   */
  style?: Maybe<ScalarsEnums["FormPageProgressStyleEnum"]>;
  /**
   * Type of progress indicator.
   */
  type?: Maybe<ScalarsEnums["FormPageProgressTypeEnum"]>;
}

/**
 * Gravity Forms form Personal Data settings.
 */
export interface FormPersonalData {
  __typename?: "FormPersonalData";
  /**
   * The policies governing which entry data to include when erasing and exporting personal data.
   */
  dataPolicies?: Maybe<FormDataPolicies>;
  /**
   * The number of days to retain entries. `null` if `retentionPolicy` is set to `RETAIN` entries indefinitely.
   */
  daysToRetain?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The policy for retaining old entry data.
   */
  retentionPolicy?: Maybe<ScalarsEnums["FormRetentionPolicyEnum"]>;
  /**
   * Whether the IP address should be saved to the form submission.
   */
  shouldSaveIP?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Gravity Forms form entry limititation details.
 */
export interface FormPostCreation {
  __typename?: "FormPostCreation";
  /**
   * When `useCurrentUserAsAuthor` is `false`, this contains the User object for the author.
   */
  author?: Maybe<User>;
  /**
   * When `useCurrentUserAsAuthor` is `false`, this property contains the user database that will be used as the Post author.
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * When `useCurrentUserAsAuthor` is `false`, this property contains the user ID that will be used as the Post author.
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Form forms with Post fields, but without a Post Category field, this property contains the default category database ID the post will be associated with when created.
   */
  categoryDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Template to be used when creating the post content. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post content. Only applicable when `hasContentTemplate` is `true`.
   */
  contentTemplate?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the format that the Post should be created with.
   */
  format?: Maybe<ScalarsEnums["PostFormatTypeEnum"]>;
  /**
   * Determines if the post template functionality is enabled. When enabled, the post content will be created based on the template specified by `contentTemplate`.
   */
  hasContentTemplate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the post title template functionality is enabled. When enabled, the post title will be created based on the template specified by `titleTemplate`.
   */
  hasTitleTemplate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * For forms with Post fields, this determines if the post should be created using the current logged in user as the author.
   */
  shouldUseCurrentUserAsAuthor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * For forms with Post fields, determines the status that the Post should be created with.
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * Template to be used when creating the post title. Field variables (i.e. {Name:3} ) can be added to the template to insert user submitted values into the post title. Only applicable when `hasTitleTemplate` is `true`.
   */
  titleTemplate?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Gravity Forms form Save and Continue data.
 */
export interface FormSaveAndContinue {
  __typename?: "FormSaveAndContinue";
  /**
   * Contains the save button text.
   */
  buttonText?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the Save And Continue feature is enabled.
   */
  hasSaveAndContinue?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Gravity Forms form scheduling data.
 */
export interface FormSchedule {
  __typename?: "FormSchedule";
  /**
   * Message to be displayed when form is no longer available.
   */
  closedMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Date/time details when the form will become inactive.
   */
  endDetails?: Maybe<FormScheduleDetails>;
  /**
   * Specifies if this form is scheduled to be displayed only during a certain configured date/time.
   */
  hasSchedule?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Message to be displayed when form is not yet available.
   */
  pendingMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Date/time details when the form will become active/visible.
   */
  startDetails?: Maybe<FormScheduleDetails>;
}

/**
 * Gravity Forms form scheduling data.
 */
export interface FormScheduleDetails {
  __typename?: "FormScheduleDetails";
  /**
   * Whether the date is in the AM or PM of a 12-hour clock.
   */
  amPm?: Maybe<ScalarsEnums["AmPmEnum"]>;
  /**
   * The schedule date in local time.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The schedule date in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The hour (1-12).
   */
  hour?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The minute.
   */
  minute?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * The general setting type
 */
export interface GeneralSettings {
  __typename?: "GeneralSettings";
  /**
   * A date format for all date strings.
   */
  dateFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site tagline.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * This address is used for admin purposes, like new user notification.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * WordPress locale code.
   */
  language?: Maybe<ScalarsEnums["String"]>;
  /**
   * A day number of the week that the week should start on.
   */
  startOfWeek?: Maybe<ScalarsEnums["Int"]>;
  /**
   * A time format for all time strings.
   */
  timeFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * A city in the same timezone as you.
   */
  timezone?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site title.
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site URL.
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the generateAuthorizationCode mutation
 */
export interface GenerateAuthorizationCodePayload {
  __typename?: "GenerateAuthorizationCodePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Authorization code used for requesting refresh/access tokens
   */
  code?: Maybe<ScalarsEnums["String"]>;
  /**
   * Error encountered during user authentication, if any
   */
  error?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms draft entry.
 */
export interface GfDraftEntry {
  __typename?: "GfDraftEntry";
  /**
   * The user who created the entry.
   */
  createdBy?: Maybe<User>;
  /**
   * Database ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdByDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Global ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdById?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The date and time that the entry was created in local time.
   */
  dateCreated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in GMT.
   */
  dateCreatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in local time.
   */
  dateUpdated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was updated in GMT.
   */
  dateUpdatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The form object of the node.
   */
  form?: Maybe<GfForm>;
  /**
   * The database identifier of the form of the node.
   */
  formDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the GfEntry type and the FormField type
   */
  formFields: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<GfEntryToFormFieldConnectionWhereArgs>;
  }) => Maybe<GfEntryToFormFieldConnection>;
  /**
   * The globally unique identifier of the form of the node.
   */
  formId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The globally unique ID for the object
   */
  id: ScalarsEnums["ID"];
  /**
   * Client IP of user who submitted the form.
   */
  ip?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the entry is a draft.
   */
  isDraft?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the entry has been submitted.
   */
  isSubmitted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The resume token. Only applies to draft entries.
   */
  resumeToken?: Maybe<ScalarsEnums["String"]>;
  /**
   * Source URL of page that contained the form when it was submitted.
   */
  sourceUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Provides the name and version of both the browser and operating system from which the entry was submitted.
   */
  userAgent?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Gravity Forms entry interface.
 */
export interface GfEntry {
  __typename?: "GfDraftEntry" | "GfSubmittedEntry";
  /**
   * The user who created the entry.
   */
  createdBy?: Maybe<User>;
  /**
   * Database ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdByDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Global ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdById?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The date and time that the entry was created in local time.
   */
  dateCreated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in GMT.
   */
  dateCreatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in local time.
   */
  dateUpdated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was updated in GMT.
   */
  dateUpdatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The form object of the node.
   */
  form?: Maybe<GfForm>;
  /**
   * The database identifier of the form of the node.
   */
  formDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the GfEntry type and the FormField type
   */
  formFields: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<GfEntryToFormFieldConnectionWhereArgs>;
  }) => Maybe<GfEntryToFormFieldConnection>;
  /**
   * The globally unique identifier of the form of the node.
   */
  formId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The globally unique ID for the object
   */
  id: ScalarsEnums["ID"];
  /**
   * Client IP of user who submitted the form.
   */
  ip?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the entry is a draft.
   */
  isDraft?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the entry has been submitted.
   */
  isSubmitted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Source URL of page that contained the form when it was submitted.
   */
  sourceUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Provides the name and version of both the browser and operating system from which the entry was submitted.
   */
  userAgent?: Maybe<ScalarsEnums["String"]>;
  $on: $GfEntry;
}

/**
 * Connection between the GfEntry type and the FormField type
 */
export interface GfEntryToFormFieldConnection {
  __typename?: "GfEntryToFormFieldConnection";
  /**
   * Edges for the GfEntryToFormFieldConnection connection
   */
  edges?: Maybe<Array<Maybe<GfEntryToFormFieldConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<FormField>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface GfEntryToFormFieldConnectionEdge {
  __typename?: "GfEntryToFormFieldConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<FormField>;
}

/**
 * Gravity Forms form.
 */
export interface GfForm {
  __typename?: "GfForm";
  /**
   * Contains the form button settings such as the button text or image button source.
   */
  button?: Maybe<FormButton>;
  /**
   * Contains the form confirmation settings such as confirmation text or redirect URL.
   */
  confirmations?: Maybe<Array<Maybe<FormConfirmation>>>;
  /**
   * String containing the custom CSS classes to be added to the &lt;form&gt; tag.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * The custom text to use to indicate a field is required.
   */
  customRequiredIndicator?: Maybe<ScalarsEnums["String"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The date and time that the entry was created in local time.
   */
  dateCreated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in GMT.
   */
  dateCreatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Form description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field description is displayed above the field input (i.e. immediately after the field label) or below the field input.
   */
  descriptionPlacement?: Maybe<ScalarsEnums["FormDescriptionPlacementEnum"]>;
  /**
   * Connection between the GfForm type and the GfEntry type
   */
  entries: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<GfFormToGfEntryConnectionWhereArgs>;
  }) => Maybe<GfFormToGfEntryConnection>;
  /**
   * The entry limit settings.
   */
  entryLimits?: Maybe<FormEntryLimits>;
  /**
   * CSS class for the first page.
   */
  firstPageCssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the GfForm type and the FormField type
   */
  formFields: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<GfFormToFormFieldConnectionWhereArgs>;
  }) => Maybe<GfFormToFormFieldConnection>;
  /**
   * Form ID.
   * @deprecated Deprecated in favor of the databaseId field.
   */
  formId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * When enabled, conditional logic hide/show operation will be performed with a jQuery slide animation. Only applicable to forms with conditional logic.
   */
  hasConditionalLogicAnimation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Specifies if the form has the Honeypot spam-protection feature.
   */
  hasHoneypot?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * If enabled, will show a summary that lists form validation errors at the top of the form when a user attempts a failed submission.
   */
  hasValidationSummary?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The globally unique ID for the object
   */
  id: ScalarsEnums["ID"];
  /**
   * Determines whether the form is active.
   */
  isActive?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the form is in the trash.
   */
  isTrash?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines where the field labels should be placed in relation to the field.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormLabelPlacementEnum"]>;
  /**
   * Last page button data.
   */
  lastPageButton?: Maybe<FormLastPageButton>;
  /**
   * Login requirements data.
   */
  login?: Maybe<FormLogin>;
  /**
   * The Gravity Forms markup version.
   */
  markupVersion?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The ID to assign to the next field that is added to the form.
   */
  nextFieldId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The properties for all the email notifications which exist for a form.
   */
  notifications?: Maybe<Array<Maybe<FormNotification>>>;
  /**
   * Pagination data.
   */
  pagination?: Maybe<FormPagination>;
  /**
   * Personal data settings.
   */
  personalData?: Maybe<FormPersonalData>;
  /**
   * Post creation data.
   */
  postCreation?: Maybe<FormPostCreation>;
  /**
   * Type of indicator to use when field is required.
   */
  requiredIndicator?: Maybe<ScalarsEnums["FormFieldRequiredIndicatorEnum"]>;
  /**
   * \&quot;Save and Continue\&quot; data.
   */
  saveAndContinue?: Maybe<FormSaveAndContinue>;
  /**
   * Form scheduling data.
   */
  scheduling?: Maybe<FormSchedule>;
  /**
   * How sub-labels are aligned.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormSubLabelPlacementEnum"]>;
  /**
   * Form title.
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * The version of Gravity Forms used to create this form.
   */
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the GfForm type and the FormField type
 */
export interface GfFormToFormFieldConnection {
  __typename?: "GfFormToFormFieldConnection";
  /**
   * Edges for the GfFormToFormFieldConnection connection
   */
  edges?: Maybe<Array<Maybe<GfFormToFormFieldConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<FormField>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface GfFormToFormFieldConnectionEdge {
  __typename?: "GfFormToFormFieldConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<FormField>;
}

/**
 * Connection between the GfForm type and the GfEntry type
 */
export interface GfFormToGfEntryConnection {
  __typename?: "GfFormToGfEntryConnection";
  /**
   * Edges for the GfFormToGfEntryConnection connection
   */
  edges?: Maybe<Array<Maybe<GfFormToGfEntryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<GfEntry>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface GfFormToGfEntryConnectionEdge {
  __typename?: "GfFormToGfEntryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<GfEntry>;
}

/**
 * Gravity Forms Logging Settings.
 */
export interface GfLogger {
  __typename?: "GfLogger";
  /**
   * Whether the logger is enabled
   */
  isEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The name of the Gravity Forms logger.
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Gravity Forms Settings.
 */
export interface GfSettings {
  __typename?: "GfSettings";
  /**
   * The default currency for your forms. Used for product, credit card, and other fields.
   */
  currency?: Maybe<ScalarsEnums["GfCurrencyEnum"]>;
  /**
   * Whether Gravity Forms to download and install bug fixes and security updates automatically in the background. Requires a valid license key.
   */
  hasBackgroundUpdates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to output Gravity Forms&#039; default CSS.
   */
  hasDefaultCss?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to display the forms menu in the WordPress top toolbar. The forms menu will display the ten forms recently opened in the form editor.
   */
  hasToolbar?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the server-generated form markup uses HTML5.
   */
  isHtml5Enabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Enable to prevent extraneous scripts and styles from being printed on a Gravity Forms admin pages, reducing conflicts with other plugins and themes.
   */
  isNoConflictModeEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Logging settings.
   */
  logging?: Maybe<GfSettingsLogging>;
}

/**
 * Gravity Forms Logging Settings.
 */
export interface GfSettingsLogging {
  __typename?: "GfSettingsLogging";
  /**
   * Whether Gravity Forms internal logging is enabled. Logging allows you to easily debug the inner workings of Gravity Forms to solve any possible issues.
   */
  isLoggingEnabled?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * A list of registered Gravity Forms loggers and their configurations
   */
  loggers?: Maybe<Array<Maybe<GfLogger>>>;
}

/**
 * A Gravity Forms submitted entry.
 */
export interface GfSubmittedEntry {
  __typename?: "GfSubmittedEntry";
  /**
   * The user who created the entry.
   */
  createdBy?: Maybe<User>;
  /**
   * Database ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdByDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Global ID of the user that submitted of the form if a logged in user submitted the form.
   */
  createdById?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The date and time that the entry was created in local time.
   */
  dateCreated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in GMT.
   */
  dateCreatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was created in local time.
   */
  dateUpdated?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date and time that the entry was updated in GMT.
   */
  dateUpdatedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The entry ID. Returns null for draft entries.
   * @deprecated Deprecated in favor of the databaseId field.
   */
  entryId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form object of the node.
   */
  form?: Maybe<GfForm>;
  /**
   * The database identifier of the form of the node.
   */
  formDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the GfEntry type and the FormField type
   */
  formFields: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<GfEntryToFormFieldConnectionWhereArgs>;
  }) => Maybe<GfEntryToFormFieldConnection>;
  /**
   * The globally unique identifier of the form of the node.
   */
  formId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The globally unique ID for the object
   */
  id: ScalarsEnums["ID"];
  /**
   * Client IP of user who submitted the form.
   */
  ip?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the entry is a draft.
   */
  isDraft?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the entry has been read.
   */
  isRead?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates if the entry has been starred (i.e marked with a star).
   */
  isStarred?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the entry has been submitted.
   */
  isSubmitted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * For forms with Post fields, this is the post object that was created.
   */
  post?: Maybe<Post>;
  /**
   * For forms with Post fields, this property contains the Id of the Post that was created.
   */
  postDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Source URL of page that contained the form when it was submitted.
   */
  sourceUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the entry.
   */
  status?: Maybe<ScalarsEnums["EntryStatusEnum"]>;
  /**
   * Provides the name and version of both the browser and operating system from which the entry was submitted.
   */
  userAgent?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Header Type
 */
export interface HCMSFooter {
  __typename?: "HCMSFooter";
  /**
   * Copyright text
   */
  copyrightText?: Maybe<ScalarsEnums["String"]>;
  /**
   * sidebarOne
   */
  sidebarOne?: Maybe<ScalarsEnums["String"]>;
  /**
   * sidebarTwo
   */
  sidebarTwo?: Maybe<ScalarsEnums["String"]>;
  /**
   * Social links
   */
  socialLinks?: Maybe<Array<Maybe<HCMSSocialLinks>>>;
}

/**
 * Header Type
 */
export interface HCMSHeader {
  __typename?: "HCMSHeader";
  /**
   * favicon
   */
  favicon?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site logo URL
   */
  siteLogoUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site tagline
   */
  siteTagLine?: Maybe<ScalarsEnums["String"]>;
  /**
   * Site title
   */
  siteTitle?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Social Links Type
 */
export interface HCMSSocialLinks {
  __typename?: "HCMSSocialLinks";
  /**
   * Icon name
   */
  iconName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Icon url
   */
  iconUrl?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface HiddenField {
  __typename?: "HiddenField";
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Content node with hierarchical (parent/child) relationships
 */
export interface HierarchicalContentNode {
  __typename?: "MediaItem" | "Page" | "ProductsService";
  /**
   * Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /**
   * Connection between the HierarchicalContentNode type and the ContentNode type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /**
   * The parent of the node. The parent object can be of various types
   */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  $on: $HierarchicalContentNode;
}

/**
 * Connection between the HierarchicalContentNode type and the ContentNode type
 */
export interface HierarchicalContentNodeToContentNodeAncestorsConnection {
  __typename?: "HierarchicalContentNodeToContentNodeAncestorsConnection";
  /**
   * Edges for the HierarchicalContentNodeToContentNodeAncestorsConnection connection
   */
  edges?: Maybe<
    Array<Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionEdge>>
  >;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface HierarchicalContentNodeToContentNodeAncestorsConnectionEdge {
  __typename?: "HierarchicalContentNodeToContentNodeAncestorsConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the HierarchicalContentNode type and the ContentNode type
 */
export interface HierarchicalContentNodeToContentNodeChildrenConnection {
  __typename?: "HierarchicalContentNodeToContentNodeChildrenConnection";
  /**
   * Edges for the HierarchicalContentNodeToContentNodeChildrenConnection connection
   */
  edges?: Maybe<
    Array<Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionEdge>>
  >;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface HierarchicalContentNodeToContentNodeChildrenConnectionEdge {
  __typename?: "HierarchicalContentNodeToContentNodeChildrenConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the HierarchicalContentNode type and the ContentNode type
 */
export interface HierarchicalContentNodeToParentContentNodeConnectionEdge {
  __typename?: "HierarchicalContentNodeToParentContentNodeConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ContentNode>;
}

/**
 * Term node with hierarchical (parent/child) relationships
 */
export interface HierarchicalTermNode {
  __typename?: "Category" | "NewMediaCenter" | "Pro";
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  $on: $HierarchicalTermNode;
}

/**
 * A Gravity Forms   field.
 */
export interface HtmlField {
  __typename?: "HtmlField";
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * Content of an HTML block field to be displayed on the form.
   */
  content?: Maybe<ScalarsEnums["String"]>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the default margins are turned on to align the HTML content with other fields.
   */
  hasMargins?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The individual properties for each element of the PostImage value field.
 */
export interface ImageFieldValue {
  __typename?: "ImageFieldValue";
  /**
   * The image alt text.
   */
  altText?: Maybe<ScalarsEnums["String"]>;
  /**
   * The image caption.
   */
  caption?: Maybe<ScalarsEnums["String"]>;
  /**
   * The image description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The image title.
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * The image url.
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface ListField {
  __typename?: "ListField";
  /**
   * The URL of the image to be used for the add row button.
   */
  addIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the list field.
   */
  choices?: Maybe<Array<Maybe<ListFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * The URL of the image to be used for the delete row button.
   */
  deleteIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field should use multiple columns. Default is false.
   */
  hasColumns?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * List field value.
   */
  listValues?: Maybe<Array<Maybe<ListFieldValue>>>;
  /**
   * The maximum number of rows the user can add to the field.
   */
  maxRows?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * List choice values.
 */
export interface ListFieldChoice {
  __typename?: "ListFieldChoice";
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The individual properties for each element of the List value field.
 */
export interface ListFieldValue {
  __typename?: "ListFieldValue";
  /**
   * Input values.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
}

/**
 * File details for a Media Item
 */
export interface MediaDetails {
  __typename?: "MediaDetails";
  /**
   * The filename of the mediaItem
   */
  file?: Maybe<ScalarsEnums["String"]>;
  /**
   * The height of the mediaItem
   */
  height?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Meta information associated with the mediaItem
   */
  meta?: Maybe<MediaItemMeta>;
  /**
   * The available sizes of the mediaItem
   */
  sizes?: Maybe<Array<Maybe<MediaSize>>>;
  /**
   * The width of the mediaItem
   */
  width?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * The mediaItem type
 */
export interface MediaItem {
  __typename?: "MediaItem";
  /**
   * Alternative text to display when resource is not displayed
   */
  altText?: Maybe<ScalarsEnums["String"]>;
  /**
   * Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The caption for the resource
   */
  caption: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the HierarchicalContentNode type and the ContentNode type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /**
   * The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
   */
  commentCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the comments are open or closed for this particular post.
   */
  commentStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the mediaItem type and the Comment type
   */
  comments: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<MediaItemToCommentConnectionWhereArgs>;
  }) => Maybe<MediaItemToCommentConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Description of the image (stored as post_content)
   */
  description: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The filesize in bytes of the resource
   */
  fileSize: (args?: {
    /**
     * Size of the MediaItem to return
     */
    size?: Maybe<MediaItemSizeEnum>;
  }) => Maybe<ScalarsEnums["Int"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the attachment object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * Details about the mediaItem
   */
  mediaDetails?: Maybe<MediaDetails>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  mediaItemId: ScalarsEnums["Int"];
  /**
   * Url of the mediaItem
   */
  mediaItemUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Type of resource
   */
  mediaType?: Maybe<ScalarsEnums["String"]>;
  /**
   * The mime type of the mediaItem
   */
  mimeType?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The parent of the node. The parent object can be of various types
   */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The sizes attribute value for an image.
   */
  sizes: (args?: {
    /**
     * Size of the MediaItem to calculate sizes with
     */
    size?: Maybe<MediaItemSizeEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Url of the mediaItem
   */
  sourceUrl: (args?: {
    /**
     * Size of the MediaItem to return
     */
    size?: Maybe<MediaItemSizeEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The srcset attribute specifies the URL of the image to use in different situations. It is a comma separated string of urls and their widths.
   */
  srcSet: (args?: {
    /**
     * Size of the MediaItem to calculate srcSet with
     */
    size?: Maybe<MediaItemSizeEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Meta connected to a MediaItem
 */
export interface MediaItemMeta {
  __typename?: "MediaItemMeta";
  /**
   * Aperture measurement of the media item.
   */
  aperture?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Information about the camera used to create the media item.
   */
  camera?: Maybe<ScalarsEnums["String"]>;
  /**
   * The text string description associated with the media item.
   */
  caption?: Maybe<ScalarsEnums["String"]>;
  /**
   * Copyright information associated with the media item.
   */
  copyright?: Maybe<ScalarsEnums["String"]>;
  /**
   * The date/time when the media was created.
   */
  createdTimestamp?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The original creator of the media item.
   */
  credit?: Maybe<ScalarsEnums["String"]>;
  /**
   * The focal length value of the media item.
   */
  focalLength?: Maybe<ScalarsEnums["Float"]>;
  /**
   * The ISO (International Organization for Standardization) value of the media item.
   */
  iso?: Maybe<ScalarsEnums["Int"]>;
  /**
   * List of keywords used to describe or identfy the media item.
   */
  keywords?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The vertical or horizontal aspect of the media item.
   */
  orientation?: Maybe<ScalarsEnums["String"]>;
  /**
   * The shutter speed information of the media item.
   */
  shutterSpeed?: Maybe<ScalarsEnums["Float"]>;
  /**
   * A useful title for the media item.
   */
  title?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the mediaItem type and the Comment type
 */
export interface MediaItemToCommentConnection {
  __typename?: "MediaItemToCommentConnection";
  /**
   * Edges for the MediaItemToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<MediaItemToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface MediaItemToCommentConnectionEdge {
  __typename?: "MediaItemToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Details of an available size for a media item
 */
export interface MediaSize {
  __typename?: "MediaSize";
  /**
   * The filename of the referenced size
   */
  file?: Maybe<ScalarsEnums["String"]>;
  /**
   * The filesize of the resource
   */
  fileSize?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The height of the referenced size
   */
  height?: Maybe<ScalarsEnums["String"]>;
  /**
   * The mime type of the referenced size
   */
  mimeType?: Maybe<ScalarsEnums["String"]>;
  /**
   * The referenced size name
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The url of the referenced size
   */
  sourceUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * The width of the referenced size
   */
  width?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Menus are the containers for navigation items. Menus can be assigned to menu locations, which are typically registered by the active theme.
 */
export interface Menu {
  __typename?: "Menu";
  /**
   * The number of items in the menu
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The globally unique identifier of the nav menu object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The locations a menu is assigned to
   */
  locations?: Maybe<Array<Maybe<ScalarsEnums["MenuLocationEnum"]>>>;
  /**
   * WP ID of the nav menu.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the Menu type and the MenuItem type
   */
  menuItems: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<MenuToMenuItemConnectionWhereArgs>;
  }) => Maybe<MenuToMenuItemConnection>;
  /**
   * Display name of the menu. Equivalent to WP_Term-&gt;name.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The url friendly name of the menu. Equivalent to WP_Term-&gt;slug
   */
  slug?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Navigation menu items are the individual items assigned to a menu. These are rendered as the links in a navigation menu.
 */
export interface MenuItem {
  __typename?: "MenuItem";
  /**
   * Connection between the MenuItem type and the MenuItem type
   */
  childItems: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<MenuItemToMenuItemConnectionWhereArgs>;
  }) => Maybe<MenuItemToMenuItemConnection>;
  /**
   * Connection from MenuItem to it&#039;s connected node
   */
  connectedNode?: Maybe<MenuItemToMenuItemLinkableConnectionEdge>;
  /**
   * The object connected to this menu item.
   * @deprecated Deprecated in favor of the connectedNode field
   */
  connectedObject?: Maybe<MenuItemObjectUnion>;
  /**
   * Class attribute for the menu item link
   */
  cssClasses?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Description of the menu item.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the nav menu item object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Label or title of the menu item.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Link relationship (XFN) of the menu item.
   */
  linkRelationship?: Maybe<ScalarsEnums["String"]>;
  /**
   * The locations the menu item&#039;s Menu is assigned to
   */
  locations?: Maybe<Array<Maybe<ScalarsEnums["MenuLocationEnum"]>>>;
  /**
   * The Menu a MenuItem is part of
   */
  menu?: Maybe<MenuItemToMenuConnectionEdge>;
  /**
   * WP ID of the menu item.
   * @deprecated Deprecated in favor of the databaseId field
   */
  menuItemId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Menu item order
   */
  order?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The database id of the parent menu item or null if it is the root
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent nav menu item object.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Path for the resource. Relative path for internal resources. Absolute path for external resources.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * Target attribute for the menu item link.
   */
  target?: Maybe<ScalarsEnums["String"]>;
  /**
   * Title attribute for the menu item link
   */
  title?: Maybe<ScalarsEnums["String"]>;
  /**
   * URL or destination of the menu item.
   */
  url?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Nodes that can be linked to as Menu Items
 */
export interface MenuItemLinkable {
  __typename?:
    | "Category"
    | "NewMediaCenter"
    | "Page"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "Pro"
    | "ProductsService"
    | "Tag";
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  $on: $MenuItemLinkable;
}

/**
 * Deprecated in favor of MenuItemLinkeable Interface
 */
export interface MenuItemObjectUnion {
  __typename?:
    | "Category"
    | "NewMediaCenter"
    | "Page"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "Pro"
    | "ProductsService"
    | "Tag";
  $on: $MenuItemObjectUnion;
}

/**
 * Connection between the MenuItem type and the Menu type
 */
export interface MenuItemToMenuConnectionEdge {
  __typename?: "MenuItemToMenuConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Menu>;
}

/**
 * Connection between the MenuItem type and the MenuItem type
 */
export interface MenuItemToMenuItemConnection {
  __typename?: "MenuItemToMenuItemConnection";
  /**
   * Edges for the MenuItemToMenuItemConnection connection
   */
  edges?: Maybe<Array<Maybe<MenuItemToMenuItemConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<MenuItem>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface MenuItemToMenuItemConnectionEdge {
  __typename?: "MenuItemToMenuItemConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<MenuItem>;
}

/**
 * Connection between the MenuItem type and the MenuItemLinkable type
 */
export interface MenuItemToMenuItemLinkableConnectionEdge {
  __typename?: "MenuItemToMenuItemLinkableConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<MenuItemLinkable>;
}

/**
 * Connection between the Menu type and the MenuItem type
 */
export interface MenuToMenuItemConnection {
  __typename?: "MenuToMenuItemConnection";
  /**
   * Edges for the MenuToMenuItemConnection connection
   */
  edges?: Maybe<Array<Maybe<MenuToMenuItemConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<MenuItem>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface MenuToMenuItemConnectionEdge {
  __typename?: "MenuToMenuItemConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<MenuItem>;
}

/**
 * A Gravity Forms   field.
 */
export interface MultiSelectField {
  __typename?: "MultiSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the multiselect field.
   */
  choices?: Maybe<Array<Maybe<MultiSelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Multiselect choice values.
 */
export interface MultiSelectFieldChoice {
  __typename?: "MultiSelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface NameField {
  __typename?: "NameField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the name field.
   */
  inputs?: Maybe<Array<Maybe<NameInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Name field value.
   */
  nameValues?: Maybe<NameFieldValue>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Name choice values.
 */
export interface NameFieldChoice {
  __typename?: "NameFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The individual properties for each element of the Name value field.
 */
export interface NameFieldValue {
  __typename?: "NameFieldValue";
  /**
   * First name.
   */
  first?: Maybe<ScalarsEnums["String"]>;
  /**
   * Last name.
   */
  last?: Maybe<ScalarsEnums["String"]>;
  /**
   * Middle name.
   */
  middle?: Maybe<ScalarsEnums["String"]>;
  /**
   * Prefix, such as Mr., Mrs. etc.
   */
  prefix?: Maybe<ScalarsEnums["String"]>;
  /**
   * Suffix, such as Sr., Jr. etc.
   */
  suffix?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Name input values.
 */
export interface NameInputProperty {
  __typename?: "NameInputProperty";
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The available choices for the name field.
   */
  choices?: Maybe<Array<Maybe<NameFieldChoice>>>;
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Whether or not this field should be hidden.
   */
  isHidden?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Key used to identify this input.
   */
  key?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The newEvent type
 */
export interface NewEvent {
  __typename?: "NewEvent";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the newevent object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  newEventId: ScalarsEnums["Int"];
  /**
   * Connection between the newEvent type and the newMediaCenter type
   */
  newMediaCenters: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewEventToNewMediaCenterConnectionWhereArgs>;
  }) => Maybe<NewEventToNewMediaCenterConnection>;
  /**
   * Connection between the newEvent type and the newEvent type
   */
  preview?: Maybe<NewEventToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the newEvent type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewEventToTermNodeConnectionWhereArgs>;
  }) => Maybe<NewEventToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the newEvent type and the newMediaCenter type
 */
export interface NewEventToNewMediaCenterConnection {
  __typename?: "NewEventToNewMediaCenterConnection";
  /**
   * Edges for the NewEventToNewMediaCenterConnection connection
   */
  edges?: Maybe<Array<Maybe<NewEventToNewMediaCenterConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewEventToNewMediaCenterConnectionEdge {
  __typename?: "NewEventToNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newEvent type and the newEvent type
 */
export interface NewEventToPreviewConnectionEdge {
  __typename?: "NewEventToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<NewEvent>;
}

/**
 * Connection between the newEvent type and the TermNode type
 */
export interface NewEventToTermNodeConnection {
  __typename?: "NewEventToTermNodeConnection";
  /**
   * Edges for the NewEventToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<NewEventToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewEventToTermNodeConnectionEdge {
  __typename?: "NewEventToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * The newMediaCenter type
 */
export interface NewMediaCenter {
  __typename?: "NewMediaCenter";
  /**
   * The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<NewMediaCenterToAncestorsNewMediaCenterConnection>;
  /**
   * Connection between the newMediaCenter type and the newMediaCenter type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewMediaCenterToNewMediaCenterConnectionWhereArgs>;
  }) => Maybe<NewMediaCenterToNewMediaCenterConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the newMediaCenter type and the ContentNode type
   */
  contentNodes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewMediaCenterToContentNodeConnectionWhereArgs>;
  }) => Maybe<NewMediaCenterToContentNodeConnection>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newMediaCenter type and the newEvent type
   */
  newEvents: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewMediaCenterToNewEventConnectionWhereArgs>;
  }) => Maybe<NewMediaCenterToNewEventConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  newMediaCenterId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the newMediaCenter type and the newPressCoverage type
   */
  newPressCoverages: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewMediaCenterToNewPressCoverageConnectionWhereArgs>;
  }) => Maybe<NewMediaCenterToNewPressCoverageConnection>;
  /**
   * Connection between the newMediaCenter type and the newPressRelease type
   */
  newPressReleases: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewMediaCenterToNewPressReleaseConnectionWhereArgs>;
  }) => Maybe<NewMediaCenterToNewPressReleaseConnection>;
  /**
   * Connection between the newMediaCenter type and the newMediaCenter type
   */
  parent?: Maybe<NewMediaCenterToParentNewMediaCenterConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newMediaCenter type and the Taxonomy type
   */
  taxonomy?: Maybe<NewMediaCenterToTaxonomyConnectionEdge>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the newMediaCenter type and the newMediaCenter type
 */
export interface NewMediaCenterToAncestorsNewMediaCenterConnection {
  __typename?: "NewMediaCenterToAncestorsNewMediaCenterConnection";
  /**
   * Edges for the NewMediaCenterToAncestorsNewMediaCenterConnection connection
   */
  edges?: Maybe<
    Array<Maybe<NewMediaCenterToAncestorsNewMediaCenterConnectionEdge>>
  >;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToAncestorsNewMediaCenterConnectionEdge {
  __typename?: "NewMediaCenterToAncestorsNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newMediaCenter type and the ContentNode type
 */
export interface NewMediaCenterToContentNodeConnection {
  __typename?: "NewMediaCenterToContentNodeConnection";
  /**
   * Edges for the NewMediaCenterToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<NewMediaCenterToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToContentNodeConnectionEdge {
  __typename?: "NewMediaCenterToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the newMediaCenter type and the newEvent type
 */
export interface NewMediaCenterToNewEventConnection {
  __typename?: "NewMediaCenterToNewEventConnection";
  /**
   * Edges for the NewMediaCenterToNewEventConnection connection
   */
  edges?: Maybe<Array<Maybe<NewMediaCenterToNewEventConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewEvent>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToNewEventConnectionEdge {
  __typename?: "NewMediaCenterToNewEventConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewEvent>;
}

/**
 * Connection between the newMediaCenter type and the newMediaCenter type
 */
export interface NewMediaCenterToNewMediaCenterConnection {
  __typename?: "NewMediaCenterToNewMediaCenterConnection";
  /**
   * Edges for the NewMediaCenterToNewMediaCenterConnection connection
   */
  edges?: Maybe<Array<Maybe<NewMediaCenterToNewMediaCenterConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToNewMediaCenterConnectionEdge {
  __typename?: "NewMediaCenterToNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newMediaCenter type and the newPressCoverage type
 */
export interface NewMediaCenterToNewPressCoverageConnection {
  __typename?: "NewMediaCenterToNewPressCoverageConnection";
  /**
   * Edges for the NewMediaCenterToNewPressCoverageConnection connection
   */
  edges?: Maybe<Array<Maybe<NewMediaCenterToNewPressCoverageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressCoverage>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToNewPressCoverageConnectionEdge {
  __typename?: "NewMediaCenterToNewPressCoverageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressCoverage>;
}

/**
 * Connection between the newMediaCenter type and the newPressRelease type
 */
export interface NewMediaCenterToNewPressReleaseConnection {
  __typename?: "NewMediaCenterToNewPressReleaseConnection";
  /**
   * Edges for the NewMediaCenterToNewPressReleaseConnection connection
   */
  edges?: Maybe<Array<Maybe<NewMediaCenterToNewPressReleaseConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressRelease>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewMediaCenterToNewPressReleaseConnectionEdge {
  __typename?: "NewMediaCenterToNewPressReleaseConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressRelease>;
}

/**
 * Connection between the newMediaCenter type and the newMediaCenter type
 */
export interface NewMediaCenterToParentNewMediaCenterConnectionEdge {
  __typename?: "NewMediaCenterToParentNewMediaCenterConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newMediaCenter type and the Taxonomy type
 */
export interface NewMediaCenterToTaxonomyConnectionEdge {
  __typename?: "NewMediaCenterToTaxonomyConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Taxonomy>;
}

/**
 * The newPressCoverage type
 */
export interface NewPressCoverage {
  __typename?: "NewPressCoverage";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the newpresscoverage object.
   */
  id: ScalarsEnums["ID"];
  /**
   * 1. Click link icon
   * 2. Add link
   */
  imageAndLink?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newPressCoverage type and the newMediaCenter type
   */
  newMediaCenters: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewPressCoverageToNewMediaCenterConnectionWhereArgs>;
  }) => Maybe<NewPressCoverageToNewMediaCenterConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  newPressCoverageId: ScalarsEnums["Int"];
  pressImage?: Maybe<MediaItem>;
  pressTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newPressCoverage type and the newPressCoverage type
   */
  preview?: Maybe<NewPressCoverageToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the newPressCoverage type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewPressCoverageToTermNodeConnectionWhereArgs>;
  }) => Maybe<NewPressCoverageToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the newPressCoverage type and the newMediaCenter type
 */
export interface NewPressCoverageToNewMediaCenterConnection {
  __typename?: "NewPressCoverageToNewMediaCenterConnection";
  /**
   * Edges for the NewPressCoverageToNewMediaCenterConnection connection
   */
  edges?: Maybe<Array<Maybe<NewPressCoverageToNewMediaCenterConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewPressCoverageToNewMediaCenterConnectionEdge {
  __typename?: "NewPressCoverageToNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newPressCoverage type and the newPressCoverage type
 */
export interface NewPressCoverageToPreviewConnectionEdge {
  __typename?: "NewPressCoverageToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<NewPressCoverage>;
}

/**
 * Connection between the newPressCoverage type and the TermNode type
 */
export interface NewPressCoverageToTermNodeConnection {
  __typename?: "NewPressCoverageToTermNodeConnection";
  /**
   * Edges for the NewPressCoverageToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<NewPressCoverageToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewPressCoverageToTermNodeConnectionEdge {
  __typename?: "NewPressCoverageToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * The newPressRelease type
 */
export interface NewPressRelease {
  __typename?: "NewPressRelease";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the newpressrelease object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newPressRelease type and the newMediaCenter type
   */
  newMediaCenters: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewPressReleaseToNewMediaCenterConnectionWhereArgs>;
  }) => Maybe<NewPressReleaseToNewMediaCenterConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  newPressReleaseId: ScalarsEnums["Int"];
  /**
   * 1. Write title
   * 2. Use link tool to enter link
   */
  pressreleaseText?: Maybe<ScalarsEnums["String"]>;
  pressreleaseTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the newPressRelease type and the newPressRelease type
   */
  preview?: Maybe<NewPressReleaseToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the newPressRelease type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<NewPressReleaseToTermNodeConnectionWhereArgs>;
  }) => Maybe<NewPressReleaseToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the newPressRelease type and the newMediaCenter type
 */
export interface NewPressReleaseToNewMediaCenterConnection {
  __typename?: "NewPressReleaseToNewMediaCenterConnection";
  /**
   * Edges for the NewPressReleaseToNewMediaCenterConnection connection
   */
  edges?: Maybe<Array<Maybe<NewPressReleaseToNewMediaCenterConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewPressReleaseToNewMediaCenterConnectionEdge {
  __typename?: "NewPressReleaseToNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the newPressRelease type and the newPressRelease type
 */
export interface NewPressReleaseToPreviewConnectionEdge {
  __typename?: "NewPressReleaseToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<NewPressRelease>;
}

/**
 * Connection between the newPressRelease type and the TermNode type
 */
export interface NewPressReleaseToTermNodeConnection {
  __typename?: "NewPressReleaseToTermNodeConnection";
  /**
   * Edges for the NewPressReleaseToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<NewPressReleaseToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface NewPressReleaseToTermNodeConnectionEdge {
  __typename?: "NewPressReleaseToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * An object with an ID
 */
export interface Node {
  __typename?:
    | "Category"
    | "Comment"
    | "CommentAuthor"
    | "ContentType"
    | "EnqueuedScript"
    | "EnqueuedStylesheet"
    | "GfDraftEntry"
    | "GfForm"
    | "GfSubmittedEntry"
    | "MediaItem"
    | "Menu"
    | "MenuItem"
    | "NewEvent"
    | "NewMediaCenter"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Plugin"
    | "Post"
    | "PostFormat"
    | "PressCoverage"
    | "PressRelease"
    | "Pro"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "Tag"
    | "Taxonomy"
    | "TeamMember"
    | "Theme"
    | "User"
    | "UserRole";
  /**
   * The globally unique ID for the object
   */
  id: ScalarsEnums["ID"];
  $on: $Node;
}

/**
 * A node that can have an author assigned to it
 */
export interface NodeWithAuthor {
  __typename?:
    | "MediaItem"
    | "NewEvent"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "ProductCard"
    | "Project"
    | "TeamMember";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  $on: $NodeWithAuthor;
}

/**
 * Connection between the NodeWithAuthor type and the User type
 */
export interface NodeWithAuthorToUserConnectionEdge {
  __typename?: "NodeWithAuthorToUserConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<User>;
}

/**
 * A node that can have comments associated with it
 */
export interface NodeWithComments {
  __typename?: "MediaItem" | "Page" | "Post";
  /**
   * The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
   */
  commentCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the comments are open or closed for this particular post.
   */
  commentStatus?: Maybe<ScalarsEnums["String"]>;
  $on: $NodeWithComments;
}

/**
 * A node that supports the content editor
 */
export interface NodeWithContentEditor {
  __typename?:
    | "Page"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "ProductsService";
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  $on: $NodeWithContentEditor;
}

/**
 * A node that can have an excerpt
 */
export interface NodeWithExcerpt {
  __typename?: "Post";
  /**
   * The excerpt of the post.
   */
  excerpt: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  $on: $NodeWithExcerpt;
}

/**
 * A node that can have a featured image set
 */
export interface NodeWithFeaturedImage {
  __typename?:
    | "Page"
    | "Partner"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "ProductsService"
    | "TeamMember";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  $on: $NodeWithFeaturedImage;
}

/**
 * Connection between the NodeWithFeaturedImage type and the MediaItem type
 */
export interface NodeWithFeaturedImageToMediaItemConnectionEdge {
  __typename?: "NodeWithFeaturedImageToMediaItemConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<MediaItem>;
}

/**
 * A node that can have a Gravity Forms form assigned to it.
 */
export interface NodeWithForm {
  __typename?: "GfDraftEntry" | "GfSubmittedEntry";
  /**
   * The form object of the node.
   */
  form?: Maybe<GfForm>;
  /**
   * The database identifier of the form of the node.
   */
  formDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the form of the node.
   */
  formId?: Maybe<ScalarsEnums["ID"]>;
  $on: $NodeWithForm;
}

/**
 * A node that can have page attributes
 */
export interface NodeWithPageAttributes {
  __typename?: "Page" | "ProductsService";
  /**
   * A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
   */
  menuOrder?: Maybe<ScalarsEnums["Int"]>;
  $on: $NodeWithPageAttributes;
}

/**
 * A node that can have revisions
 */
export interface NodeWithRevisions {
  __typename?: "Page" | "Post" | "ProductsService";
  /**
   * True if the node is a revision of another node
   */
  isRevision?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
   */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  $on: $NodeWithRevisions;
}

/**
 * Connection between the NodeWithRevisions type and the ContentNode type
 */
export interface NodeWithRevisionsToContentNodeConnectionEdge {
  __typename?: "NodeWithRevisionsToContentNodeConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ContentNode>;
}

/**
 * A node that can have a template associated with it
 */
export interface NodeWithTemplate {
  __typename?:
    | "MediaItem"
    | "NewEvent"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "TeamMember";
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  $on: $NodeWithTemplate;
}

/**
 * A node that NodeWith a title
 */
export interface NodeWithTitle {
  __typename?:
    | "MediaItem"
    | "NewEvent"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "PressCoverage"
    | "PressRelease"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "TeamMember";
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  $on: $NodeWithTitle;
}

/**
 * A node that can have trackbacks and pingbacks
 */
export interface NodeWithTrackbacks {
  __typename?: "Post";
  /**
   * Whether the pings are open or closed for this particular post.
   */
  pingStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * URLs that have been pinged.
   */
  pinged?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * URLs queued to be pinged.
   */
  toPing?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  $on: $NodeWithTrackbacks;
}

/**
 * A Gravity Forms   field.
 */
export interface NumberField {
  __typename?: "NumberField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The formula used for the number field.
   */
  calculationFormula?: Maybe<ScalarsEnums["String"]>;
  /**
   * Specifies to how many decimal places the number should be rounded. This is available when isCalculation is true, but is not available when the chosen format is “Currency”.
   */
  calculationRounding?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Indicates whether the number field is a calculation.
   */
  isCalculation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the format allowed for the number field.
   */
  numberFormat?: Maybe<ScalarsEnums["NumberFieldFormatEnum"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
   */
  rangeMax?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
   */
  rangeMin?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The page type
 */
export interface Page {
  __typename?: "Page";
  /**
   * Added to the GraphQL Schema because the ACF Field Group &quot;Static Page - 3 Column&quot; was set to Show in GraphQL.
   */
  ThreeColumnStaticPage?: Maybe<Page_Threecolumnstaticpage>;
  /**
   * Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * bodyClasses
   */
  bodyClasses?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the HierarchicalContentNode type and the ContentNode type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  /**
   * The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
   */
  commentCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the comments are open or closed for this particular post.
   */
  commentStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the page type and the Comment type
   */
  comments: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PageToCommentConnectionWhereArgs>;
  }) => Maybe<PageToCommentConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the page object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether this page is set to the static front page.
   */
  isFrontPage: ScalarsEnums["Boolean"];
  /**
   * Whether this page is set to the blog posts page.
   */
  isPostsPage: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this page is set to the privacy page.
   */
  isPrivacyPage: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * True if the node is a revision of another node
   */
  isRevision?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
   */
  menuOrder?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pageId: ScalarsEnums["Int"];
  /**
   * The parent of the node. The parent object can be of various types
   */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Connection between the page type and the page type
   */
  preview?: Maybe<PageToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
   */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /**
   * Connection between the page type and the page type
   */
  revisions: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PageToRevisionConnectionWhereArgs>;
  }) => Maybe<PageToRevisionConnection>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Added to the GraphQL Schema because the ACF Field Group &quot;Standard Page&quot; was set to Show in GraphQL.
   */
  standardPage?: Maybe<Page_Standardpage>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * Added to the GraphQL Schema because the ACF Field Group &quot;Success Stories&quot; was set to Show in GraphQL.
   */
  successStoriesACF?: Maybe<Page_Successstoriesacf>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PageField {
  __typename?: "PageField";
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * An array containing the the individual properties for the &quot;Next&quot; button.
   */
  nextButton?: Maybe<FormButton>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * An array containing the the individual properties for the &quot;Previous&quot; button.
   */
  previousButton?: Maybe<FormButton>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Connection between the page type and the Comment type
 */
export interface PageToCommentConnection {
  __typename?: "PageToCommentConnection";
  /**
   * Edges for the PageToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<PageToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PageToCommentConnectionEdge {
  __typename?: "PageToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Connection between the page type and the page type
 */
export interface PageToPreviewConnectionEdge {
  __typename?: "PageToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Page>;
}

/**
 * Connection between the page type and the page type
 */
export interface PageToRevisionConnection {
  __typename?: "PageToRevisionConnection";
  /**
   * Edges for the pageToRevisionConnection connection
   */
  edges?: Maybe<Array<Maybe<PageToRevisionConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Page>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PageToRevisionConnectionEdge {
  __typename?: "PageToRevisionConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Page>;
}

/**
 * Field Group
 */
export interface Page_Standardpage {
  __typename?: "Page_Standardpage";
  buttonLink?: Maybe<AcfLink>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Add Hero Banner Image
   */
  heroBanner?: Maybe<MediaItem>;
  heroButton?: Maybe<ScalarsEnums["String"]>;
  heroDescription?: Maybe<ScalarsEnums["String"]>;
  /**
   * Add Hero Title
   */
  heroTitle?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Field Group
 */
export interface Page_Successstoriesacf {
  __typename?: "Page_Successstoriesacf";
  carouselSlider?: Maybe<Array<Maybe<Page_Successstoriesacf_carouselSlider>>>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  footerContent?: Maybe<ScalarsEnums["String"]>;
  pageLargeSlider?: Maybe<Array<Maybe<Page_Successstoriesacf_pageLargeSlider>>>;
  suggestedResources?: Maybe<
    Array<Maybe<Page_Successstoriesacf_suggestedResources>>
  >;
}

/**
 * Field Group
 */
export interface Page_Successstoriesacf_carouselSlider {
  __typename?: "Page_Successstoriesacf_carouselSlider";
  carouselContent?: Maybe<ScalarsEnums["String"]>;
  carouselImage?: Maybe<MediaItem>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Field Group
 */
export interface Page_Successstoriesacf_pageLargeSlider {
  __typename?: "Page_Successstoriesacf_pageLargeSlider";
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  sliderContent?: Maybe<ScalarsEnums["String"]>;
  sliderImage?: Maybe<MediaItem>;
}

/**
 * Field Group
 */
export interface Page_Successstoriesacf_suggestedResources {
  __typename?: "Page_Successstoriesacf_suggestedResources";
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  link?: Maybe<ScalarsEnums["String"]>;
  resourceContent?: Maybe<ScalarsEnums["String"]>;
  svgIcon?: Maybe<MediaItem>;
}

/**
 * Field Group
 */
export interface Page_Threecolumnstaticpage {
  __typename?: "Page_Threecolumnstaticpage";
  banner?: Maybe<Page_Threecolumnstaticpage_Banner>;
  cards?: Maybe<Array<Maybe<Page_Threecolumnstaticpage_cards>>>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  financeSolution?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Field Group
 */
export interface Page_Threecolumnstaticpage_Banner {
  __typename?: "Page_Threecolumnstaticpage_Banner";
  bannerButton?: Maybe<ScalarsEnums["String"]>;
  bannerDescription?: Maybe<ScalarsEnums["String"]>;
  bannerImage?: Maybe<MediaItem>;
  bannerTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  mobileBannerImage?: Maybe<MediaItem>;
}

/**
 * Field Group
 */
export interface Page_Threecolumnstaticpage_cards {
  __typename?: "Page_Threecolumnstaticpage_cards";
  buttonLink?: Maybe<ScalarsEnums["String"]>;
  cardButton?: Maybe<ScalarsEnums["String"]>;
  cardContent?: Maybe<ScalarsEnums["String"]>;
  cardTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  svgIcon?: Maybe<MediaItem>;
}

/**
 * The partner type
 */
export interface Partner {
  __typename?: "Partner";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  heroBanner?: Maybe<MediaItem>;
  heroButton?: Maybe<ScalarsEnums["String"]>;
  heroSubtitle?: Maybe<ScalarsEnums["String"]>;
  heroTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the partner object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  partnerId: ScalarsEnums["Int"];
  partnerTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the partner type and the partner type
   */
  preview?: Maybe<PartnerToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the partner type and the partner type
 */
export interface PartnerToPreviewConnectionEdge {
  __typename?: "PartnerToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Partner>;
}

/**
 * A Gravity Forms   field.
 */
export interface PasswordField {
  __typename?: "PasswordField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates whether the field displays the password strength indicator.
   */
  hasPasswordStrengthIndicator?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the Password visibility toggle should be enabled for this field.
   */
  hasPasswordVisibilityToggle?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the password field.
   */
  inputs?: Maybe<Array<Maybe<PasswordInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Indicates how strong the password should be.
   */
  minPasswordStrength?: Maybe<ScalarsEnums["PasswordFieldMinStrengthEnum"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Password input values.
 */
export interface PasswordInputProperty {
  __typename?: "PasswordInputProperty";
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Whether or not this field should be hidden.
   */
  isHidden?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PhoneField {
  __typename?: "PhoneField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation.
   */
  phoneFormat?: Maybe<ScalarsEnums["PhoneFieldFormatEnum"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * An plugin object
 */
export interface Plugin {
  __typename?: "Plugin";
  /**
   * Name of the plugin author(s), may also be a company name.
   */
  author?: Maybe<ScalarsEnums["String"]>;
  /**
   * URI for the related author(s)/company website.
   */
  authorUri?: Maybe<ScalarsEnums["String"]>;
  /**
   * Description of the plugin.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the plugin object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Display name of the plugin.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Plugin path.
   */
  path?: Maybe<ScalarsEnums["String"]>;
  /**
   * URI for the plugin website. This is useful for directing users for support requests etc.
   */
  pluginUri?: Maybe<ScalarsEnums["String"]>;
  /**
   * Current version of the plugin.
   */
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The post type
 */
export interface Post {
  __typename?: "Post";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * bodyClasses
   */
  bodyClasses?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the post type and the category type
   */
  categories: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToCategoryConnectionWhereArgs>;
  }) => Maybe<PostToCategoryConnection>;
  /**
   * Co Authors
   */
  coAuthors?: Maybe<ScalarsEnums["String"]>;
  /**
   * The number of comments. Even though WPGraphQL denotes this field as an integer, in WordPress this field should be saved as a numeric string for compatibility.
   */
  commentCount?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the comments are open or closed for this particular post.
   */
  commentStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the post type and the Comment type
   */
  comments: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToCommentConnectionWhereArgs>;
  }) => Maybe<PostToCommentConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The excerpt of the post.
   */
  excerpt: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the post object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * True if the node is a revision of another node
   */
  isRevision?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether this page is sticky
   */
  isSticky: ScalarsEnums["Boolean"];
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the pings are open or closed for this particular post.
   */
  pingStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * URLs that have been pinged.
   */
  pinged?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the post type and the postFormat type
   */
  postFormats: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToPostFormatConnectionWhereArgs>;
  }) => Maybe<PostToPostFormatConnection>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  postId: ScalarsEnums["Int"];
  /**
   * Connection between the post type and the post type
   */
  preview?: Maybe<PostToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
   */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /**
   * Connection between the post type and the post type
   */
  revisions: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToRevisionConnectionWhereArgs>;
  }) => Maybe<PostToRevisionConnection>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the post type and the tag type
   */
  tags: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToTagConnectionWhereArgs>;
  }) => Maybe<PostToTagConnection>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the post type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostToTermNodeConnectionWhereArgs>;
  }) => Maybe<PostToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * URLs queued to be pinged.
   */
  toPing?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_category field.
 */
export interface PostCategoryCheckboxField {
  __typename?: "PostCategoryCheckboxField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Checkbox field value.
   */
  checkboxValues?: Maybe<Array<Maybe<CheckboxFieldValue>>>;
  /**
   * The available choices for the post_category field.
   */
  choices?: Maybe<Array<Maybe<PostCategoryFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The dropdown placeholder for the field.
   */
  dropdownPlaceholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
   */
  hasAllCategories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the \&quot;select all\&quot; choice should be displayed.
   */
  hasSelectAll?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_category field.
   */
  inputs?: Maybe<Array<Maybe<PostCategoryInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostCategoryField {
  __typename?:
    | "PostCategoryCheckboxField"
    | "PostCategoryMultiSelectField"
    | "PostCategoryRadioField"
    | "PostCategorySelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_category field.
   */
  choices?: Maybe<Array<Maybe<PostCategoryFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The dropdown placeholder for the field.
   */
  dropdownPlaceholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
   */
  hasAllCategories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
  $on: $PostCategoryField;
}

/**
 * Post_category choice values.
 */
export interface PostCategoryFieldChoice {
  __typename?: "PostCategoryFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Post_category input values.
 */
export interface PostCategoryInputProperty {
  __typename?: "PostCategoryInputProperty";
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_category field.
 */
export interface PostCategoryMultiSelectField {
  __typename?: "PostCategoryMultiSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_category field.
   */
  choices?: Maybe<Array<Maybe<PostCategoryFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The dropdown placeholder for the field.
   */
  dropdownPlaceholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
   */
  hasAllCategories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_category field.
 */
export interface PostCategoryRadioField {
  __typename?: "PostCategoryRadioField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_category field.
   */
  choices?: Maybe<Array<Maybe<PostCategoryFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The dropdown placeholder for the field.
   */
  dropdownPlaceholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
   */
  hasAllCategories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
   */
  hasOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_category field.
 */
export interface PostCategorySelectField {
  __typename?: "PostCategorySelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_category field.
   */
  choices?: Maybe<Array<Maybe<PostCategoryFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The dropdown placeholder for the field.
   */
  dropdownPlaceholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if all categories should be displayed on the Post Category drop down. If this property is true (display all categories), the Post Category drop down will display the categories hierarchically.
   */
  hasAllCategories?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostContentField {
  __typename?: "PostContentField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates whether the field uses the rich text editor interface.
   */
  hasRichTextEditor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomCheckboxField {
  __typename?: "PostCustomCheckboxField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Checkbox field value.
   */
  checkboxValues?: Maybe<Array<Maybe<CheckboxFieldValue>>>;
  /**
   * The available choices for the post_custom_field field.
   */
  choices?: Maybe<Array<Maybe<PostCustomCheckboxFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the \&quot;select all\&quot; choice should be displayed.
   */
  hasSelectAll?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_custom_field field.
   */
  inputs?: Maybe<Array<Maybe<PostCustomInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field choice values.
 */
export interface PostCustomCheckboxFieldChoice {
  __typename?: "PostCustomCheckboxFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomDateField {
  __typename?: "PostCustomDateField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines how the date field displays it’s calendar icon.
   */
  calendarIconType?: Maybe<ScalarsEnums["FormFieldCalendarIconTypeEnum"]>;
  /**
   * Contains the URL to the custom calendar icon. Only applicable when calendarIconType is set to custom.
   */
  calendarIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines how the date is displayed.
   */
  dateFormat?: Maybe<ScalarsEnums["DateFieldFormatEnum"]>;
  /**
   * The type of date field to display.
   */
  dateType?: Maybe<ScalarsEnums["DateFieldTypeEnum"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_custom_field field.
   */
  inputs?: Maybe<Array<Maybe<PostCustomInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomEmailField {
  __typename?: "PostCustomEmailField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines whether the Confirm Email field is active.
   */
  hasEmailConfirmation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_custom_field field.
   */
  inputs?: Maybe<Array<Maybe<PostCustomInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostCustomField {
  __typename?:
    | "PostCustomCheckboxField"
    | "PostCustomDateField"
    | "PostCustomEmailField"
    | "PostCustomFileuploadField"
    | "PostCustomHiddenField"
    | "PostCustomListField"
    | "PostCustomMultiSelectField"
    | "PostCustomNumberField"
    | "PostCustomPhoneField"
    | "PostCustomRadioField"
    | "PostCustomSelectField"
    | "PostCustomTextAreaField"
    | "PostCustomTextField"
    | "PostCustomTimeField"
    | "PostCustomWebsiteField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
  $on: $PostCustomField;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomFileuploadField {
  __typename?: "PostCustomFileuploadField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * A comma-delimited list of the file extensions which may be uploaded.
   */
  allowedExtensions?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Indicates whether multiple files may be uploaded.
   */
  canAcceptMultipleFiles?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The maximum size (in MB) an uploaded file may be .
   */
  maxFileSize?: Maybe<ScalarsEnums["Int"]>;
  /**
   * When the field is set to allow multiple files to be uploaded, this property is available to set a limit on how many may be uploaded.
   */
  maxFiles?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomHiddenField {
  __typename?: "PostCustomHiddenField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field input values.
 */
export interface PostCustomInputProperty {
  __typename?: "PostCustomInputProperty";
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomListField {
  __typename?: "PostCustomListField";
  /**
   * The URL of the image to be used for the add row button.
   */
  addIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_custom_field field.
   */
  choices?: Maybe<Array<Maybe<PostCustomListFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * The URL of the image to be used for the delete row button.
   */
  deleteIconUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field should use multiple columns. Default is false.
   */
  hasColumns?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * List field value.
   */
  listValues?: Maybe<Array<Maybe<ListFieldValue>>>;
  /**
   * The maximum number of rows the user can add to the field.
   */
  maxRows?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field choice values.
 */
export interface PostCustomListFieldChoice {
  __typename?: "PostCustomListFieldChoice";
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomMultiSelectField {
  __typename?: "PostCustomMultiSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_custom_field field.
   */
  choices?: Maybe<Array<Maybe<PostCustomMultiSelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field choice values.
 */
export interface PostCustomMultiSelectFieldChoice {
  __typename?: "PostCustomMultiSelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomNumberField {
  __typename?: "PostCustomNumberField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The formula used for the number field.
   */
  calculationFormula?: Maybe<ScalarsEnums["String"]>;
  /**
   * Specifies to how many decimal places the number should be rounded. This is available when isCalculation is true, but is not available when the chosen format is “Currency”.
   */
  calculationRounding?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Indicates whether the number field is a calculation.
   */
  isCalculation?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the format allowed for the number field.
   */
  numberFormat?: Maybe<ScalarsEnums["NumberFieldFormatEnum"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Maximum allowed value for a number field. Values higher than the number specified by this property will cause the field to fail validation.
   */
  rangeMax?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Minimum allowed value for a number field. Values lower than the number specified by this property will cause the field to fail validation.
   */
  rangeMin?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomPhoneField {
  __typename?: "PostCustomPhoneField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines the allowed format for phones. If the phone value does not conform with the specified format, the field will fail validation.
   */
  phoneFormat?: Maybe<ScalarsEnums["PhoneFieldFormatEnum"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomRadioField {
  __typename?: "PostCustomRadioField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_custom_field field.
   */
  choices?: Maybe<Array<Maybe<PostCustomRadioFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
   */
  hasOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field choice values.
 */
export interface PostCustomRadioFieldChoice {
  __typename?: "PostCustomRadioFieldChoice";
  /**
   * Indicates the radio button item is the “Other” choice.
   */
  isOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomSelectField {
  __typename?: "PostCustomSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_custom_field field.
   */
  choices?: Maybe<Array<Maybe<PostCustomSelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_custom_field choice values.
 */
export interface PostCustomSelectFieldChoice {
  __typename?: "PostCustomSelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomTextAreaField {
  __typename?: "PostCustomTextAreaField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates whether the field uses the rich text editor interface.
   */
  hasRichTextEditor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomTextField {
  __typename?: "PostCustomTextField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the field has an input mask.
   */
  hasInputMask?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The pattern used for the input mask.
   */
  inputMaskValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if a text field input tag should be created with a &quot;password&quot; type.
   */
  isPasswordInput?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomTimeField {
  __typename?: "PostCustomTimeField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_custom_field field.
   */
  inputs?: Maybe<Array<Maybe<PostCustomInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * Determines how the time is displayed.
   */
  timeFormat?: Maybe<ScalarsEnums["TimeFieldFormatEnum"]>;
  /**
   * Time field value.
   */
  timeValues?: Maybe<TimeFieldValue>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_custom_field field.
 */
export interface PostCustomWebsiteField {
  __typename?: "PostCustomWebsiteField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * The post meta key to which the value should be assigned.
   */
  postMetaFieldName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostExcerptField {
  __typename?: "PostExcerptField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The postFormat type
 */
export interface PostFormat {
  __typename?: "PostFormat";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the postFormat type and the ContentNode type
   */
  contentNodes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostFormatToContentNodeConnectionWhereArgs>;
  }) => Maybe<PostFormatToContentNodeConnection>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  postFormatId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the postFormat type and the post type
   */
  posts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostFormatToPostConnectionWhereArgs>;
  }) => Maybe<PostFormatToPostConnection>;
  /**
   * Connection between the postFormat type and the ProductsService type
   */
  productsServices: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PostFormatToProductsServiceConnectionWhereArgs>;
  }) => Maybe<PostFormatToProductsServiceConnection>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the postFormat type and the Taxonomy type
   */
  taxonomy?: Maybe<PostFormatToTaxonomyConnectionEdge>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the postFormat type and the ContentNode type
 */
export interface PostFormatToContentNodeConnection {
  __typename?: "PostFormatToContentNodeConnection";
  /**
   * Edges for the PostFormatToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<PostFormatToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostFormatToContentNodeConnectionEdge {
  __typename?: "PostFormatToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the postFormat type and the post type
 */
export interface PostFormatToPostConnection {
  __typename?: "PostFormatToPostConnection";
  /**
   * Edges for the PostFormatToPostConnection connection
   */
  edges?: Maybe<Array<Maybe<PostFormatToPostConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostFormatToPostConnectionEdge {
  __typename?: "PostFormatToPostConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the postFormat type and the ProductsService type
 */
export interface PostFormatToProductsServiceConnection {
  __typename?: "PostFormatToProductsServiceConnection";
  /**
   * Edges for the PostFormatToProductsServiceConnection connection
   */
  edges?: Maybe<Array<Maybe<PostFormatToProductsServiceConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ProductsService>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostFormatToProductsServiceConnectionEdge {
  __typename?: "PostFormatToProductsServiceConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ProductsService>;
}

/**
 * Connection between the postFormat type and the Taxonomy type
 */
export interface PostFormatToTaxonomyConnectionEdge {
  __typename?: "PostFormatToTaxonomyConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Taxonomy>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostImageField {
  __typename?: "PostImageField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * A comma-delimited list of the file extensions which may be uploaded.
   */
  allowedExtensions?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Controls the visibility of the alt metadata for Post Image fields.
   */
  hasAlt?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the caption metadata for Post Image fields.
   */
  hasCaption?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the description metadata for Post Image fields.
   */
  hasDescription?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the title metadata for Post Image fields.
   */
  hasTitle?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Name field value.
   */
  imageValues?: Maybe<ImageFieldValue>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Whether the image field should be used to set the post&#039;s Featured Image
   */
  isFeaturedImage?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms  post_tags field.
 */
export interface PostTagsCheckboxField {
  __typename?: "PostTagsCheckboxField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Checkbox field value.
   */
  checkboxValues?: Maybe<Array<Maybe<CheckboxFieldValue>>>;
  /**
   * The available choices for the post_tags field.
   */
  choices?: Maybe<Array<Maybe<PostTagsCheckboxFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the \&quot;select all\&quot; choice should be displayed.
   */
  hasSelectAll?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the post_tags field.
   */
  inputs?: Maybe<Array<Maybe<PostTagsInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_tags choice values.
 */
export interface PostTagsCheckboxFieldChoice {
  __typename?: "PostTagsCheckboxFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostTagsField {
  __typename?:
    | "PostTagsCheckboxField"
    | "PostTagsMultiSelectField"
    | "PostTagsRadioField"
    | "PostTagsSelectField"
    | "PostTagsTextField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
  $on: $PostTagsField;
}

/**
 * Post_tags input values.
 */
export interface PostTagsInputProperty {
  __typename?: "PostTagsInputProperty";
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_tags field.
 */
export interface PostTagsMultiSelectField {
  __typename?: "PostTagsMultiSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_tags field.
   */
  choices?: Maybe<Array<Maybe<PostTagsMultiSelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Checkbox field value.
   */
  values?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_tags choice values.
 */
export interface PostTagsMultiSelectFieldChoice {
  __typename?: "PostTagsMultiSelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_tags field.
 */
export interface PostTagsRadioField {
  __typename?: "PostTagsRadioField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_tags field.
   */
  choices?: Maybe<Array<Maybe<PostTagsRadioFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
   */
  hasOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_tags choice values.
 */
export interface PostTagsRadioFieldChoice {
  __typename?: "PostTagsRadioFieldChoice";
  /**
   * Indicates the radio button item is the “Other” choice.
   */
  isOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_tags field.
 */
export interface PostTagsSelectField {
  __typename?: "PostTagsSelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the post_tags field.
   */
  choices?: Maybe<Array<Maybe<PostTagsSelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Post_tags choice values.
 */
export interface PostTagsSelectFieldChoice {
  __typename?: "PostTagsSelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms  post_tags field.
 */
export interface PostTagsTextField {
  __typename?: "PostTagsTextField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the field has an input mask.
   */
  hasInputMask?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The pattern used for the input mask.
   */
  inputMaskValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if a text field input tag should be created with a &quot;password&quot; type.
   */
  isPasswordInput?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface PostTitleField {
  __typename?: "PostTitleField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Connection between the post type and the category type
 */
export interface PostToCategoryConnection {
  __typename?: "PostToCategoryConnection";
  /**
   * Edges for the PostToCategoryConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToCategoryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Category>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToCategoryConnectionEdge {
  __typename?: "PostToCategoryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Category>;
}

/**
 * Connection between the post type and the Comment type
 */
export interface PostToCommentConnection {
  __typename?: "PostToCommentConnection";
  /**
   * Edges for the PostToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToCommentConnectionEdge {
  __typename?: "PostToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Connection between the post type and the postFormat type
 */
export interface PostToPostFormatConnection {
  __typename?: "PostToPostFormatConnection";
  /**
   * Edges for the PostToPostFormatConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToPostFormatConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<PostFormat>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToPostFormatConnectionEdge {
  __typename?: "PostToPostFormatConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<PostFormat>;
}

/**
 * Connection between the post type and the post type
 */
export interface PostToPreviewConnectionEdge {
  __typename?: "PostToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the post type and the post type
 */
export interface PostToRevisionConnection {
  __typename?: "PostToRevisionConnection";
  /**
   * Edges for the postToRevisionConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToRevisionConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToRevisionConnectionEdge {
  __typename?: "PostToRevisionConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the post type and the tag type
 */
export interface PostToTagConnection {
  __typename?: "PostToTagConnection";
  /**
   * Edges for the PostToTagConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToTagConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Tag>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToTagConnectionEdge {
  __typename?: "PostToTagConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Tag>;
}

/**
 * Connection between the post type and the TermNode type
 */
export interface PostToTermNodeConnection {
  __typename?: "PostToTermNodeConnection";
  /**
   * Edges for the PostToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<PostToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PostToTermNodeConnectionEdge {
  __typename?: "PostToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * Details for labels of the PostType
 */
export interface PostTypeLabelDetails {
  __typename?: "PostTypeLabelDetails";
  /**
   * Default is ‘Add New’ for both hierarchical and non-hierarchical types.
   */
  addNew?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for adding a new singular item.
   */
  addNewItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label to signify all items in a submenu link.
   */
  allItems?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for archives in nav menus
   */
  archives?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the attributes meta box.
   */
  attributes?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for editing a singular item.
   */
  editItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the Featured Image meta box title.
   */
  featuredImage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the table views hidden heading.
   */
  filterItemsList?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the media frame button.
   */
  insertIntoItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the table hidden heading.
   */
  itemsList?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the table pagination hidden heading.
   */
  itemsListNavigation?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the menu name.
   */
  menuName?: Maybe<ScalarsEnums["String"]>;
  /**
   * General name for the post type, usually plural.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the new item page title.
   */
  newItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label used when no items are found.
   */
  notFound?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label used when no items are in the trash.
   */
  notFoundInTrash?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label used to prefix parents of hierarchical items.
   */
  parentItemColon?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for removing the featured image.
   */
  removeFeaturedImage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for searching plural items.
   */
  searchItems?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for setting the featured image.
   */
  setFeaturedImage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Name for one object of this post type.
   */
  singularName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for the media frame filter.
   */
  uploadedToThisItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label in the media frame for using a featured image.
   */
  useFeaturedImage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for viewing a singular item.
   */
  viewItem?: Maybe<ScalarsEnums["String"]>;
  /**
   * Label for viewing post type archives.
   */
  viewItems?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The PressCoverage type
 */
export interface PressCoverage {
  __typename?: "PressCoverage";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the press_coverage object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pressCoverageId: ScalarsEnums["Int"];
  /**
   * Connection between the PressCoverage type and the PressCoverage type
   */
  preview?: Maybe<PressCoverageToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the PressCoverage type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PressCoverageToTermNodeConnectionWhereArgs>;
  }) => Maybe<PressCoverageToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the PressCoverage type and the PressCoverage type
 */
export interface PressCoverageToPreviewConnectionEdge {
  __typename?: "PressCoverageToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<PressCoverage>;
}

/**
 * Connection between the PressCoverage type and the TermNode type
 */
export interface PressCoverageToTermNodeConnection {
  __typename?: "PressCoverageToTermNodeConnection";
  /**
   * Edges for the PressCoverageToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<PressCoverageToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PressCoverageToTermNodeConnectionEdge {
  __typename?: "PressCoverageToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * The PressRelease type
 */
export interface PressRelease {
  __typename?: "PressRelease";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the press_releases object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  pressReleaseId: ScalarsEnums["Int"];
  /**
   * Connection between the PressRelease type and the PressRelease type
   */
  preview?: Maybe<PressReleaseToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the PressRelease type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<PressReleaseToTermNodeConnectionWhereArgs>;
  }) => Maybe<PressReleaseToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the PressRelease type and the PressRelease type
 */
export interface PressReleaseToPreviewConnectionEdge {
  __typename?: "PressReleaseToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<PressRelease>;
}

/**
 * Connection between the PressRelease type and the TermNode type
 */
export interface PressReleaseToTermNodeConnection {
  __typename?: "PressReleaseToTermNodeConnection";
  /**
   * Edges for the PressReleaseToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<PressReleaseToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface PressReleaseToTermNodeConnectionEdge {
  __typename?: "PressReleaseToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * The pro type
 */
export interface Pro {
  __typename?: "Pro";
  /**
   * The ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ProToAncestorsProConnection>;
  /**
   * Connection between the pro type and the pro type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<ProToProConnectionWhereArgs>;
  }) => Maybe<ProToProConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the pro type and the pro type
   */
  parent?: Maybe<ProToParentProConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  proId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the pro type and the Taxonomy type
   */
  taxonomy?: Maybe<ProToTaxonomyConnectionEdge>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the pro type and the pro type
 */
export interface ProToAncestorsProConnection {
  __typename?: "ProToAncestorsProConnection";
  /**
   * Edges for the ProToAncestorsProConnection connection
   */
  edges?: Maybe<Array<Maybe<ProToAncestorsProConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Pro>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ProToAncestorsProConnectionEdge {
  __typename?: "ProToAncestorsProConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Pro>;
}

/**
 * Connection between the pro type and the pro type
 */
export interface ProToParentProConnectionEdge {
  __typename?: "ProToParentProConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Pro>;
}

/**
 * Connection between the pro type and the pro type
 */
export interface ProToProConnection {
  __typename?: "ProToProConnection";
  /**
   * Edges for the ProToProConnection connection
   */
  edges?: Maybe<Array<Maybe<ProToProConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Pro>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ProToProConnectionEdge {
  __typename?: "ProToProConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Pro>;
}

/**
 * Connection between the pro type and the Taxonomy type
 */
export interface ProToTaxonomyConnectionEdge {
  __typename?: "ProToTaxonomyConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Taxonomy>;
}

/**
 * The productCard type
 */
export interface ProductCard {
  __typename?: "ProductCard";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the productcard object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the productCard type and the productCard type
   */
  preview?: Maybe<ProductCardToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * 1. Add Button Label
   * 2. Click On Link Icon
   * 3. Add Link
   */
  productCardButton?: Maybe<ScalarsEnums["String"]>;
  productCardDescription?: Maybe<ScalarsEnums["String"]>;
  productCardIcon?: Maybe<MediaItem>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  productCardId: ScalarsEnums["Int"];
  productCardTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the productCard type and the productCard type
 */
export interface ProductCardToPreviewConnectionEdge {
  __typename?: "ProductCardToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ProductCard>;
}

/**
 * The ProductsService type
 */
export interface ProductsService {
  __typename?: "ProductsService";
  /**
   * Returns ancestors of the node. Default ordered as lowest (closest to the child) to highest (closest to the root).
   */
  ancestors: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeAncestorsConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeAncestorsConnection>;
  /**
   * Connection between the HierarchicalContentNode type and the ContentNode type
   */
  children: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<HierarchicalContentNodeToContentNodeChildrenConnectionWhereArgs>;
  }) => Maybe<HierarchicalContentNodeToContentNodeChildrenConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The content of the post.
   */
  content: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the products_services object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * True if the node is a revision of another node
   */
  isRevision?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * A field used for ordering posts. This is typically used with nav menu items or for special ordering of hierarchical content types.
   */
  menuOrder?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The parent of the node. The parent object can be of various types
   */
  parent?: Maybe<HierarchicalContentNodeToParentContentNodeConnectionEdge>;
  /**
   * Database id of the parent node
   */
  parentDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the parent node.
   */
  parentId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * Connection between the ProductsService type and the postFormat type
   */
  postFormats: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<ProductsServiceToPostFormatConnectionWhereArgs>;
  }) => Maybe<ProductsServiceToPostFormatConnection>;
  /**
   * Connection between the ProductsService type and the ProductsService type
   */
  preview?: Maybe<ProductsServiceToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  productsServiceId: ScalarsEnums["Int"];
  /**
   * If the current node is a revision, this field exposes the node this is a revision of. Returns null if the node is not a revision of another node.
   */
  revisionOf?: Maybe<NodeWithRevisionsToContentNodeConnectionEdge>;
  /**
   * Connection between the ProductsService type and the ProductsService type
   */
  revisions: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<ProductsServiceToRevisionConnectionWhereArgs>;
  }) => Maybe<ProductsServiceToRevisionConnection>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Added to the GraphQL Schema because the ACF Field Group &quot;Products&quot; was set to Show in GraphQL.
   */
  standardPage?: Maybe<ProductsService_Standardpage>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the ProductsService type and the TermNode type
   */
  terms: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<ProductsServiceToTermNodeConnectionWhereArgs>;
  }) => Maybe<ProductsServiceToTermNodeConnection>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the ProductsService type and the postFormat type
 */
export interface ProductsServiceToPostFormatConnection {
  __typename?: "ProductsServiceToPostFormatConnection";
  /**
   * Edges for the ProductsServiceToPostFormatConnection connection
   */
  edges?: Maybe<Array<Maybe<ProductsServiceToPostFormatConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<PostFormat>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ProductsServiceToPostFormatConnectionEdge {
  __typename?: "ProductsServiceToPostFormatConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<PostFormat>;
}

/**
 * Connection between the ProductsService type and the ProductsService type
 */
export interface ProductsServiceToPreviewConnectionEdge {
  __typename?: "ProductsServiceToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<ProductsService>;
}

/**
 * Connection between the ProductsService type and the ProductsService type
 */
export interface ProductsServiceToRevisionConnection {
  __typename?: "ProductsServiceToRevisionConnection";
  /**
   * Edges for the ProductsServiceToRevisionConnection connection
   */
  edges?: Maybe<Array<Maybe<ProductsServiceToRevisionConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ProductsService>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ProductsServiceToRevisionConnectionEdge {
  __typename?: "ProductsServiceToRevisionConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ProductsService>;
}

/**
 * Connection between the ProductsService type and the TermNode type
 */
export interface ProductsServiceToTermNodeConnection {
  __typename?: "ProductsServiceToTermNodeConnection";
  /**
   * Edges for the ProductsServiceToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<ProductsServiceToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface ProductsServiceToTermNodeConnectionEdge {
  __typename?: "ProductsServiceToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * Field Group
 */
export interface ProductsService_Standardpage {
  __typename?: "ProductsService_Standardpage";
  buttonLink?: Maybe<AcfLink>;
  /**
   * The name of the ACF Field Group
   */
  fieldGroupName?: Maybe<ScalarsEnums["String"]>;
  heroBanner?: Maybe<MediaItem>;
  heroButton?: Maybe<ScalarsEnums["String"]>;
  heroDescription?: Maybe<ScalarsEnums["String"]>;
  heroTitle?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The project type
 */
export interface Project {
  __typename?: "Project";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  contactName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  cost?: Maybe<ScalarsEnums["Float"]>;
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  dateOfService?: Maybe<ScalarsEnums["String"]>;
  descriptionOfWork?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the project object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the project type and the project type
   */
  preview?: Maybe<ProjectToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  projectId: ScalarsEnums["Int"];
  propertyPhoto?: Maybe<MediaItem>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  streetAddress?: Maybe<ScalarsEnums["String"]>;
  /**
   * The template assigned to the node
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  workOrderNumber?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the project type and the project type
 */
export interface ProjectToPreviewConnectionEdge {
  __typename?: "ProjectToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Project>;
}

/**
 * A Gravity Forms   field.
 */
export interface RadioField {
  __typename?: "RadioField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the radio field.
   */
  choices?: Maybe<Array<Maybe<RadioFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Indicates whether the &#039;Enable &quot;other&quot; choice&#039; option is checked in the editor.
   */
  hasOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Radio choice values.
 */
export interface RadioFieldChoice {
  __typename?: "RadioFieldChoice";
  /**
   * Indicates the radio button item is the “Other” choice.
   */
  isOtherChoice?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The reading setting type
 */
export interface ReadingSettings {
  __typename?: "ReadingSettings";
  /**
   * Blog pages show at most.
   */
  postsPerPage?: Maybe<ScalarsEnums["Int"]>;
}

/**
 * The payload for the registerUser mutation
 */
export interface RegisterUserPayload {
  __typename?: "RegisterUserPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The User object mutation type.
   */
  user?: Maybe<User>;
}

/**
 * The payload for the resetUserPassword mutation
 */
export interface ResetUserPasswordPayload {
  __typename?: "ResetUserPasswordPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The User object mutation type.
   */
  user?: Maybe<User>;
}

/**
 * The payload for the restoreComment mutation
 */
export interface RestoreCommentPayload {
  __typename?: "RestoreCommentPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The restored comment object
   */
  comment?: Maybe<Comment>;
  /**
   * The ID of the restored comment
   */
  restoredId?: Maybe<ScalarsEnums["ID"]>;
}

/**
 * Connection between the RootQuery type and the category type
 */
export interface RootQueryToCategoryConnection {
  __typename?: "RootQueryToCategoryConnection";
  /**
   * Edges for the RootQueryToCategoryConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToCategoryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Category>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToCategoryConnectionEdge {
  __typename?: "RootQueryToCategoryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Category>;
}

/**
 * Connection between the RootQuery type and the Comment type
 */
export interface RootQueryToCommentConnection {
  __typename?: "RootQueryToCommentConnection";
  /**
   * Edges for the RootQueryToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToCommentConnectionEdge {
  __typename?: "RootQueryToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Connection between the RootQuery type and the ContentNode type
 */
export interface RootQueryToContentNodeConnection {
  __typename?: "RootQueryToContentNodeConnection";
  /**
   * Edges for the RootQueryToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToContentNodeConnectionEdge {
  __typename?: "RootQueryToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the RootQuery type and the ContentRevisionUnion type
 */
export interface RootQueryToContentRevisionUnionConnection {
  __typename?: "RootQueryToContentRevisionUnionConnection";
  /**
   * Edges for the RootQueryToContentRevisionUnionConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToContentRevisionUnionConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentRevisionUnion>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToContentRevisionUnionConnectionEdge {
  __typename?: "RootQueryToContentRevisionUnionConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentRevisionUnion>;
}

/**
 * Connection between the RootQuery type and the ContentType type
 */
export interface RootQueryToContentTypeConnection {
  __typename?: "RootQueryToContentTypeConnection";
  /**
   * Edges for the RootQueryToContentTypeConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToContentTypeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentType>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToContentTypeConnectionEdge {
  __typename?: "RootQueryToContentTypeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentType>;
}

/**
 * Connection between the RootQuery type and the EnqueuedScript type
 */
export interface RootQueryToEnqueuedScriptConnection {
  __typename?: "RootQueryToEnqueuedScriptConnection";
  /**
   * Edges for the RootQueryToEnqueuedScriptConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToEnqueuedScriptConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToEnqueuedScriptConnectionEdge {
  __typename?: "RootQueryToEnqueuedScriptConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedScript>;
}

/**
 * Connection between the RootQuery type and the EnqueuedStylesheet type
 */
export interface RootQueryToEnqueuedStylesheetConnection {
  __typename?: "RootQueryToEnqueuedStylesheetConnection";
  /**
   * Edges for the RootQueryToEnqueuedStylesheetConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToEnqueuedStylesheetConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToEnqueuedStylesheetConnectionEdge {
  __typename?: "RootQueryToEnqueuedStylesheetConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedStylesheet>;
}

/**
 * Connection between the RootQuery type and the GfEntry type
 */
export interface RootQueryToGfEntryConnection {
  __typename?: "RootQueryToGfEntryConnection";
  /**
   * Edges for the RootQueryToGfEntryConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToGfEntryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<GfEntry>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToGfEntryConnectionEdge {
  __typename?: "RootQueryToGfEntryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<GfEntry>;
}

/**
 * Connection between the RootQuery type and the GfForm type
 */
export interface RootQueryToGfFormConnection {
  __typename?: "RootQueryToGfFormConnection";
  /**
   * Edges for the RootQueryToGfFormConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToGfFormConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<GfForm>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToGfFormConnectionEdge {
  __typename?: "RootQueryToGfFormConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<GfForm>;
}

/**
 * Connection between the RootQuery type and the GfSubmittedEntry type
 */
export interface RootQueryToGfSubmittedEntryConnection {
  __typename?: "RootQueryToGfSubmittedEntryConnection";
  /**
   * Edges for the RootQueryToGfSubmittedEntryConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToGfSubmittedEntryConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<GfSubmittedEntry>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToGfSubmittedEntryConnectionEdge {
  __typename?: "RootQueryToGfSubmittedEntryConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<GfSubmittedEntry>;
}

/**
 * Connection between the RootQuery type and the mediaItem type
 */
export interface RootQueryToMediaItemConnection {
  __typename?: "RootQueryToMediaItemConnection";
  /**
   * Edges for the RootQueryToMediaItemConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToMediaItemConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<MediaItem>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToMediaItemConnectionEdge {
  __typename?: "RootQueryToMediaItemConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<MediaItem>;
}

/**
 * Connection between the RootQuery type and the Menu type
 */
export interface RootQueryToMenuConnection {
  __typename?: "RootQueryToMenuConnection";
  /**
   * Edges for the RootQueryToMenuConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToMenuConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Menu>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToMenuConnectionEdge {
  __typename?: "RootQueryToMenuConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Menu>;
}

/**
 * Connection between the RootQuery type and the MenuItem type
 */
export interface RootQueryToMenuItemConnection {
  __typename?: "RootQueryToMenuItemConnection";
  /**
   * Edges for the RootQueryToMenuItemConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToMenuItemConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<MenuItem>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToMenuItemConnectionEdge {
  __typename?: "RootQueryToMenuItemConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<MenuItem>;
}

/**
 * Connection between the RootQuery type and the newEvent type
 */
export interface RootQueryToNewEventConnection {
  __typename?: "RootQueryToNewEventConnection";
  /**
   * Edges for the RootQueryToNewEventConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToNewEventConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewEvent>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToNewEventConnectionEdge {
  __typename?: "RootQueryToNewEventConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewEvent>;
}

/**
 * Connection between the RootQuery type and the newMediaCenter type
 */
export interface RootQueryToNewMediaCenterConnection {
  __typename?: "RootQueryToNewMediaCenterConnection";
  /**
   * Edges for the RootQueryToNewMediaCenterConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToNewMediaCenterConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewMediaCenter>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToNewMediaCenterConnectionEdge {
  __typename?: "RootQueryToNewMediaCenterConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewMediaCenter>;
}

/**
 * Connection between the RootQuery type and the newPressCoverage type
 */
export interface RootQueryToNewPressCoverageConnection {
  __typename?: "RootQueryToNewPressCoverageConnection";
  /**
   * Edges for the RootQueryToNewPressCoverageConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToNewPressCoverageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressCoverage>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToNewPressCoverageConnectionEdge {
  __typename?: "RootQueryToNewPressCoverageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressCoverage>;
}

/**
 * Connection between the RootQuery type and the newPressRelease type
 */
export interface RootQueryToNewPressReleaseConnection {
  __typename?: "RootQueryToNewPressReleaseConnection";
  /**
   * Edges for the RootQueryToNewPressReleaseConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToNewPressReleaseConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressRelease>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToNewPressReleaseConnectionEdge {
  __typename?: "RootQueryToNewPressReleaseConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressRelease>;
}

/**
 * Connection between the RootQuery type and the page type
 */
export interface RootQueryToPageConnection {
  __typename?: "RootQueryToPageConnection";
  /**
   * Edges for the RootQueryToPageConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Page>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPageConnectionEdge {
  __typename?: "RootQueryToPageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Page>;
}

/**
 * Connection between the RootQuery type and the partner type
 */
export interface RootQueryToPartnerConnection {
  __typename?: "RootQueryToPartnerConnection";
  /**
   * Edges for the RootQueryToPartnerConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPartnerConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Partner>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPartnerConnectionEdge {
  __typename?: "RootQueryToPartnerConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Partner>;
}

/**
 * Connection between the RootQuery type and the Plugin type
 */
export interface RootQueryToPluginConnection {
  __typename?: "RootQueryToPluginConnection";
  /**
   * Edges for the RootQueryToPluginConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPluginConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Plugin>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPluginConnectionEdge {
  __typename?: "RootQueryToPluginConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Plugin>;
}

/**
 * Connection between the RootQuery type and the post type
 */
export interface RootQueryToPostConnection {
  __typename?: "RootQueryToPostConnection";
  /**
   * Edges for the RootQueryToPostConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPostConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPostConnectionEdge {
  __typename?: "RootQueryToPostConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the RootQuery type and the postFormat type
 */
export interface RootQueryToPostFormatConnection {
  __typename?: "RootQueryToPostFormatConnection";
  /**
   * Edges for the RootQueryToPostFormatConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPostFormatConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<PostFormat>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPostFormatConnectionEdge {
  __typename?: "RootQueryToPostFormatConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<PostFormat>;
}

/**
 * Connection between the RootQuery type and the PressCoverage type
 */
export interface RootQueryToPressCoverageConnection {
  __typename?: "RootQueryToPressCoverageConnection";
  /**
   * Edges for the RootQueryToPressCoverageConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPressCoverageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<PressCoverage>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPressCoverageConnectionEdge {
  __typename?: "RootQueryToPressCoverageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<PressCoverage>;
}

/**
 * Connection between the RootQuery type and the PressRelease type
 */
export interface RootQueryToPressReleaseConnection {
  __typename?: "RootQueryToPressReleaseConnection";
  /**
   * Edges for the RootQueryToPressReleaseConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToPressReleaseConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<PressRelease>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToPressReleaseConnectionEdge {
  __typename?: "RootQueryToPressReleaseConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<PressRelease>;
}

/**
 * Connection between the RootQuery type and the pro type
 */
export interface RootQueryToProConnection {
  __typename?: "RootQueryToProConnection";
  /**
   * Edges for the RootQueryToProConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToProConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Pro>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToProConnectionEdge {
  __typename?: "RootQueryToProConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Pro>;
}

/**
 * Connection between the RootQuery type and the productCard type
 */
export interface RootQueryToProductCardConnection {
  __typename?: "RootQueryToProductCardConnection";
  /**
   * Edges for the RootQueryToProductCardConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToProductCardConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ProductCard>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToProductCardConnectionEdge {
  __typename?: "RootQueryToProductCardConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ProductCard>;
}

/**
 * Connection between the RootQuery type and the ProductsService type
 */
export interface RootQueryToProductsServiceConnection {
  __typename?: "RootQueryToProductsServiceConnection";
  /**
   * Edges for the RootQueryToProductsServiceConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToProductsServiceConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ProductsService>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToProductsServiceConnectionEdge {
  __typename?: "RootQueryToProductsServiceConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ProductsService>;
}

/**
 * Connection between the RootQuery type and the project type
 */
export interface RootQueryToProjectConnection {
  __typename?: "RootQueryToProjectConnection";
  /**
   * Edges for the RootQueryToProjectConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToProjectConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToProjectConnectionEdge {
  __typename?: "RootQueryToProjectConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Project>;
}

/**
 * Connection between the RootQuery type and the tag type
 */
export interface RootQueryToTagConnection {
  __typename?: "RootQueryToTagConnection";
  /**
   * Edges for the RootQueryToTagConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToTagConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Tag>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToTagConnectionEdge {
  __typename?: "RootQueryToTagConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Tag>;
}

/**
 * Connection between the RootQuery type and the Taxonomy type
 */
export interface RootQueryToTaxonomyConnection {
  __typename?: "RootQueryToTaxonomyConnection";
  /**
   * Edges for the RootQueryToTaxonomyConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToTaxonomyConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Taxonomy>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToTaxonomyConnectionEdge {
  __typename?: "RootQueryToTaxonomyConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Taxonomy>;
}

/**
 * Connection between the RootQuery type and the teamMember type
 */
export interface RootQueryToTeamMemberConnection {
  __typename?: "RootQueryToTeamMemberConnection";
  /**
   * Edges for the RootQueryToTeamMemberConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToTeamMemberConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TeamMember>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToTeamMemberConnectionEdge {
  __typename?: "RootQueryToTeamMemberConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TeamMember>;
}

/**
 * Connection between the RootQuery type and the TermNode type
 */
export interface RootQueryToTermNodeConnection {
  __typename?: "RootQueryToTermNodeConnection";
  /**
   * Edges for the RootQueryToTermNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToTermNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TermNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToTermNodeConnectionEdge {
  __typename?: "RootQueryToTermNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TermNode>;
}

/**
 * Connection between the RootQuery type and the Theme type
 */
export interface RootQueryToThemeConnection {
  __typename?: "RootQueryToThemeConnection";
  /**
   * Edges for the RootQueryToThemeConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToThemeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Theme>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToThemeConnectionEdge {
  __typename?: "RootQueryToThemeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Theme>;
}

/**
 * Connection between the RootQuery type and the User type
 */
export interface RootQueryToUserConnection {
  __typename?: "RootQueryToUserConnection";
  /**
   * Edges for the RootQueryToUserConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToUserConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<User>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToUserConnectionEdge {
  __typename?: "RootQueryToUserConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<User>;
}

/**
 * Connection between the RootQuery type and the UserRole type
 */
export interface RootQueryToUserRoleConnection {
  __typename?: "RootQueryToUserRoleConnection";
  /**
   * Edges for the RootQueryToUserRoleConnection connection
   */
  edges?: Maybe<Array<Maybe<RootQueryToUserRoleConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<UserRole>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface RootQueryToUserRoleConnectionEdge {
  __typename?: "RootQueryToUserRoleConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<UserRole>;
}

/**
 * A Gravity Forms   field.
 */
export interface SectionField {
  __typename?: "SectionField";
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface SelectField {
  __typename?: "SelectField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The available choices for the select field.
   */
  choices?: Maybe<Array<Maybe<SelectFieldChoice>>>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field (checkbox, select or radio) have choice values enabled, which allows the field to have choice values different from the labels that are displayed to the user.
   */
  hasChoiceValue?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * When set to true, the &quot;Chosen&quot; jQuery script will be applied to this field, enabling search capabilities to Drop Down fields and a more user-friendly interface for Multi Select fields.
   */
  hasEnhancedUI?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * Select choice values.
 */
export interface SelectFieldChoice {
  __typename?: "SelectFieldChoice";
  /**
   * Determines if this choice should be selected by default when displayed. The value true will select the choice, whereas false will display it unselected.
   */
  isSelected?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The text to be displayed to the user when displaying this choice.
   */
  text?: Maybe<ScalarsEnums["String"]>;
  /**
   * The value to be stored in the database when this choice is selected. Note: This property is only supported by the Drop Down and Post Category fields. Checkboxes and Radio fields will store the text property in the database regardless of the value property.
   */
  value?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the sendPasswordResetEmail mutation
 */
export interface SendPasswordResetEmailPayload {
  __typename?: "SendPasswordResetEmailPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The user that the password reset email was sent to
   */
  user?: Maybe<User>;
}

/**
 * All of the registered settings
 */
export interface Settings {
  __typename?: "Settings";
  /**
   * Settings of the the string Settings Group
   */
  atlasContentModelerSettingsSettingsAtlasContentModelerUsageTracking?: Maybe<
    ScalarsEnums["String"]
  >;
  /**
   * Settings of the the string Settings Group
   */
  discussionSettingsDefaultCommentStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  discussionSettingsDefaultPingStatus?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsDateFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsDescription?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsEmail?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsLanguage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the integer Settings Group
   */
  generalSettingsStartOfWeek?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsTimeFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsTimezone?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsTitle?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the string Settings Group
   */
  generalSettingsUrl?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the integer Settings Group
   */
  readingSettingsPostsPerPage?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Settings of the the integer Settings Group
   */
  writingSettingsDefaultCategory?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Settings of the the string Settings Group
   */
  writingSettingsDefaultPostFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * Settings of the the boolean Settings Group
   */
  writingSettingsUseSmilies?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface SignatureField {
  __typename?: "SignatureField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Color to be used for the background of the signature area. Can be any valid CSS color value.
   */
  backgroundColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Color to be used for the border around the signature area. Can be any valid CSS color value.
   */
  borderColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Border style to be used around the signature area.
   */
  borderStyle?: Maybe<ScalarsEnums["SignatureFieldBorderStyleEnum"]>;
  /**
   * Width of the border around the signature area.
   */
  borderWidth?: Maybe<ScalarsEnums["SignatureFieldBorderWidthEnum"]>;
  /**
   * Width of the signature field in pixels.
   */
  boxWidth?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Color of the pen to be used for the signature. Can be any valid CSS color value.
   */
  penColor?: Maybe<ScalarsEnums["String"]>;
  /**
   * Size of the pen cursor.
   */
  penSize?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The payload for the submitGfDraftEntry mutation
 */
export interface SubmitGfDraftEntryPayload {
  __typename?: "SubmitGfDraftEntryPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The entry that was created.
   */
  entry?: Maybe<GfSubmittedEntry>;
  /**
   * Field errors.
   */
  errors?: Maybe<Array<Maybe<FieldError>>>;
}

/**
 * The payload for the submitGfForm mutation
 */
export interface SubmitGfFormPayload {
  __typename?: "SubmitGfFormPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The entry that was created.
   */
  entry?: Maybe<GfEntry>;
  /**
   * Field errors.
   */
  errors?: Maybe<Array<Maybe<FieldError>>>;
  /**
   * Draft resume URL. Null if submitting an entry. If the &quot;Referer&quot; header is not included in the request, this will be an empty string.
   */
  resumeUrl?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The tag type
 */
export interface Tag {
  __typename?: "Tag";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the tag type and the ContentNode type
   */
  contentNodes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<TagToContentNodeConnectionWhereArgs>;
  }) => Maybe<TagToContentNodeConnection>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the tag type and the post type
   */
  posts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<TagToPostConnectionWhereArgs>;
  }) => Maybe<TagToPostConnection>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of databaseId
   */
  tagId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Connection between the tag type and the Taxonomy type
   */
  taxonomy?: Maybe<TagToTaxonomyConnectionEdge>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the tag type and the ContentNode type
 */
export interface TagToContentNodeConnection {
  __typename?: "TagToContentNodeConnection";
  /**
   * Edges for the TagToContentNodeConnection connection
   */
  edges?: Maybe<Array<Maybe<TagToContentNodeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentNode>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface TagToContentNodeConnectionEdge {
  __typename?: "TagToContentNodeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentNode>;
}

/**
 * Connection between the tag type and the post type
 */
export interface TagToPostConnection {
  __typename?: "TagToPostConnection";
  /**
   * Edges for the TagToPostConnection connection
   */
  edges?: Maybe<Array<Maybe<TagToPostConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface TagToPostConnectionEdge {
  __typename?: "TagToPostConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the tag type and the Taxonomy type
 */
export interface TagToTaxonomyConnectionEdge {
  __typename?: "TagToTaxonomyConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<Taxonomy>;
}

/**
 * A taxonomy object
 */
export interface Taxonomy {
  __typename?: "Taxonomy";
  /**
   * List of Content Types associated with the Taxonomy
   */
  connectedContentTypes: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TaxonomyToContentTypeConnection>;
  /**
   * Description of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;description
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The plural name of the post type within the GraphQL Schema.
   */
  graphqlPluralName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The singular name of the post type within the GraphQL Schema.
   */
  graphqlSingleName?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the taxonomy is hierarchical
   */
  hierarchical?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The globally unique identifier of the taxonomy object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Name of the taxonomy shown in the menu. Usually plural.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The display name of the taxonomy. This field is equivalent to WP_Taxonomy-&gt;label
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether the taxonomy is publicly queryable
   */
  public?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Name of content type to diplay in REST API &quot;wp/v2&quot; namespace.
   */
  restBase?: Maybe<ScalarsEnums["String"]>;
  /**
   * The REST Controller class assigned to handling this content type.
   */
  restControllerClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether to show the taxonomy as part of a tag cloud widget. This field is equivalent to WP_Taxonomy-&gt;show_tagcloud
   */
  showCloud?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to display a column for the taxonomy on its post type listing screens.
   */
  showInAdminColumn?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to add the post type to the GraphQL Schema.
   */
  showInGraphql?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to show the taxonomy in the admin menu
   */
  showInMenu?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the taxonomy is available for selection in navigation menus.
   */
  showInNavMenus?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to show the taxonomy in the quick/bulk edit panel.
   */
  showInQuickEdit?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to add the post type route in the REST API &quot;wp/v2&quot; namespace.
   */
  showInRest?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether to generate and allow a UI for managing terms in this taxonomy in the admin
   */
  showUi?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * Connection between the Taxonomy type and the ContentType type
 */
export interface TaxonomyToContentTypeConnection {
  __typename?: "TaxonomyToContentTypeConnection";
  /**
   * Edges for the TaxonomyToContentTypeConnection connection
   */
  edges?: Maybe<Array<Maybe<TaxonomyToContentTypeConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentType>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface TaxonomyToContentTypeConnectionEdge {
  __typename?: "TaxonomyToContentTypeConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentType>;
}

/**
 * The teamMember type
 */
export interface TeamMember {
  __typename?: "TeamMember";
  /**
   * Connection between the NodeWithAuthor type and the User type
   */
  author?: Maybe<NodeWithAuthorToUserConnectionEdge>;
  /**
   * The database identifier of the author of the node
   */
  authorDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The globally unique identifier of the author of the node
   */
  authorId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * biopic
   */
  bio?: Maybe<ScalarsEnums["String"]>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Connection between the ContentNode type and the ContentType type
   */
  contentType?: Maybe<ContentNodeToContentTypeConnectionEdge>;
  /**
   * The name of the Content Type the node belongs to
   */
  contentTypeName: ScalarsEnums["String"];
  /**
   * The unique identifier stored in the database
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Post publishing date.
   */
  date?: Maybe<ScalarsEnums["String"]>;
  /**
   * The publishing date set in GMT.
   */
  dateGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * The desired slug of the post
   */
  desiredSlug?: Maybe<ScalarsEnums["String"]>;
  /**
   * If a user has edited the node within the past 15 seconds, this will return the user that last edited. Null if the edit lock doesn&#039;t exist or is greater than 15 seconds
   */
  editingLockedBy?: Maybe<ContentNodeToEditLockConnectionEdge>;
  /**
   * The RSS enclosure for the object
   */
  enclosure?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the ContentNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the ContentNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<ContentNodeToEnqueuedStylesheetConnection>;
  /**
   * Connection between the NodeWithFeaturedImage type and the MediaItem type
   */
  featuredImage?: Maybe<NodeWithFeaturedImageToMediaItemConnectionEdge>;
  /**
   * The database identifier for the featured image node assigned to the content node
   */
  featuredImageDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Globally unique ID of the featured image assigned to the node
   */
  featuredImageId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * nombre
   */
  fullName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The global unique identifier for this post. This currently matches the value stored in WP_Post-&gt;guid and the guid column in the &quot;post_objects&quot; database table.
   */
  guid?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the teammember object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is a node in the preview state
   */
  isPreview?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The user that most recently edited the node
   */
  lastEditedBy?: Maybe<ContentNodeToEditLastConnectionEdge>;
  /**
   * The permalink of the post
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The local modified time for a post. If a post was recently updated the modified field will change to match the corresponding time.
   */
  modified?: Maybe<ScalarsEnums["String"]>;
  /**
   * The GMT modified time for a post. If a post was recently updated the modified field will change to match the corresponding time in GMT.
   */
  modifiedGmt?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the teamMember type and the teamMember type
   */
  preview?: Maybe<TeamMemberToPreviewConnectionEdge>;
  /**
   * The database id of the preview node
   */
  previewRevisionDatabaseId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Whether the object is a node in the preview state
   */
  previewRevisionId?: Maybe<ScalarsEnums["ID"]>;
  /**
   * pic
   */
  profilePic?: Maybe<MediaItem>;
  /**
   * The uri slug for the post. This is equivalent to the WP_Post-&gt;post_name field and the post_name column in the database for the &quot;post_objects&quot; table.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current status of the object
   */
  status?: Maybe<ScalarsEnums["String"]>;
  /**
   * The id field matches the WP_Post-&gt;ID field.
   * @deprecated Deprecated in favor of the databaseId field
   */
  teamMemberId: ScalarsEnums["Int"];
  /**
   * The template assigned to a node of content
   */
  template?: Maybe<ContentTemplate>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The title of the post. This is currently just the raw title. An amendment to support rendered title needs to be made.
   */
  title: (args?: {
    /**
     * Format of the field output
     */
    format?: Maybe<PostObjectFieldFormatEnum>;
  }) => Maybe<ScalarsEnums["String"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the teamMember type and the teamMember type
 */
export interface TeamMemberToPreviewConnectionEdge {
  __typename?: "TeamMemberToPreviewConnectionEdge";
  /**
   * The node of the connection, without the edges
   */
  node?: Maybe<TeamMember>;
}

/**
 * Terms are nodes within a Taxonomy, used to group and relate other nodes.
 */
export interface TermNode {
  __typename?: "Category" | "NewMediaCenter" | "PostFormat" | "Pro" | "Tag";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The number of objects connected to the object
   */
  count?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * The description of the object
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the TermNode type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedScriptConnection>;
  /**
   * Connection between the TermNode type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<TermNodeToEnqueuedStylesheetConnection>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * The link to the term
   */
  link?: Maybe<ScalarsEnums["String"]>;
  /**
   * The human friendly name of the object.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * An alphanumeric identifier for the object unique to its type.
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * The name of the taxonomy that the object is associated with
   */
  taxonomyName?: Maybe<ScalarsEnums["String"]>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The ID of the term group that this term object belongs to
   */
  termGroupId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The taxonomy ID that the object is associated with
   */
  termTaxonomyId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  $on: $TermNode;
}

/**
 * Connection between the TermNode type and the EnqueuedScript type
 */
export interface TermNodeToEnqueuedScriptConnection {
  __typename?: "TermNodeToEnqueuedScriptConnection";
  /**
   * Edges for the TermNodeToEnqueuedScriptConnection connection
   */
  edges?: Maybe<Array<Maybe<TermNodeToEnqueuedScriptConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface TermNodeToEnqueuedScriptConnectionEdge {
  __typename?: "TermNodeToEnqueuedScriptConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedScript>;
}

/**
 * Connection between the TermNode type and the EnqueuedStylesheet type
 */
export interface TermNodeToEnqueuedStylesheetConnection {
  __typename?: "TermNodeToEnqueuedStylesheetConnection";
  /**
   * Edges for the TermNodeToEnqueuedStylesheetConnection connection
   */
  edges?: Maybe<Array<Maybe<TermNodeToEnqueuedStylesheetConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface TermNodeToEnqueuedStylesheetConnectionEdge {
  __typename?: "TermNodeToEnqueuedStylesheetConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedStylesheet>;
}

/**
 * A Gravity Forms   field.
 */
export interface TextAreaField {
  __typename?: "TextAreaField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Indicates whether the field uses the rich text editor interface.
   */
  hasRichTextEditor?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface TextField {
  __typename?: "TextField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Whether autocomplete should be enabled for this field.
   */
  hasAutocomplete?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the field has an input mask.
   */
  hasInputMask?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The pattern used for the input mask.
   */
  inputMaskValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if a text field input tag should be created with a &quot;password&quot; type.
   */
  isPasswordInput?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Specifies the maximum number of characters allowed in a text or textarea (paragraph) field.
   */
  maxLength?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * A theme object
 */
export interface Theme {
  __typename?: "Theme";
  /**
   * Name of the theme author(s), could also be a company name. This field is equivalent to WP_Theme-&gt;get( &quot;Author&quot; ).
   */
  author?: Maybe<ScalarsEnums["String"]>;
  /**
   * URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;AuthorURI&quot; ).
   */
  authorUri?: Maybe<ScalarsEnums["String"]>;
  /**
   * The description of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Description&quot; ).
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier of the theme object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Display name of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Name&quot; ).
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * The URL of the screenshot for the theme. The screenshot is intended to give an overview of what the theme looks like. This field is equivalent to WP_Theme-&gt;get_screenshot().
   */
  screenshot?: Maybe<ScalarsEnums["String"]>;
  /**
   * The theme slug is used to internally match themes. Theme slugs can have subdirectories like: my-theme/sub-theme. This field is equivalent to WP_Theme-&gt;get_stylesheet().
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * URI for the author/company website. This field is equivalent to WP_Theme-&gt;get( &quot;Tags&quot; ).
   */
  tags?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * A URI if the theme has a website associated with it. The Theme URI is handy for directing users to a theme site for support etc. This field is equivalent to WP_Theme-&gt;get( &quot;ThemeURI&quot; ).
   */
  themeUri?: Maybe<ScalarsEnums["String"]>;
  /**
   * The current version of the theme. This field is equivalent to WP_Theme-&gt;get( &quot;Version&quot; ).
   */
  version?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface TimeField {
  __typename?: "TimeField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * An array of the available properties for each input of the time field.
   */
  inputs?: Maybe<Array<Maybe<TimeInputProperty>>>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The placement of the labels for the subfields within the group. This setting controls all of the subfields, they cannot be set individually. They may be aligned above or below the inputs. If this property is not set, the “Sub-Label Placement” setting on the Form Settings-&gt;Form Layout page is used. If no setting is specified, the default is above inputs.
   */
  subLabelPlacement?: Maybe<ScalarsEnums["FormFieldSubLabelPlacementEnum"]>;
  /**
   * Determines how the time is displayed.
   */
  timeFormat?: Maybe<ScalarsEnums["TimeFieldFormatEnum"]>;
  /**
   * Time field value.
   */
  timeValues?: Maybe<TimeFieldValue>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The individual properties for each element of the Time value field.
 */
export interface TimeFieldValue {
  __typename?: "TimeFieldValue";
  /**
   * AM or PM.
   */
  amPm?: Maybe<ScalarsEnums["AmPmEnum"]>;
  /**
   * The full display value in 12-hour format. Example: &quot;08:25 am&quot;.
   */
  displayValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * The hours, in this format: hh.
   */
  hours?: Maybe<ScalarsEnums["String"]>;
  /**
   * The minutes, in this format: mm.
   */
  minutes?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Time input values.
 */
export interface TimeInputProperty {
  __typename?: "TimeInputProperty";
  /**
   * The autocomplete attribute for the field.
   */
  autocompleteAttribute?: Maybe<ScalarsEnums["String"]>;
  /**
   * The custom label for the input. When set, this is used in place of the label.
   */
  customLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * The input ID. Input IDs follow the following naming convention: FIELDID.INPUTID (i.e. 5.1), where FIELDID is the id of the containing field and INPUTID specifies the input field.
   */
  id?: Maybe<ScalarsEnums["Float"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Any node that has a URI
 */
export interface UniformResourceIdentifiable {
  __typename?:
    | "Category"
    | "ContentType"
    | "MediaItem"
    | "NewEvent"
    | "NewMediaCenter"
    | "NewPressCoverage"
    | "NewPressRelease"
    | "Page"
    | "Partner"
    | "Post"
    | "PostFormat"
    | "PressCoverage"
    | "PressRelease"
    | "Pro"
    | "ProductCard"
    | "ProductsService"
    | "Project"
    | "Tag"
    | "TeamMember"
    | "User";
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * The unique resource identifier path
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  $on: $UniformResourceIdentifiable;
}

/**
 * The payload for the UpdateCategory mutation
 */
export interface UpdateCategoryPayload {
  __typename?: "UpdateCategoryPayload";
  /**
   * The created category
   */
  category?: Maybe<Category>;
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the updateComment mutation
 */
export interface UpdateCommentPayload {
  __typename?: "UpdateCommentPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The comment that was created
   */
  comment?: Maybe<Comment>;
  /**
   * Whether the mutation succeeded. If the comment is not approved, the server will not return the comment to a non authenticated user, but a success message can be returned if the create succeeded, and the client can optimistically add the comment to the client cache
   */
  success?: Maybe<ScalarsEnums["Boolean"]>;
}

/**
 * The payload for the updateGfDraftEntry mutation
 */
export interface UpdateGfDraftEntryPayload {
  __typename?: "UpdateGfDraftEntryPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The draft entry after the update mutation has been applied. If a validation error occurred, the draft entry will NOT have been updated with the invalid value provided.
   */
  draftEntry?: Maybe<GfDraftEntry>;
  /**
   * Field validation errors.
   */
  errors?: Maybe<Array<Maybe<FieldError>>>;
  /**
   * Draft resume URL. If the &quot;Referer&quot; header is not included in the request, this will be an empty string.
   */
  resumeUrl?: Maybe<ScalarsEnums["String"]>;
}

/**
 * The payload for the updateGfEntry mutation
 */
export interface UpdateGfEntryPayload {
  __typename?: "UpdateGfEntryPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The entry that was created.
   */
  entry?: Maybe<GfSubmittedEntry>;
  /**
   * Field errors.
   */
  errors?: Maybe<Array<Maybe<FieldError>>>;
}

/**
 * The payload for the updateMediaItem mutation
 */
export interface UpdateMediaItemPayload {
  __typename?: "UpdateMediaItemPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The MediaItem object mutation type.
   */
  mediaItem?: Maybe<MediaItem>;
}

/**
 * The payload for the updateNewEvent mutation
 */
export interface UpdateNewEventPayload {
  __typename?: "UpdateNewEventPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newEvent?: Maybe<NewEvent>;
}

/**
 * The payload for the UpdateNewMediaCenter mutation
 */
export interface UpdateNewMediaCenterPayload {
  __typename?: "UpdateNewMediaCenterPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created newmediacenter
   */
  newMediaCenter?: Maybe<NewMediaCenter>;
}

/**
 * The payload for the updateNewPressCoverage mutation
 */
export interface UpdateNewPressCoveragePayload {
  __typename?: "UpdateNewPressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newPressCoverage?: Maybe<NewPressCoverage>;
}

/**
 * The payload for the updateNewPressRelease mutation
 */
export interface UpdateNewPressReleasePayload {
  __typename?: "UpdateNewPressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  newPressRelease?: Maybe<NewPressRelease>;
}

/**
 * The payload for the updatePage mutation
 */
export interface UpdatePagePayload {
  __typename?: "UpdatePagePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  page?: Maybe<Page>;
}

/**
 * The payload for the updatePartner mutation
 */
export interface UpdatePartnerPayload {
  __typename?: "UpdatePartnerPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  partner?: Maybe<Partner>;
}

/**
 * The payload for the UpdatePostFormat mutation
 */
export interface UpdatePostFormatPayload {
  __typename?: "UpdatePostFormatPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created post_format
   */
  postFormat?: Maybe<PostFormat>;
}

/**
 * The payload for the updatePost mutation
 */
export interface UpdatePostPayload {
  __typename?: "UpdatePostPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  post?: Maybe<Post>;
}

/**
 * The payload for the updatePressCoverage mutation
 */
export interface UpdatePressCoveragePayload {
  __typename?: "UpdatePressCoveragePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  pressCoverage?: Maybe<PressCoverage>;
}

/**
 * The payload for the updatePressRelease mutation
 */
export interface UpdatePressReleasePayload {
  __typename?: "UpdatePressReleasePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  pressRelease?: Maybe<PressRelease>;
}

/**
 * The payload for the UpdatePro mutation
 */
export interface UpdateProPayload {
  __typename?: "UpdateProPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created pro
   */
  pro?: Maybe<Pro>;
}

/**
 * The payload for the updateProductCard mutation
 */
export interface UpdateProductCardPayload {
  __typename?: "UpdateProductCardPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  productCard?: Maybe<ProductCard>;
}

/**
 * The payload for the updateProductsService mutation
 */
export interface UpdateProductsServicePayload {
  __typename?: "UpdateProductsServicePayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  productsService?: Maybe<ProductsService>;
}

/**
 * The payload for the updateProject mutation
 */
export interface UpdateProjectPayload {
  __typename?: "UpdateProjectPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  project?: Maybe<Project>;
}

/**
 * The payload for the updateSettings mutation
 */
export interface UpdateSettingsPayload {
  __typename?: "UpdateSettingsPayload";
  /**
   * Update all settings.
   */
  allSettings?: Maybe<Settings>;
  /**
   * Update the atlasContentModelerSettings setting.
   */
  atlasContentModelerSettingsSettings?: Maybe<AtlasContentModelerSettingsSettings>;
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * Update the discussion setting.
   */
  discussionSettings?: Maybe<DiscussionSettings>;
  /**
   * Update the general setting.
   */
  generalSettings?: Maybe<GeneralSettings>;
  /**
   * Update the reading setting.
   */
  readingSettings?: Maybe<ReadingSettings>;
  /**
   * Update the writing setting.
   */
  writingSettings?: Maybe<WritingSettings>;
}

/**
 * The payload for the UpdateTag mutation
 */
export interface UpdateTagPayload {
  __typename?: "UpdateTagPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The created post_tag
   */
  tag?: Maybe<Tag>;
}

/**
 * The payload for the updateTeamMember mutation
 */
export interface UpdateTeamMemberPayload {
  __typename?: "UpdateTeamMemberPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Post object mutation type.
   */
  teamMember?: Maybe<TeamMember>;
}

/**
 * The payload for the updateUser mutation
 */
export interface UpdateUserPayload {
  __typename?: "UpdateUserPayload";
  /**
   * If a &#039;clientMutationId&#039; input is provided to the mutation, it will be returned as output on the mutation. This ID can be used by the client to track the progress of mutations and catch possible duplicate mutation submissions.
   */
  clientMutationId?: Maybe<ScalarsEnums["String"]>;
  /**
   * The User object mutation type.
   */
  user?: Maybe<User>;
}

/**
 * A User object
 */
export interface User {
  __typename?: "User";
  /**
   * Avatar object for user. The avatar object can be retrieved in different sizes by specifying the size argument.
   */
  avatar: (args?: {
    /**
     * Whether to always show the default image, never the Gravatar. Default false
     */
    forceDefault?: Maybe<Scalars["Boolean"]>;
    /**
     * The rating level of the avatar.
     */
    rating?: Maybe<AvatarRatingEnum>;
    /**
     * The size attribute of the avatar field can be used to fetch avatars of different sizes. The value corresponds to the dimension in pixels to fetch. The default is 96 pixels.
     * @defaultValue `96`
     */
    size?: Maybe<Scalars["Int"]>;
  }) => Maybe<Avatar>;
  /**
   * User metadata option name. Usually it will be &quot;wp_capabilities&quot;.
   */
  capKey?: Maybe<ScalarsEnums["String"]>;
  /**
   * A list of capabilities (permissions) granted to the user
   */
  capabilities?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * Connection between the User type and the Comment type
   */
  comments: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToCommentConnectionWhereArgs>;
  }) => Maybe<UserToCommentConnection>;
  conditionalTags?: Maybe<ConditionalTags>;
  /**
   * Identifies the primary key from the database.
   */
  databaseId: ScalarsEnums["Int"];
  /**
   * Description of the user.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * Email address of the user. This is equivalent to the WP_User-&gt;user_email property.
   */
  email?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User type and the EnqueuedScript type
   */
  enqueuedScripts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserToEnqueuedScriptConnection>;
  /**
   * Connection between the User type and the EnqueuedStylesheet type
   */
  enqueuedStylesheets: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserToEnqueuedStylesheetConnection>;
  /**
   * A complete list of capabilities including capabilities inherited from a role. This is equivalent to the array keys of WP_User-&gt;allcaps.
   */
  extraCapabilities?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * First name of the user. This is equivalent to the WP_User-&gt;user_first_name property.
   */
  firstName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier for the user object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the node is a Content Node
   */
  isContentNode: ScalarsEnums["Boolean"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Whether the node is a Term
   */
  isTermNode: ScalarsEnums["Boolean"];
  /**
   * Last name of the user. This is equivalent to the WP_User-&gt;user_last_name property.
   */
  lastName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The preferred language locale set for the user. Value derived from get_user_locale().
   */
  locale?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User type and the mediaItem type
   */
  mediaItems: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToMediaItemConnectionWhereArgs>;
  }) => Maybe<UserToMediaItemConnection>;
  /**
   * Display name of the user. This is equivalent to the WP_User-&gt;dispaly_name property.
   */
  name?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User type and the newEvent type
   */
  newEvents: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToNewEventConnectionWhereArgs>;
  }) => Maybe<UserToNewEventConnection>;
  /**
   * Connection between the User type and the newPressCoverage type
   */
  newPressCoverages: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToNewPressCoverageConnectionWhereArgs>;
  }) => Maybe<UserToNewPressCoverageConnection>;
  /**
   * Connection between the User type and the newPressRelease type
   */
  newPressReleases: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToNewPressReleaseConnectionWhereArgs>;
  }) => Maybe<UserToNewPressReleaseConnection>;
  /**
   * The nicename for the user. This field is equivalent to WP_User-&gt;user_nicename
   */
  nicename?: Maybe<ScalarsEnums["String"]>;
  /**
   * Nickname of the user.
   */
  nickname?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User type and the page type
   */
  pages: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToPageConnectionWhereArgs>;
  }) => Maybe<UserToPageConnection>;
  /**
   * Connection between the User type and the partner type
   */
  partners: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToPartnerConnectionWhereArgs>;
  }) => Maybe<UserToPartnerConnection>;
  /**
   * Connection between the User type and the post type
   */
  posts: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToPostConnectionWhereArgs>;
  }) => Maybe<UserToPostConnection>;
  /**
   * Connection between the User type and the productCard type
   */
  productCards: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToProductCardConnectionWhereArgs>;
  }) => Maybe<UserToProductCardConnection>;
  /**
   * Connection between the User type and the project type
   */
  projects: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToProjectConnectionWhereArgs>;
  }) => Maybe<UserToProjectConnection>;
  /**
   * The date the user registered or was created. The field follows a full ISO8601 date string format.
   */
  registeredDate?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User and Revisions authored by the user
   */
  revisions: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToContentRevisionUnionConnectionWhereArgs>;
  }) => Maybe<UserToContentRevisionUnionConnection>;
  /**
   * Connection between the User type and the UserRole type
   */
  roles: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<UserToUserRoleConnection>;
  /**
   * The slug for the user. This field is equivalent to WP_User-&gt;user_nicename
   */
  slug?: Maybe<ScalarsEnums["String"]>;
  /**
   * Connection between the User type and the teamMember type
   */
  teamMembers: (args?: {
    /**
     * Cursor used along with the "first" argument to reference where in the dataset to get data
     */
    after?: Maybe<Scalars["String"]>;
    /**
     * Cursor used along with the "last" argument to reference where in the dataset to get data
     */
    before?: Maybe<Scalars["String"]>;
    /**
     * The number of items to return after the referenced "after" cursor
     */
    first?: Maybe<Scalars["Int"]>;
    /**
     * The number of items to return before the referenced "before" cursor
     */
    last?: Maybe<Scalars["Int"]>;
    /**
     * Arguments for filtering the connection
     */
    where?: Maybe<UserToTeamMemberConnectionWhereArgs>;
  }) => Maybe<UserToTeamMemberConnection>;
  templates?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The unique resource identifier path
   */
  uri?: Maybe<ScalarsEnums["String"]>;
  /**
   * A website url that is associated with the user.
   */
  url?: Maybe<ScalarsEnums["String"]>;
  /**
   * The Id of the user. Equivalent to WP_User-&gt;ID
   * @deprecated Deprecated in favor of the databaseId field
   */
  userId?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Username for the user. This field is equivalent to WP_User-&gt;user_login.
   */
  username?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A user role object
 */
export interface UserRole {
  __typename?: "UserRole";
  /**
   * The capabilities that belong to this role
   */
  capabilities?: Maybe<Array<Maybe<ScalarsEnums["String"]>>>;
  /**
   * The display name of the role
   */
  displayName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The globally unique identifier for the user role object.
   */
  id: ScalarsEnums["ID"];
  /**
   * Whether the object is restricted from the current viewer
   */
  isRestricted?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * The registered name of the role
   */
  name?: Maybe<ScalarsEnums["String"]>;
}

/**
 * Connection between the User type and the Comment type
 */
export interface UserToCommentConnection {
  __typename?: "UserToCommentConnection";
  /**
   * Edges for the UserToCommentConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToCommentConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Comment>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToCommentConnectionEdge {
  __typename?: "UserToCommentConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Comment>;
}

/**
 * Connection between the User type and the ContentRevisionUnion type
 */
export interface UserToContentRevisionUnionConnection {
  __typename?: "UserToContentRevisionUnionConnection";
  /**
   * Edges for the UserToContentRevisionUnionConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToContentRevisionUnionConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ContentRevisionUnion>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToContentRevisionUnionConnectionEdge {
  __typename?: "UserToContentRevisionUnionConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ContentRevisionUnion>;
}

/**
 * Connection between the User type and the EnqueuedScript type
 */
export interface UserToEnqueuedScriptConnection {
  __typename?: "UserToEnqueuedScriptConnection";
  /**
   * Edges for the UserToEnqueuedScriptConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToEnqueuedScriptConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedScript>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToEnqueuedScriptConnectionEdge {
  __typename?: "UserToEnqueuedScriptConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedScript>;
}

/**
 * Connection between the User type and the EnqueuedStylesheet type
 */
export interface UserToEnqueuedStylesheetConnection {
  __typename?: "UserToEnqueuedStylesheetConnection";
  /**
   * Edges for the UserToEnqueuedStylesheetConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToEnqueuedStylesheetConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<EnqueuedStylesheet>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToEnqueuedStylesheetConnectionEdge {
  __typename?: "UserToEnqueuedStylesheetConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<EnqueuedStylesheet>;
}

/**
 * Connection between the User type and the mediaItem type
 */
export interface UserToMediaItemConnection {
  __typename?: "UserToMediaItemConnection";
  /**
   * Edges for the UserToMediaItemConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToMediaItemConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<MediaItem>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToMediaItemConnectionEdge {
  __typename?: "UserToMediaItemConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<MediaItem>;
}

/**
 * Connection between the User type and the newEvent type
 */
export interface UserToNewEventConnection {
  __typename?: "UserToNewEventConnection";
  /**
   * Edges for the UserToNewEventConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToNewEventConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewEvent>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToNewEventConnectionEdge {
  __typename?: "UserToNewEventConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewEvent>;
}

/**
 * Connection between the User type and the newPressCoverage type
 */
export interface UserToNewPressCoverageConnection {
  __typename?: "UserToNewPressCoverageConnection";
  /**
   * Edges for the UserToNewPressCoverageConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToNewPressCoverageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressCoverage>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToNewPressCoverageConnectionEdge {
  __typename?: "UserToNewPressCoverageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressCoverage>;
}

/**
 * Connection between the User type and the newPressRelease type
 */
export interface UserToNewPressReleaseConnection {
  __typename?: "UserToNewPressReleaseConnection";
  /**
   * Edges for the UserToNewPressReleaseConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToNewPressReleaseConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<NewPressRelease>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToNewPressReleaseConnectionEdge {
  __typename?: "UserToNewPressReleaseConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<NewPressRelease>;
}

/**
 * Connection between the User type and the page type
 */
export interface UserToPageConnection {
  __typename?: "UserToPageConnection";
  /**
   * Edges for the UserToPageConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToPageConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Page>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToPageConnectionEdge {
  __typename?: "UserToPageConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Page>;
}

/**
 * Connection between the User type and the partner type
 */
export interface UserToPartnerConnection {
  __typename?: "UserToPartnerConnection";
  /**
   * Edges for the UserToPartnerConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToPartnerConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Partner>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToPartnerConnectionEdge {
  __typename?: "UserToPartnerConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Partner>;
}

/**
 * Connection between the User type and the post type
 */
export interface UserToPostConnection {
  __typename?: "UserToPostConnection";
  /**
   * Edges for the UserToPostConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToPostConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Post>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToPostConnectionEdge {
  __typename?: "UserToPostConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Post>;
}

/**
 * Connection between the User type and the productCard type
 */
export interface UserToProductCardConnection {
  __typename?: "UserToProductCardConnection";
  /**
   * Edges for the UserToProductCardConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToProductCardConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<ProductCard>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToProductCardConnectionEdge {
  __typename?: "UserToProductCardConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<ProductCard>;
}

/**
 * Connection between the User type and the project type
 */
export interface UserToProjectConnection {
  __typename?: "UserToProjectConnection";
  /**
   * Edges for the UserToProjectConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToProjectConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<Project>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToProjectConnectionEdge {
  __typename?: "UserToProjectConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<Project>;
}

/**
 * Connection between the User type and the teamMember type
 */
export interface UserToTeamMemberConnection {
  __typename?: "UserToTeamMemberConnection";
  /**
   * Edges for the UserToTeamMemberConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToTeamMemberConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<TeamMember>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToTeamMemberConnectionEdge {
  __typename?: "UserToTeamMemberConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<TeamMember>;
}

/**
 * Connection between the User type and the UserRole type
 */
export interface UserToUserRoleConnection {
  __typename?: "UserToUserRoleConnection";
  /**
   * Edges for the UserToUserRoleConnection connection
   */
  edges?: Maybe<Array<Maybe<UserToUserRoleConnectionEdge>>>;
  /**
   * The nodes of the connection, without the edges
   */
  nodes?: Maybe<Array<Maybe<UserRole>>>;
  /**
   * Information about pagination in a connection.
   */
  pageInfo?: Maybe<WPPageInfo>;
}

/**
 * An edge in a connection
 */
export interface UserToUserRoleConnectionEdge {
  __typename?: "UserToUserRoleConnectionEdge";
  /**
   * A cursor for use in pagination
   */
  cursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * The item at the end of the edge
   */
  node?: Maybe<UserRole>;
}

/**
 * Information about pagination in a connection.
 */
export interface WPPageInfo {
  __typename?: "WPPageInfo";
  /**
   * When paginating forwards, the cursor to continue.
   */
  endCursor?: Maybe<ScalarsEnums["String"]>;
  /**
   * When paginating forwards, are there more items?
   */
  hasNextPage: ScalarsEnums["Boolean"];
  /**
   * When paginating backwards, are there more items?
   */
  hasPreviousPage: ScalarsEnums["Boolean"];
  /**
   * When paginating backwards, the cursor to continue.
   */
  startCursor?: Maybe<ScalarsEnums["String"]>;
}

/**
 * A Gravity Forms   field.
 */
export interface WebsiteField {
  __typename?: "WebsiteField";
  /**
   * When specified, the value of this property will be used on the admin pages instead of the label. It is useful for fields with long labels.
   */
  adminLabel?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field’s value can be pre-populated dynamically.
   */
  canPrepopulate?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Controls the visibility of the field based on values selected by the user.
   */
  conditionalLogic?: Maybe<ConditionalLogic>;
  /**
   * String containing the custom CSS classes to be added to the &lt;li&gt; tag that contains the field. Useful for applying custom formatting to specific fields.
   */
  cssClass?: Maybe<ScalarsEnums["String"]>;
  /**
   * Contains the default value for the field. When specified, the field&#039;s value will be populated with the contents of this property when the form is displayed.
   */
  defaultValue?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field description.
   */
  description?: Maybe<ScalarsEnums["String"]>;
  /**
   * The placement of the field description.
   */
  descriptionPlacement?: Maybe<
    ScalarsEnums["FormFieldDescriptionPlacementEnum"]
  >;
  /**
   * Indicates the field is only displayed and its contents are not submitted with the form/saved with the entry. This is set to true.
   */
  displayOnly?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Contains the message that is displayed for fields that fail validation.
   */
  errorMessage?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field ID.
   */
  id: ScalarsEnums["Int"];
  /**
   * Assigns a name to this field so that it can be populated dynamically via this input name. Only applicable when canPrepopulate is `true`.
   */
  inputName?: Maybe<ScalarsEnums["String"]>;
  /**
   * The base form field type used to display the input. A good example is the Post Custom Field that can be displayed as various different types of fields.
   */
  inputType?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * Determines if the field requires the user to enter a value. Fields marked as required will prevent the form from being submitted if the user has not entered a value in it.
   */
  isRequired?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Field label that will be displayed on the form and on the admin pages.
   */
  label?: Maybe<ScalarsEnums["String"]>;
  /**
   * The field label position.
   */
  labelPlacement?: Maybe<ScalarsEnums["FormFieldLabelPlacementEnum"]>;
  /**
   * The number of CSS grid columns the field should span.
   */
  layoutGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The number of CSS grid columns the spacer field following this one should span.
   */
  layoutSpacerGridColumnSpan?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form page this field is located on. Default is 1.
   */
  pageNumber?: Maybe<ScalarsEnums["Int"]>;
  /**
   * The form field-specifc policies for exporting and erasing personal data.
   */
  personalData?: Maybe<FormFieldDataPolicy>;
  /**
   * Placeholder text to give the user a hint on how to fill out the field. This is not submitted with the form.
   */
  placeholder?: Maybe<ScalarsEnums["String"]>;
  /**
   * Determines if the field allows duplicate submissions.
   */
  shouldAllowDuplicates?: Maybe<ScalarsEnums["Boolean"]>;
  /**
   * Determines the size of the field when displayed on the page.
   */
  size?: Maybe<ScalarsEnums["FormFieldSizeEnum"]>;
  /**
   * The type of field to be displayed.
   */
  type?: Maybe<ScalarsEnums["FormFieldTypeEnum"]>;
  /**
   * The string-formatted entry value for the `formField`. For complex fields this might be a JSON-encoded or serialized array.
   */
  value?: Maybe<ScalarsEnums["String"]>;
  /**
   * Field visibility.
   */
  visibility?: Maybe<ScalarsEnums["FormFieldVisibilityEnum"]>;
}

/**
 * The writing setting type
 */
export interface WritingSettings {
  __typename?: "WritingSettings";
  /**
   * Default post category.
   */
  defaultCategory?: Maybe<ScalarsEnums["Int"]>;
  /**
   * Default post format.
   */
  defaultPostFormat?: Maybe<ScalarsEnums["String"]>;
  /**
   * Convert emoticons like :-) and :-P to graphics on display.
   */
  useSmilies?: Maybe<ScalarsEnums["Boolean"]>;
}

export interface Mutation {
  __typename?: "Mutation";
  createCategory: (args: {
    input: CreateCategoryInput;
  }) => Maybe<CreateCategoryPayload>;
  createComment: (args: {
    input: CreateCommentInput;
  }) => Maybe<CreateCommentPayload>;
  createMediaItem: (args: {
    input: CreateMediaItemInput;
  }) => Maybe<CreateMediaItemPayload>;
  createNewEvent: (args: {
    input: CreateNewEventInput;
  }) => Maybe<CreateNewEventPayload>;
  createNewMediaCenter: (args: {
    input: CreateNewMediaCenterInput;
  }) => Maybe<CreateNewMediaCenterPayload>;
  createNewPressCoverage: (args: {
    input: CreateNewPressCoverageInput;
  }) => Maybe<CreateNewPressCoveragePayload>;
  createNewPressRelease: (args: {
    input: CreateNewPressReleaseInput;
  }) => Maybe<CreateNewPressReleasePayload>;
  createPage: (args: { input: CreatePageInput }) => Maybe<CreatePagePayload>;
  createPartner: (args: {
    input: CreatePartnerInput;
  }) => Maybe<CreatePartnerPayload>;
  createPost: (args: { input: CreatePostInput }) => Maybe<CreatePostPayload>;
  createPostFormat: (args: {
    input: CreatePostFormatInput;
  }) => Maybe<CreatePostFormatPayload>;
  createPressCoverage: (args: {
    input: CreatePressCoverageInput;
  }) => Maybe<CreatePressCoveragePayload>;
  createPressRelease: (args: {
    input: CreatePressReleaseInput;
  }) => Maybe<CreatePressReleasePayload>;
  createPro: (args: { input: CreateProInput }) => Maybe<CreateProPayload>;
  createProductCard: (args: {
    input: CreateProductCardInput;
  }) => Maybe<CreateProductCardPayload>;
  createProductsService: (args: {
    input: CreateProductsServiceInput;
  }) => Maybe<CreateProductsServicePayload>;
  createProject: (args: {
    input: CreateProjectInput;
  }) => Maybe<CreateProjectPayload>;
  createTag: (args: { input: CreateTagInput }) => Maybe<CreateTagPayload>;
  createTeamMember: (args: {
    input: CreateTeamMemberInput;
  }) => Maybe<CreateTeamMemberPayload>;
  createUser: (args: { input: CreateUserInput }) => Maybe<CreateUserPayload>;
  deleteCategory: (args: {
    input: DeleteCategoryInput;
  }) => Maybe<DeleteCategoryPayload>;
  deleteComment: (args: {
    input: DeleteCommentInput;
  }) => Maybe<DeleteCommentPayload>;
  deleteGfDraftEntry: (args: {
    input: DeleteGfDraftEntryInput;
  }) => Maybe<DeleteGfDraftEntryPayload>;
  deleteGfEntry: (args: {
    input: DeleteGfEntryInput;
  }) => Maybe<DeleteGfEntryPayload>;
  deleteMediaItem: (args: {
    input: DeleteMediaItemInput;
  }) => Maybe<DeleteMediaItemPayload>;
  deleteNewEvent: (args: {
    input: DeleteNewEventInput;
  }) => Maybe<DeleteNewEventPayload>;
  deleteNewMediaCenter: (args: {
    input: DeleteNewMediaCenterInput;
  }) => Maybe<DeleteNewMediaCenterPayload>;
  deleteNewPressCoverage: (args: {
    input: DeleteNewPressCoverageInput;
  }) => Maybe<DeleteNewPressCoveragePayload>;
  deleteNewPressRelease: (args: {
    input: DeleteNewPressReleaseInput;
  }) => Maybe<DeleteNewPressReleasePayload>;
  deletePage: (args: { input: DeletePageInput }) => Maybe<DeletePagePayload>;
  deletePartner: (args: {
    input: DeletePartnerInput;
  }) => Maybe<DeletePartnerPayload>;
  deletePost: (args: { input: DeletePostInput }) => Maybe<DeletePostPayload>;
  deletePostFormat: (args: {
    input: DeletePostFormatInput;
  }) => Maybe<DeletePostFormatPayload>;
  deletePressCoverage: (args: {
    input: DeletePressCoverageInput;
  }) => Maybe<DeletePressCoveragePayload>;
  deletePressRelease: (args: {
    input: DeletePressReleaseInput;
  }) => Maybe<DeletePressReleasePayload>;
  deletePro: (args: { input: DeleteProInput }) => Maybe<DeleteProPayload>;
  deleteProductCard: (args: {
    input: DeleteProductCardInput;
  }) => Maybe<DeleteProductCardPayload>;
  deleteProductsService: (args: {
    input: DeleteProductsServiceInput;
  }) => Maybe<DeleteProductsServicePayload>;
  deleteProject: (args: {
    input: DeleteProjectInput;
  }) => Maybe<DeleteProjectPayload>;
  deleteTag: (args: { input: DeleteTagInput }) => Maybe<DeleteTagPayload>;
  deleteTeamMember: (args: {
    input: DeleteTeamMemberInput;
  }) => Maybe<DeleteTeamMemberPayload>;
  deleteUser: (args: { input: DeleteUserInput }) => Maybe<DeleteUserPayload>;
  generateAuthorizationCode: (args: {
    input: GenerateAuthorizationCodeInput;
  }) => Maybe<GenerateAuthorizationCodePayload>;
  increaseCount: (args?: {
    count?: Maybe<Scalars["Int"]>;
  }) => Maybe<ScalarsEnums["Int"]>;
  registerUser: (args: {
    input: RegisterUserInput;
  }) => Maybe<RegisterUserPayload>;
  resetUserPassword: (args: {
    input: ResetUserPasswordInput;
  }) => Maybe<ResetUserPasswordPayload>;
  restoreComment: (args: {
    input: RestoreCommentInput;
  }) => Maybe<RestoreCommentPayload>;
  sendPasswordResetEmail: (args: {
    input: SendPasswordResetEmailInput;
  }) => Maybe<SendPasswordResetEmailPayload>;
  submitGfDraftEntry: (args: {
    input: SubmitGfDraftEntryInput;
  }) => Maybe<SubmitGfDraftEntryPayload>;
  submitGfForm: (args: {
    input: SubmitGfFormInput;
  }) => Maybe<SubmitGfFormPayload>;
  updateCategory: (args: {
    input: UpdateCategoryInput;
  }) => Maybe<UpdateCategoryPayload>;
  updateComment: (args: {
    input: UpdateCommentInput;
  }) => Maybe<UpdateCommentPayload>;
  updateGfDraftEntry: (args: {
    input: UpdateGfDraftEntryInput;
  }) => Maybe<UpdateGfDraftEntryPayload>;
  updateGfEntry: (args: {
    input: UpdateGfEntryInput;
  }) => Maybe<UpdateGfEntryPayload>;
  updateMediaItem: (args: {
    input: UpdateMediaItemInput;
  }) => Maybe<UpdateMediaItemPayload>;
  updateNewEvent: (args: {
    input: UpdateNewEventInput;
  }) => Maybe<UpdateNewEventPayload>;
  updateNewMediaCenter: (args: {
    input: UpdateNewMediaCenterInput;
  }) => Maybe<UpdateNewMediaCenterPayload>;
  updateNewPressCoverage: (args: {
    input: UpdateNewPressCoverageInput;
  }) => Maybe<UpdateNewPressCoveragePayload>;
  updateNewPressRelease: (args: {
    input: UpdateNewPressReleaseInput;
  }) => Maybe<UpdateNewPressReleasePayload>;
  updatePage: (args: { input: UpdatePageInput }) => Maybe<UpdatePagePayload>;
  updatePartner: (args: {
    input: UpdatePartnerInput;
  }) => Maybe<UpdatePartnerPayload>;
  updatePost: (args: { input: UpdatePostInput }) => Maybe<UpdatePostPayload>;
  updatePostFormat: (args: {
    input: UpdatePostFormatInput;
  }) => Maybe<UpdatePostFormatPayload>;
  updatePressCoverage: (args: {
    input: UpdatePressCoverageInput;
  }) => Maybe<UpdatePressCoveragePayload>;
  updatePressRelease: (args: {
    input: UpdatePressReleaseInput;
  }) => Maybe<UpdatePressReleasePayload>;
  updatePro: (args: { input: UpdateProInput }) => Maybe<UpdateProPayload>;
  updateProductCard: (args: {
    input: UpdateProductCardInput;
  }) => Maybe<UpdateProductCardPayload>;
  updateProductsService: (args: {
    input: UpdateProductsServiceInput;
  }) => Maybe<UpdateProductsServicePayload>;
  updateProject: (args: {
    input: UpdateProjectInput;
  }) => Maybe<UpdateProjectPayload>;
  updateSettings: (args: {
    input: UpdateSettingsInput;
  }) => Maybe<UpdateSettingsPayload>;
  updateTag: (args: { input: UpdateTagInput }) => Maybe<UpdateTagPayload>;
  updateTeamMember: (args: {
    input: UpdateTeamMemberInput;
  }) => Maybe<UpdateTeamMemberPayload>;
  updateUser: (args: { input: UpdateUserInput }) => Maybe<UpdateUserPayload>;
}

export interface Query {
  __typename?: "Query";
  allSettings?: Maybe<Settings>;
  atlasContentModelerSettingsSettings?: Maybe<AtlasContentModelerSettingsSettings>;
  categories: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToCategoryConnectionWhereArgs>;
  }) => Maybe<RootQueryToCategoryConnection>;
  category: (args: {
    id: Scalars["ID"];
    idType?: Maybe<CategoryIdType>;
  }) => Maybe<Category>;
  comment: (args: { id: Scalars["ID"] }) => Maybe<Comment>;
  comments: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToCommentConnectionWhereArgs>;
  }) => Maybe<RootQueryToCommentConnection>;
  contentNode: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    contentType?: Maybe<ContentTypeEnum>;
    id: Scalars["ID"];
    idType?: Maybe<ContentNodeIdTypeEnum>;
  }) => Maybe<ContentNode>;
  contentNodes: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToContentNodeConnectionWhereArgs>;
  }) => Maybe<RootQueryToContentNodeConnection>;
  contentType: (args: {
    id: Scalars["ID"];
    idType?: Maybe<ContentTypeIdTypeEnum>;
  }) => Maybe<ContentType>;
  contentTypes: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToContentTypeConnection>;
  discussionSettings?: Maybe<DiscussionSettings>;
  generalSettings?: Maybe<GeneralSettings>;
  getFooter?: Maybe<HCMSFooter>;
  getHeader?: Maybe<HCMSHeader>;
  gfDraftEntry: (args: {
    id: Scalars["ID"];
    idType?: Maybe<DraftEntryIdTypeEnum>;
  }) => Maybe<GfDraftEntry>;
  gfEntries: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToGfEntryConnectionWhereArgs>;
  }) => Maybe<RootQueryToGfEntryConnection>;
  gfEntry: (args: {
    id: Scalars["ID"];
    idType?: Maybe<EntryIdTypeEnum>;
  }) => Maybe<GfEntry>;
  gfForm: (args: {
    id: Scalars["ID"];
    idType?: Maybe<FormIdTypeEnum>;
  }) => Maybe<GfForm>;
  gfForms: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToGfFormConnectionWhereArgs>;
  }) => Maybe<RootQueryToGfFormConnection>;
  gfSettings?: Maybe<GfSettings>;
  gfSubmittedEntries: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToGfSubmittedEntryConnectionWhereArgs>;
  }) => Maybe<RootQueryToGfSubmittedEntryConnection>;
  gfSubmittedEntry: (args: {
    id: Scalars["ID"];
    idType?: Maybe<SubmittedEntryIdTypeEnum>;
  }) => Maybe<GfSubmittedEntry>;
  mediaItem: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<MediaItemIdType>;
  }) => Maybe<MediaItem>;
  mediaItemBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    mediaItemId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<MediaItem>;
  mediaItems: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToMediaItemConnectionWhereArgs>;
  }) => Maybe<RootQueryToMediaItemConnection>;
  menu: (args: {
    id: Scalars["ID"];
    idType?: Maybe<MenuNodeIdTypeEnum>;
  }) => Maybe<Menu>;
  menuItem: (args: {
    id: Scalars["ID"];
    idType?: Maybe<MenuItemNodeIdTypeEnum>;
  }) => Maybe<MenuItem>;
  menuItems: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToMenuItemConnectionWhereArgs>;
  }) => Maybe<RootQueryToMenuItemConnection>;
  menus: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToMenuConnectionWhereArgs>;
  }) => Maybe<RootQueryToMenuConnection>;
  newEvent: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<NewEventIdType>;
  }) => Maybe<NewEvent>;
  newEventBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    newEventId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<NewEvent>;
  newEvents: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToNewEventConnectionWhereArgs>;
  }) => Maybe<RootQueryToNewEventConnection>;
  newMediaCenter: (args: {
    id: Scalars["ID"];
    idType?: Maybe<NewMediaCenterIdType>;
  }) => Maybe<NewMediaCenter>;
  newMediaCenters: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToNewMediaCenterConnectionWhereArgs>;
  }) => Maybe<RootQueryToNewMediaCenterConnection>;
  newPressCoverage: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<NewPressCoverageIdType>;
  }) => Maybe<NewPressCoverage>;
  newPressCoverageBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    newPressCoverageId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<NewPressCoverage>;
  newPressCoverages: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToNewPressCoverageConnectionWhereArgs>;
  }) => Maybe<RootQueryToNewPressCoverageConnection>;
  newPressRelease: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<NewPressReleaseIdType>;
  }) => Maybe<NewPressRelease>;
  newPressReleaseBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    newPressReleaseId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<NewPressRelease>;
  newPressReleases: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToNewPressReleaseConnectionWhereArgs>;
  }) => Maybe<RootQueryToNewPressReleaseConnection>;
  node: (args?: { id?: Maybe<Scalars["ID"]> }) => Maybe<Node>;
  nodeByUri: (args: {
    uri: Scalars["String"];
  }) => Maybe<UniformResourceIdentifiable>;
  page: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<PageIdType>;
  }) => Maybe<Page>;
  pageBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    pageId?: Maybe<Scalars["Int"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<Page>;
  pages: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPageConnectionWhereArgs>;
  }) => Maybe<RootQueryToPageConnection>;
  partner: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<PartnerIdType>;
  }) => Maybe<Partner>;
  partnerBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    partnerId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<Partner>;
  partners: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPartnerConnectionWhereArgs>;
  }) => Maybe<RootQueryToPartnerConnection>;
  plugin: (args: { id: Scalars["ID"] }) => Maybe<Plugin>;
  plugins: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToPluginConnection>;
  post: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<PostIdType>;
  }) => Maybe<Post>;
  postBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    postId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<Post>;
  postFormat: (args: {
    id: Scalars["ID"];
    idType?: Maybe<PostFormatIdType>;
  }) => Maybe<PostFormat>;
  postFormats: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPostFormatConnectionWhereArgs>;
  }) => Maybe<RootQueryToPostFormatConnection>;
  posts: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPostConnectionWhereArgs>;
  }) => Maybe<RootQueryToPostConnection>;
  pressCoverage: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<PressCoverageIdType>;
  }) => Maybe<PressCoverage>;
  pressCoverageBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    pressCoverageId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<PressCoverage>;
  pressCoverages: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPressCoverageConnectionWhereArgs>;
  }) => Maybe<RootQueryToPressCoverageConnection>;
  pressRelease: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<PressReleaseIdType>;
  }) => Maybe<PressRelease>;
  pressReleaseBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    pressReleaseId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<PressRelease>;
  pressReleases: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToPressReleaseConnectionWhereArgs>;
  }) => Maybe<RootQueryToPressReleaseConnection>;
  pro: (args: { id: Scalars["ID"]; idType?: Maybe<ProIdType> }) => Maybe<Pro>;
  productCard: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<ProductCardIdType>;
  }) => Maybe<ProductCard>;
  productCardBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    productCardId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<ProductCard>;
  productCards: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToProductCardConnectionWhereArgs>;
  }) => Maybe<RootQueryToProductCardConnection>;
  productsService: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<ProductsServiceIdType>;
  }) => Maybe<ProductsService>;
  productsServiceBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    productsServiceId?: Maybe<Scalars["Int"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<ProductsService>;
  productsServices: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToProductsServiceConnectionWhereArgs>;
  }) => Maybe<RootQueryToProductsServiceConnection>;
  project: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<ProjectIdType>;
  }) => Maybe<Project>;
  projectBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    projectId?: Maybe<Scalars["Int"]>;
    slug?: Maybe<Scalars["String"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<Project>;
  projects: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToProjectConnectionWhereArgs>;
  }) => Maybe<RootQueryToProjectConnection>;
  pros: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToProConnectionWhereArgs>;
  }) => Maybe<RootQueryToProConnection>;
  readingSettings?: Maybe<ReadingSettings>;
  registeredScripts: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToEnqueuedScriptConnection>;
  registeredStylesheets: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToEnqueuedStylesheetConnection>;
  revisions: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToContentRevisionUnionConnectionWhereArgs>;
  }) => Maybe<RootQueryToContentRevisionUnionConnection>;
  tag: (args: { id: Scalars["ID"]; idType?: Maybe<TagIdType> }) => Maybe<Tag>;
  tags: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToTagConnectionWhereArgs>;
  }) => Maybe<RootQueryToTagConnection>;
  taxonomies: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToTaxonomyConnection>;
  taxonomy: (args: {
    id: Scalars["ID"];
    idType?: Maybe<TaxonomyIdTypeEnum>;
  }) => Maybe<Taxonomy>;
  teamMember: (args: {
    asPreview?: Maybe<Scalars["Boolean"]>;
    id: Scalars["ID"];
    idType?: Maybe<TeamMemberIdType>;
  }) => Maybe<TeamMember>;
  teamMemberBy: (args?: {
    id?: Maybe<Scalars["ID"]>;
    slug?: Maybe<Scalars["String"]>;
    teamMemberId?: Maybe<Scalars["Int"]>;
    uri?: Maybe<Scalars["String"]>;
  }) => Maybe<TeamMember>;
  teamMembers: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToTeamMemberConnectionWhereArgs>;
  }) => Maybe<RootQueryToTeamMemberConnection>;
  termNode: (args: {
    id: Scalars["ID"];
    idType?: Maybe<TermNodeIdTypeEnum>;
    taxonomy?: Maybe<TaxonomyEnum>;
  }) => Maybe<TermNode>;
  terms: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToTermNodeConnectionWhereArgs>;
  }) => Maybe<RootQueryToTermNodeConnection>;
  theme: (args: { id: Scalars["ID"] }) => Maybe<Theme>;
  themes: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToThemeConnection>;
  user: (args: {
    id: Scalars["ID"];
    idType?: Maybe<UserNodeIdTypeEnum>;
  }) => Maybe<User>;
  userRole: (args: { id: Scalars["ID"] }) => Maybe<UserRole>;
  userRoles: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
  }) => Maybe<RootQueryToUserRoleConnection>;
  users: (args?: {
    after?: Maybe<Scalars["String"]>;
    before?: Maybe<Scalars["String"]>;
    first?: Maybe<Scalars["Int"]>;
    last?: Maybe<Scalars["Int"]>;
    where?: Maybe<RootQueryToUserConnectionWhereArgs>;
  }) => Maybe<RootQueryToUserConnection>;
  viewer?: Maybe<User>;
  writingSettings?: Maybe<WritingSettings>;
}

export interface Subscription {
  __typename?: "Subscription";
}

export interface SchemaObjectTypes {
  AcfLink: AcfLink;
  AddressField: AddressField;
  AddressFieldValue: AddressFieldValue;
  AddressInputProperty: AddressInputProperty;
  AtlasContentModelerSettingsSettings: AtlasContentModelerSettingsSettings;
  Avatar: Avatar;
  CaptchaField: CaptchaField;
  Category: Category;
  CategoryToAncestorsCategoryConnection: CategoryToAncestorsCategoryConnection;
  CategoryToAncestorsCategoryConnectionEdge: CategoryToAncestorsCategoryConnectionEdge;
  CategoryToCategoryConnection: CategoryToCategoryConnection;
  CategoryToCategoryConnectionEdge: CategoryToCategoryConnectionEdge;
  CategoryToContentNodeConnection: CategoryToContentNodeConnection;
  CategoryToContentNodeConnectionEdge: CategoryToContentNodeConnectionEdge;
  CategoryToParentCategoryConnectionEdge: CategoryToParentCategoryConnectionEdge;
  CategoryToPostConnection: CategoryToPostConnection;
  CategoryToPostConnectionEdge: CategoryToPostConnectionEdge;
  CategoryToTaxonomyConnectionEdge: CategoryToTaxonomyConnectionEdge;
  CheckboxField: CheckboxField;
  CheckboxFieldChoice: CheckboxFieldChoice;
  CheckboxFieldValue: CheckboxFieldValue;
  CheckboxInputProperty: CheckboxInputProperty;
  Comment: Comment;
  CommentAuthor: CommentAuthor;
  CommentToCommentConnection: CommentToCommentConnection;
  CommentToCommentConnectionEdge: CommentToCommentConnectionEdge;
  CommentToCommenterConnectionEdge: CommentToCommenterConnectionEdge;
  CommentToContentNodeConnectionEdge: CommentToContentNodeConnectionEdge;
  CommentToParentCommentConnectionEdge: CommentToParentCommentConnectionEdge;
  ConditionalLogic: ConditionalLogic;
  ConditionalLogicRule: ConditionalLogicRule;
  ConditionalTags: ConditionalTags;
  ConsentField: ConsentField;
  ContentNodeToContentTypeConnectionEdge: ContentNodeToContentTypeConnectionEdge;
  ContentNodeToEditLastConnectionEdge: ContentNodeToEditLastConnectionEdge;
  ContentNodeToEditLockConnectionEdge: ContentNodeToEditLockConnectionEdge;
  ContentNodeToEnqueuedScriptConnection: ContentNodeToEnqueuedScriptConnection;
  ContentNodeToEnqueuedScriptConnectionEdge: ContentNodeToEnqueuedScriptConnectionEdge;
  ContentNodeToEnqueuedStylesheetConnection: ContentNodeToEnqueuedStylesheetConnection;
  ContentNodeToEnqueuedStylesheetConnectionEdge: ContentNodeToEnqueuedStylesheetConnectionEdge;
  ContentType: ContentType;
  ContentTypeToContentNodeConnection: ContentTypeToContentNodeConnection;
  ContentTypeToContentNodeConnectionEdge: ContentTypeToContentNodeConnectionEdge;
  ContentTypeToTaxonomyConnection: ContentTypeToTaxonomyConnection;
  ContentTypeToTaxonomyConnectionEdge: ContentTypeToTaxonomyConnectionEdge;
  CreateCategoryPayload: CreateCategoryPayload;
  CreateCommentPayload: CreateCommentPayload;
  CreateMediaItemPayload: CreateMediaItemPayload;
  CreateNewEventPayload: CreateNewEventPayload;
  CreateNewMediaCenterPayload: CreateNewMediaCenterPayload;
  CreateNewPressCoveragePayload: CreateNewPressCoveragePayload;
  CreateNewPressReleasePayload: CreateNewPressReleasePayload;
  CreatePagePayload: CreatePagePayload;
  CreatePartnerPayload: CreatePartnerPayload;
  CreatePostFormatPayload: CreatePostFormatPayload;
  CreatePostPayload: CreatePostPayload;
  CreatePressCoveragePayload: CreatePressCoveragePayload;
  CreatePressReleasePayload: CreatePressReleasePayload;
  CreateProPayload: CreateProPayload;
  CreateProductCardPayload: CreateProductCardPayload;
  CreateProductsServicePayload: CreateProductsServicePayload;
  CreateProjectPayload: CreateProjectPayload;
  CreateTagPayload: CreateTagPayload;
  CreateTeamMemberPayload: CreateTeamMemberPayload;
  CreateUserPayload: CreateUserPayload;
  DateField: DateField;
  DateInputProperty: DateInputProperty;
  DefaultTemplate: DefaultTemplate;
  DeleteCategoryPayload: DeleteCategoryPayload;
  DeleteCommentPayload: DeleteCommentPayload;
  DeleteGfDraftEntryPayload: DeleteGfDraftEntryPayload;
  DeleteGfEntryPayload: DeleteGfEntryPayload;
  DeleteMediaItemPayload: DeleteMediaItemPayload;
  DeleteNewEventPayload: DeleteNewEventPayload;
  DeleteNewMediaCenterPayload: DeleteNewMediaCenterPayload;
  DeleteNewPressCoveragePayload: DeleteNewPressCoveragePayload;
  DeleteNewPressReleasePayload: DeleteNewPressReleasePayload;
  DeletePagePayload: DeletePagePayload;
  DeletePartnerPayload: DeletePartnerPayload;
  DeletePostFormatPayload: DeletePostFormatPayload;
  DeletePostPayload: DeletePostPayload;
  DeletePressCoveragePayload: DeletePressCoveragePayload;
  DeletePressReleasePayload: DeletePressReleasePayload;
  DeleteProPayload: DeleteProPayload;
  DeleteProductCardPayload: DeleteProductCardPayload;
  DeleteProductsServicePayload: DeleteProductsServicePayload;
  DeleteProjectPayload: DeleteProjectPayload;
  DeleteTagPayload: DeleteTagPayload;
  DeleteTeamMemberPayload: DeleteTeamMemberPayload;
  DeleteUserPayload: DeleteUserPayload;
  DiscussionSettings: DiscussionSettings;
  EmailField: EmailField;
  EmailInputProperty: EmailInputProperty;
  EnqueuedScript: EnqueuedScript;
  EnqueuedStylesheet: EnqueuedStylesheet;
  FieldError: FieldError;
  FileUploadField: FileUploadField;
  FormButton: FormButton;
  FormConfirmation: FormConfirmation;
  FormDataPolicies: FormDataPolicies;
  FormEntryDataPolicy: FormEntryDataPolicy;
  FormEntryLimits: FormEntryLimits;
  FormFieldDataPolicy: FormFieldDataPolicy;
  FormLastPageButton: FormLastPageButton;
  FormLogin: FormLogin;
  FormNotification: FormNotification;
  FormNotificationRouting: FormNotificationRouting;
  FormPagination: FormPagination;
  FormPersonalData: FormPersonalData;
  FormPostCreation: FormPostCreation;
  FormSaveAndContinue: FormSaveAndContinue;
  FormSchedule: FormSchedule;
  FormScheduleDetails: FormScheduleDetails;
  GeneralSettings: GeneralSettings;
  GenerateAuthorizationCodePayload: GenerateAuthorizationCodePayload;
  GfDraftEntry: GfDraftEntry;
  GfEntryToFormFieldConnection: GfEntryToFormFieldConnection;
  GfEntryToFormFieldConnectionEdge: GfEntryToFormFieldConnectionEdge;
  GfForm: GfForm;
  GfFormToFormFieldConnection: GfFormToFormFieldConnection;
  GfFormToFormFieldConnectionEdge: GfFormToFormFieldConnectionEdge;
  GfFormToGfEntryConnection: GfFormToGfEntryConnection;
  GfFormToGfEntryConnectionEdge: GfFormToGfEntryConnectionEdge;
  GfLogger: GfLogger;
  GfSettings: GfSettings;
  GfSettingsLogging: GfSettingsLogging;
  GfSubmittedEntry: GfSubmittedEntry;
  HCMSFooter: HCMSFooter;
  HCMSHeader: HCMSHeader;
  HCMSSocialLinks: HCMSSocialLinks;
  HiddenField: HiddenField;
  HierarchicalContentNodeToContentNodeAncestorsConnection: HierarchicalContentNodeToContentNodeAncestorsConnection;
  HierarchicalContentNodeToContentNodeAncestorsConnectionEdge: HierarchicalContentNodeToContentNodeAncestorsConnectionEdge;
  HierarchicalContentNodeToContentNodeChildrenConnection: HierarchicalContentNodeToContentNodeChildrenConnection;
  HierarchicalContentNodeToContentNodeChildrenConnectionEdge: HierarchicalContentNodeToContentNodeChildrenConnectionEdge;
  HierarchicalContentNodeToParentContentNodeConnectionEdge: HierarchicalContentNodeToParentContentNodeConnectionEdge;
  HtmlField: HtmlField;
  ImageFieldValue: ImageFieldValue;
  ListField: ListField;
  ListFieldChoice: ListFieldChoice;
  ListFieldValue: ListFieldValue;
  MediaDetails: MediaDetails;
  MediaItem: MediaItem;
  MediaItemMeta: MediaItemMeta;
  MediaItemToCommentConnection: MediaItemToCommentConnection;
  MediaItemToCommentConnectionEdge: MediaItemToCommentConnectionEdge;
  MediaSize: MediaSize;
  Menu: Menu;
  MenuItem: MenuItem;
  MenuItemToMenuConnectionEdge: MenuItemToMenuConnectionEdge;
  MenuItemToMenuItemConnection: MenuItemToMenuItemConnection;
  MenuItemToMenuItemConnectionEdge: MenuItemToMenuItemConnectionEdge;
  MenuItemToMenuItemLinkableConnectionEdge: MenuItemToMenuItemLinkableConnectionEdge;
  MenuToMenuItemConnection: MenuToMenuItemConnection;
  MenuToMenuItemConnectionEdge: MenuToMenuItemConnectionEdge;
  MultiSelectField: MultiSelectField;
  MultiSelectFieldChoice: MultiSelectFieldChoice;
  Mutation: Mutation;
  NameField: NameField;
  NameFieldChoice: NameFieldChoice;
  NameFieldValue: NameFieldValue;
  NameInputProperty: NameInputProperty;
  NewEvent: NewEvent;
  NewEventToNewMediaCenterConnection: NewEventToNewMediaCenterConnection;
  NewEventToNewMediaCenterConnectionEdge: NewEventToNewMediaCenterConnectionEdge;
  NewEventToPreviewConnectionEdge: NewEventToPreviewConnectionEdge;
  NewEventToTermNodeConnection: NewEventToTermNodeConnection;
  NewEventToTermNodeConnectionEdge: NewEventToTermNodeConnectionEdge;
  NewMediaCenter: NewMediaCenter;
  NewMediaCenterToAncestorsNewMediaCenterConnection: NewMediaCenterToAncestorsNewMediaCenterConnection;
  NewMediaCenterToAncestorsNewMediaCenterConnectionEdge: NewMediaCenterToAncestorsNewMediaCenterConnectionEdge;
  NewMediaCenterToContentNodeConnection: NewMediaCenterToContentNodeConnection;
  NewMediaCenterToContentNodeConnectionEdge: NewMediaCenterToContentNodeConnectionEdge;
  NewMediaCenterToNewEventConnection: NewMediaCenterToNewEventConnection;
  NewMediaCenterToNewEventConnectionEdge: NewMediaCenterToNewEventConnectionEdge;
  NewMediaCenterToNewMediaCenterConnection: NewMediaCenterToNewMediaCenterConnection;
  NewMediaCenterToNewMediaCenterConnectionEdge: NewMediaCenterToNewMediaCenterConnectionEdge;
  NewMediaCenterToNewPressCoverageConnection: NewMediaCenterToNewPressCoverageConnection;
  NewMediaCenterToNewPressCoverageConnectionEdge: NewMediaCenterToNewPressCoverageConnectionEdge;
  NewMediaCenterToNewPressReleaseConnection: NewMediaCenterToNewPressReleaseConnection;
  NewMediaCenterToNewPressReleaseConnectionEdge: NewMediaCenterToNewPressReleaseConnectionEdge;
  NewMediaCenterToParentNewMediaCenterConnectionEdge: NewMediaCenterToParentNewMediaCenterConnectionEdge;
  NewMediaCenterToTaxonomyConnectionEdge: NewMediaCenterToTaxonomyConnectionEdge;
  NewPressCoverage: NewPressCoverage;
  NewPressCoverageToNewMediaCenterConnection: NewPressCoverageToNewMediaCenterConnection;
  NewPressCoverageToNewMediaCenterConnectionEdge: NewPressCoverageToNewMediaCenterConnectionEdge;
  NewPressCoverageToPreviewConnectionEdge: NewPressCoverageToPreviewConnectionEdge;
  NewPressCoverageToTermNodeConnection: NewPressCoverageToTermNodeConnection;
  NewPressCoverageToTermNodeConnectionEdge: NewPressCoverageToTermNodeConnectionEdge;
  NewPressRelease: NewPressRelease;
  NewPressReleaseToNewMediaCenterConnection: NewPressReleaseToNewMediaCenterConnection;
  NewPressReleaseToNewMediaCenterConnectionEdge: NewPressReleaseToNewMediaCenterConnectionEdge;
  NewPressReleaseToPreviewConnectionEdge: NewPressReleaseToPreviewConnectionEdge;
  NewPressReleaseToTermNodeConnection: NewPressReleaseToTermNodeConnection;
  NewPressReleaseToTermNodeConnectionEdge: NewPressReleaseToTermNodeConnectionEdge;
  NodeWithAuthorToUserConnectionEdge: NodeWithAuthorToUserConnectionEdge;
  NodeWithFeaturedImageToMediaItemConnectionEdge: NodeWithFeaturedImageToMediaItemConnectionEdge;
  NodeWithRevisionsToContentNodeConnectionEdge: NodeWithRevisionsToContentNodeConnectionEdge;
  NumberField: NumberField;
  Page: Page;
  PageField: PageField;
  PageToCommentConnection: PageToCommentConnection;
  PageToCommentConnectionEdge: PageToCommentConnectionEdge;
  PageToPreviewConnectionEdge: PageToPreviewConnectionEdge;
  PageToRevisionConnection: PageToRevisionConnection;
  PageToRevisionConnectionEdge: PageToRevisionConnectionEdge;
  Page_Standardpage: Page_Standardpage;
  Page_Successstoriesacf: Page_Successstoriesacf;
  Page_Successstoriesacf_carouselSlider: Page_Successstoriesacf_carouselSlider;
  Page_Successstoriesacf_pageLargeSlider: Page_Successstoriesacf_pageLargeSlider;
  Page_Successstoriesacf_suggestedResources: Page_Successstoriesacf_suggestedResources;
  Page_Threecolumnstaticpage: Page_Threecolumnstaticpage;
  Page_Threecolumnstaticpage_Banner: Page_Threecolumnstaticpage_Banner;
  Page_Threecolumnstaticpage_cards: Page_Threecolumnstaticpage_cards;
  Partner: Partner;
  PartnerToPreviewConnectionEdge: PartnerToPreviewConnectionEdge;
  PasswordField: PasswordField;
  PasswordInputProperty: PasswordInputProperty;
  PhoneField: PhoneField;
  Plugin: Plugin;
  Post: Post;
  PostCategoryCheckboxField: PostCategoryCheckboxField;
  PostCategoryFieldChoice: PostCategoryFieldChoice;
  PostCategoryInputProperty: PostCategoryInputProperty;
  PostCategoryMultiSelectField: PostCategoryMultiSelectField;
  PostCategoryRadioField: PostCategoryRadioField;
  PostCategorySelectField: PostCategorySelectField;
  PostContentField: PostContentField;
  PostCustomCheckboxField: PostCustomCheckboxField;
  PostCustomCheckboxFieldChoice: PostCustomCheckboxFieldChoice;
  PostCustomDateField: PostCustomDateField;
  PostCustomEmailField: PostCustomEmailField;
  PostCustomFileuploadField: PostCustomFileuploadField;
  PostCustomHiddenField: PostCustomHiddenField;
  PostCustomInputProperty: PostCustomInputProperty;
  PostCustomListField: PostCustomListField;
  PostCustomListFieldChoice: PostCustomListFieldChoice;
  PostCustomMultiSelectField: PostCustomMultiSelectField;
  PostCustomMultiSelectFieldChoice: PostCustomMultiSelectFieldChoice;
  PostCustomNumberField: PostCustomNumberField;
  PostCustomPhoneField: PostCustomPhoneField;
  PostCustomRadioField: PostCustomRadioField;
  PostCustomRadioFieldChoice: PostCustomRadioFieldChoice;
  PostCustomSelectField: PostCustomSelectField;
  PostCustomSelectFieldChoice: PostCustomSelectFieldChoice;
  PostCustomTextAreaField: PostCustomTextAreaField;
  PostCustomTextField: PostCustomTextField;
  PostCustomTimeField: PostCustomTimeField;
  PostCustomWebsiteField: PostCustomWebsiteField;
  PostExcerptField: PostExcerptField;
  PostFormat: PostFormat;
  PostFormatToContentNodeConnection: PostFormatToContentNodeConnection;
  PostFormatToContentNodeConnectionEdge: PostFormatToContentNodeConnectionEdge;
  PostFormatToPostConnection: PostFormatToPostConnection;
  PostFormatToPostConnectionEdge: PostFormatToPostConnectionEdge;
  PostFormatToProductsServiceConnection: PostFormatToProductsServiceConnection;
  PostFormatToProductsServiceConnectionEdge: PostFormatToProductsServiceConnectionEdge;
  PostFormatToTaxonomyConnectionEdge: PostFormatToTaxonomyConnectionEdge;
  PostImageField: PostImageField;
  PostTagsCheckboxField: PostTagsCheckboxField;
  PostTagsCheckboxFieldChoice: PostTagsCheckboxFieldChoice;
  PostTagsInputProperty: PostTagsInputProperty;
  PostTagsMultiSelectField: PostTagsMultiSelectField;
  PostTagsMultiSelectFieldChoice: PostTagsMultiSelectFieldChoice;
  PostTagsRadioField: PostTagsRadioField;
  PostTagsRadioFieldChoice: PostTagsRadioFieldChoice;
  PostTagsSelectField: PostTagsSelectField;
  PostTagsSelectFieldChoice: PostTagsSelectFieldChoice;
  PostTagsTextField: PostTagsTextField;
  PostTitleField: PostTitleField;
  PostToCategoryConnection: PostToCategoryConnection;
  PostToCategoryConnectionEdge: PostToCategoryConnectionEdge;
  PostToCommentConnection: PostToCommentConnection;
  PostToCommentConnectionEdge: PostToCommentConnectionEdge;
  PostToPostFormatConnection: PostToPostFormatConnection;
  PostToPostFormatConnectionEdge: PostToPostFormatConnectionEdge;
  PostToPreviewConnectionEdge: PostToPreviewConnectionEdge;
  PostToRevisionConnection: PostToRevisionConnection;
  PostToRevisionConnectionEdge: PostToRevisionConnectionEdge;
  PostToTagConnection: PostToTagConnection;
  PostToTagConnectionEdge: PostToTagConnectionEdge;
  PostToTermNodeConnection: PostToTermNodeConnection;
  PostToTermNodeConnectionEdge: PostToTermNodeConnectionEdge;
  PostTypeLabelDetails: PostTypeLabelDetails;
  PressCoverage: PressCoverage;
  PressCoverageToPreviewConnectionEdge: PressCoverageToPreviewConnectionEdge;
  PressCoverageToTermNodeConnection: PressCoverageToTermNodeConnection;
  PressCoverageToTermNodeConnectionEdge: PressCoverageToTermNodeConnectionEdge;
  PressRelease: PressRelease;
  PressReleaseToPreviewConnectionEdge: PressReleaseToPreviewConnectionEdge;
  PressReleaseToTermNodeConnection: PressReleaseToTermNodeConnection;
  PressReleaseToTermNodeConnectionEdge: PressReleaseToTermNodeConnectionEdge;
  Pro: Pro;
  ProToAncestorsProConnection: ProToAncestorsProConnection;
  ProToAncestorsProConnectionEdge: ProToAncestorsProConnectionEdge;
  ProToParentProConnectionEdge: ProToParentProConnectionEdge;
  ProToProConnection: ProToProConnection;
  ProToProConnectionEdge: ProToProConnectionEdge;
  ProToTaxonomyConnectionEdge: ProToTaxonomyConnectionEdge;
  ProductCard: ProductCard;
  ProductCardToPreviewConnectionEdge: ProductCardToPreviewConnectionEdge;
  ProductsService: ProductsService;
  ProductsServiceToPostFormatConnection: ProductsServiceToPostFormatConnection;
  ProductsServiceToPostFormatConnectionEdge: ProductsServiceToPostFormatConnectionEdge;
  ProductsServiceToPreviewConnectionEdge: ProductsServiceToPreviewConnectionEdge;
  ProductsServiceToRevisionConnection: ProductsServiceToRevisionConnection;
  ProductsServiceToRevisionConnectionEdge: ProductsServiceToRevisionConnectionEdge;
  ProductsServiceToTermNodeConnection: ProductsServiceToTermNodeConnection;
  ProductsServiceToTermNodeConnectionEdge: ProductsServiceToTermNodeConnectionEdge;
  ProductsService_Standardpage: ProductsService_Standardpage;
  Project: Project;
  ProjectToPreviewConnectionEdge: ProjectToPreviewConnectionEdge;
  Query: Query;
  RadioField: RadioField;
  RadioFieldChoice: RadioFieldChoice;
  ReadingSettings: ReadingSettings;
  RegisterUserPayload: RegisterUserPayload;
  ResetUserPasswordPayload: ResetUserPasswordPayload;
  RestoreCommentPayload: RestoreCommentPayload;
  RootQueryToCategoryConnection: RootQueryToCategoryConnection;
  RootQueryToCategoryConnectionEdge: RootQueryToCategoryConnectionEdge;
  RootQueryToCommentConnection: RootQueryToCommentConnection;
  RootQueryToCommentConnectionEdge: RootQueryToCommentConnectionEdge;
  RootQueryToContentNodeConnection: RootQueryToContentNodeConnection;
  RootQueryToContentNodeConnectionEdge: RootQueryToContentNodeConnectionEdge;
  RootQueryToContentRevisionUnionConnection: RootQueryToContentRevisionUnionConnection;
  RootQueryToContentRevisionUnionConnectionEdge: RootQueryToContentRevisionUnionConnectionEdge;
  RootQueryToContentTypeConnection: RootQueryToContentTypeConnection;
  RootQueryToContentTypeConnectionEdge: RootQueryToContentTypeConnectionEdge;
  RootQueryToEnqueuedScriptConnection: RootQueryToEnqueuedScriptConnection;
  RootQueryToEnqueuedScriptConnectionEdge: RootQueryToEnqueuedScriptConnectionEdge;
  RootQueryToEnqueuedStylesheetConnection: RootQueryToEnqueuedStylesheetConnection;
  RootQueryToEnqueuedStylesheetConnectionEdge: RootQueryToEnqueuedStylesheetConnectionEdge;
  RootQueryToGfEntryConnection: RootQueryToGfEntryConnection;
  RootQueryToGfEntryConnectionEdge: RootQueryToGfEntryConnectionEdge;
  RootQueryToGfFormConnection: RootQueryToGfFormConnection;
  RootQueryToGfFormConnectionEdge: RootQueryToGfFormConnectionEdge;
  RootQueryToGfSubmittedEntryConnection: RootQueryToGfSubmittedEntryConnection;
  RootQueryToGfSubmittedEntryConnectionEdge: RootQueryToGfSubmittedEntryConnectionEdge;
  RootQueryToMediaItemConnection: RootQueryToMediaItemConnection;
  RootQueryToMediaItemConnectionEdge: RootQueryToMediaItemConnectionEdge;
  RootQueryToMenuConnection: RootQueryToMenuConnection;
  RootQueryToMenuConnectionEdge: RootQueryToMenuConnectionEdge;
  RootQueryToMenuItemConnection: RootQueryToMenuItemConnection;
  RootQueryToMenuItemConnectionEdge: RootQueryToMenuItemConnectionEdge;
  RootQueryToNewEventConnection: RootQueryToNewEventConnection;
  RootQueryToNewEventConnectionEdge: RootQueryToNewEventConnectionEdge;
  RootQueryToNewMediaCenterConnection: RootQueryToNewMediaCenterConnection;
  RootQueryToNewMediaCenterConnectionEdge: RootQueryToNewMediaCenterConnectionEdge;
  RootQueryToNewPressCoverageConnection: RootQueryToNewPressCoverageConnection;
  RootQueryToNewPressCoverageConnectionEdge: RootQueryToNewPressCoverageConnectionEdge;
  RootQueryToNewPressReleaseConnection: RootQueryToNewPressReleaseConnection;
  RootQueryToNewPressReleaseConnectionEdge: RootQueryToNewPressReleaseConnectionEdge;
  RootQueryToPageConnection: RootQueryToPageConnection;
  RootQueryToPageConnectionEdge: RootQueryToPageConnectionEdge;
  RootQueryToPartnerConnection: RootQueryToPartnerConnection;
  RootQueryToPartnerConnectionEdge: RootQueryToPartnerConnectionEdge;
  RootQueryToPluginConnection: RootQueryToPluginConnection;
  RootQueryToPluginConnectionEdge: RootQueryToPluginConnectionEdge;
  RootQueryToPostConnection: RootQueryToPostConnection;
  RootQueryToPostConnectionEdge: RootQueryToPostConnectionEdge;
  RootQueryToPostFormatConnection: RootQueryToPostFormatConnection;
  RootQueryToPostFormatConnectionEdge: RootQueryToPostFormatConnectionEdge;
  RootQueryToPressCoverageConnection: RootQueryToPressCoverageConnection;
  RootQueryToPressCoverageConnectionEdge: RootQueryToPressCoverageConnectionEdge;
  RootQueryToPressReleaseConnection: RootQueryToPressReleaseConnection;
  RootQueryToPressReleaseConnectionEdge: RootQueryToPressReleaseConnectionEdge;
  RootQueryToProConnection: RootQueryToProConnection;
  RootQueryToProConnectionEdge: RootQueryToProConnectionEdge;
  RootQueryToProductCardConnection: RootQueryToProductCardConnection;
  RootQueryToProductCardConnectionEdge: RootQueryToProductCardConnectionEdge;
  RootQueryToProductsServiceConnection: RootQueryToProductsServiceConnection;
  RootQueryToProductsServiceConnectionEdge: RootQueryToProductsServiceConnectionEdge;
  RootQueryToProjectConnection: RootQueryToProjectConnection;
  RootQueryToProjectConnectionEdge: RootQueryToProjectConnectionEdge;
  RootQueryToTagConnection: RootQueryToTagConnection;
  RootQueryToTagConnectionEdge: RootQueryToTagConnectionEdge;
  RootQueryToTaxonomyConnection: RootQueryToTaxonomyConnection;
  RootQueryToTaxonomyConnectionEdge: RootQueryToTaxonomyConnectionEdge;
  RootQueryToTeamMemberConnection: RootQueryToTeamMemberConnection;
  RootQueryToTeamMemberConnectionEdge: RootQueryToTeamMemberConnectionEdge;
  RootQueryToTermNodeConnection: RootQueryToTermNodeConnection;
  RootQueryToTermNodeConnectionEdge: RootQueryToTermNodeConnectionEdge;
  RootQueryToThemeConnection: RootQueryToThemeConnection;
  RootQueryToThemeConnectionEdge: RootQueryToThemeConnectionEdge;
  RootQueryToUserConnection: RootQueryToUserConnection;
  RootQueryToUserConnectionEdge: RootQueryToUserConnectionEdge;
  RootQueryToUserRoleConnection: RootQueryToUserRoleConnection;
  RootQueryToUserRoleConnectionEdge: RootQueryToUserRoleConnectionEdge;
  SectionField: SectionField;
  SelectField: SelectField;
  SelectFieldChoice: SelectFieldChoice;
  SendPasswordResetEmailPayload: SendPasswordResetEmailPayload;
  Settings: Settings;
  SignatureField: SignatureField;
  SubmitGfDraftEntryPayload: SubmitGfDraftEntryPayload;
  SubmitGfFormPayload: SubmitGfFormPayload;
  Subscription: Subscription;
  Tag: Tag;
  TagToContentNodeConnection: TagToContentNodeConnection;
  TagToContentNodeConnectionEdge: TagToContentNodeConnectionEdge;
  TagToPostConnection: TagToPostConnection;
  TagToPostConnectionEdge: TagToPostConnectionEdge;
  TagToTaxonomyConnectionEdge: TagToTaxonomyConnectionEdge;
  Taxonomy: Taxonomy;
  TaxonomyToContentTypeConnection: TaxonomyToContentTypeConnection;
  TaxonomyToContentTypeConnectionEdge: TaxonomyToContentTypeConnectionEdge;
  TeamMember: TeamMember;
  TeamMemberToPreviewConnectionEdge: TeamMemberToPreviewConnectionEdge;
  TermNodeToEnqueuedScriptConnection: TermNodeToEnqueuedScriptConnection;
  TermNodeToEnqueuedScriptConnectionEdge: TermNodeToEnqueuedScriptConnectionEdge;
  TermNodeToEnqueuedStylesheetConnection: TermNodeToEnqueuedStylesheetConnection;
  TermNodeToEnqueuedStylesheetConnectionEdge: TermNodeToEnqueuedStylesheetConnectionEdge;
  TextAreaField: TextAreaField;
  TextField: TextField;
  Theme: Theme;
  TimeField: TimeField;
  TimeFieldValue: TimeFieldValue;
  TimeInputProperty: TimeInputProperty;
  UpdateCategoryPayload: UpdateCategoryPayload;
  UpdateCommentPayload: UpdateCommentPayload;
  UpdateGfDraftEntryPayload: UpdateGfDraftEntryPayload;
  UpdateGfEntryPayload: UpdateGfEntryPayload;
  UpdateMediaItemPayload: UpdateMediaItemPayload;
  UpdateNewEventPayload: UpdateNewEventPayload;
  UpdateNewMediaCenterPayload: UpdateNewMediaCenterPayload;
  UpdateNewPressCoveragePayload: UpdateNewPressCoveragePayload;
  UpdateNewPressReleasePayload: UpdateNewPressReleasePayload;
  UpdatePagePayload: UpdatePagePayload;
  UpdatePartnerPayload: UpdatePartnerPayload;
  UpdatePostFormatPayload: UpdatePostFormatPayload;
  UpdatePostPayload: UpdatePostPayload;
  UpdatePressCoveragePayload: UpdatePressCoveragePayload;
  UpdatePressReleasePayload: UpdatePressReleasePayload;
  UpdateProPayload: UpdateProPayload;
  UpdateProductCardPayload: UpdateProductCardPayload;
  UpdateProductsServicePayload: UpdateProductsServicePayload;
  UpdateProjectPayload: UpdateProjectPayload;
  UpdateSettingsPayload: UpdateSettingsPayload;
  UpdateTagPayload: UpdateTagPayload;
  UpdateTeamMemberPayload: UpdateTeamMemberPayload;
  UpdateUserPayload: UpdateUserPayload;
  User: User;
  UserRole: UserRole;
  UserToCommentConnection: UserToCommentConnection;
  UserToCommentConnectionEdge: UserToCommentConnectionEdge;
  UserToContentRevisionUnionConnection: UserToContentRevisionUnionConnection;
  UserToContentRevisionUnionConnectionEdge: UserToContentRevisionUnionConnectionEdge;
  UserToEnqueuedScriptConnection: UserToEnqueuedScriptConnection;
  UserToEnqueuedScriptConnectionEdge: UserToEnqueuedScriptConnectionEdge;
  UserToEnqueuedStylesheetConnection: UserToEnqueuedStylesheetConnection;
  UserToEnqueuedStylesheetConnectionEdge: UserToEnqueuedStylesheetConnectionEdge;
  UserToMediaItemConnection: UserToMediaItemConnection;
  UserToMediaItemConnectionEdge: UserToMediaItemConnectionEdge;
  UserToNewEventConnection: UserToNewEventConnection;
  UserToNewEventConnectionEdge: UserToNewEventConnectionEdge;
  UserToNewPressCoverageConnection: UserToNewPressCoverageConnection;
  UserToNewPressCoverageConnectionEdge: UserToNewPressCoverageConnectionEdge;
  UserToNewPressReleaseConnection: UserToNewPressReleaseConnection;
  UserToNewPressReleaseConnectionEdge: UserToNewPressReleaseConnectionEdge;
  UserToPageConnection: UserToPageConnection;
  UserToPageConnectionEdge: UserToPageConnectionEdge;
  UserToPartnerConnection: UserToPartnerConnection;
  UserToPartnerConnectionEdge: UserToPartnerConnectionEdge;
  UserToPostConnection: UserToPostConnection;
  UserToPostConnectionEdge: UserToPostConnectionEdge;
  UserToProductCardConnection: UserToProductCardConnection;
  UserToProductCardConnectionEdge: UserToProductCardConnectionEdge;
  UserToProjectConnection: UserToProjectConnection;
  UserToProjectConnectionEdge: UserToProjectConnectionEdge;
  UserToTeamMemberConnection: UserToTeamMemberConnection;
  UserToTeamMemberConnectionEdge: UserToTeamMemberConnectionEdge;
  UserToUserRoleConnection: UserToUserRoleConnection;
  UserToUserRoleConnectionEdge: UserToUserRoleConnectionEdge;
  WPPageInfo: WPPageInfo;
  WebsiteField: WebsiteField;
  WritingSettings: WritingSettings;
}
export type SchemaObjectTypesNames =
  | "AcfLink"
  | "AddressField"
  | "AddressFieldValue"
  | "AddressInputProperty"
  | "AtlasContentModelerSettingsSettings"
  | "Avatar"
  | "CaptchaField"
  | "Category"
  | "CategoryToAncestorsCategoryConnection"
  | "CategoryToAncestorsCategoryConnectionEdge"
  | "CategoryToCategoryConnection"
  | "CategoryToCategoryConnectionEdge"
  | "CategoryToContentNodeConnection"
  | "CategoryToContentNodeConnectionEdge"
  | "CategoryToParentCategoryConnectionEdge"
  | "CategoryToPostConnection"
  | "CategoryToPostConnectionEdge"
  | "CategoryToTaxonomyConnectionEdge"
  | "CheckboxField"
  | "CheckboxFieldChoice"
  | "CheckboxFieldValue"
  | "CheckboxInputProperty"
  | "Comment"
  | "CommentAuthor"
  | "CommentToCommentConnection"
  | "CommentToCommentConnectionEdge"
  | "CommentToCommenterConnectionEdge"
  | "CommentToContentNodeConnectionEdge"
  | "CommentToParentCommentConnectionEdge"
  | "ConditionalLogic"
  | "ConditionalLogicRule"
  | "ConditionalTags"
  | "ConsentField"
  | "ContentNodeToContentTypeConnectionEdge"
  | "ContentNodeToEditLastConnectionEdge"
  | "ContentNodeToEditLockConnectionEdge"
  | "ContentNodeToEnqueuedScriptConnection"
  | "ContentNodeToEnqueuedScriptConnectionEdge"
  | "ContentNodeToEnqueuedStylesheetConnection"
  | "ContentNodeToEnqueuedStylesheetConnectionEdge"
  | "ContentType"
  | "ContentTypeToContentNodeConnection"
  | "ContentTypeToContentNodeConnectionEdge"
  | "ContentTypeToTaxonomyConnection"
  | "ContentTypeToTaxonomyConnectionEdge"
  | "CreateCategoryPayload"
  | "CreateCommentPayload"
  | "CreateMediaItemPayload"
  | "CreateNewEventPayload"
  | "CreateNewMediaCenterPayload"
  | "CreateNewPressCoveragePayload"
  | "CreateNewPressReleasePayload"
  | "CreatePagePayload"
  | "CreatePartnerPayload"
  | "CreatePostFormatPayload"
  | "CreatePostPayload"
  | "CreatePressCoveragePayload"
  | "CreatePressReleasePayload"
  | "CreateProPayload"
  | "CreateProductCardPayload"
  | "CreateProductsServicePayload"
  | "CreateProjectPayload"
  | "CreateTagPayload"
  | "CreateTeamMemberPayload"
  | "CreateUserPayload"
  | "DateField"
  | "DateInputProperty"
  | "DefaultTemplate"
  | "DeleteCategoryPayload"
  | "DeleteCommentPayload"
  | "DeleteGfDraftEntryPayload"
  | "DeleteGfEntryPayload"
  | "DeleteMediaItemPayload"
  | "DeleteNewEventPayload"
  | "DeleteNewMediaCenterPayload"
  | "DeleteNewPressCoveragePayload"
  | "DeleteNewPressReleasePayload"
  | "DeletePagePayload"
  | "DeletePartnerPayload"
  | "DeletePostFormatPayload"
  | "DeletePostPayload"
  | "DeletePressCoveragePayload"
  | "DeletePressReleasePayload"
  | "DeleteProPayload"
  | "DeleteProductCardPayload"
  | "DeleteProductsServicePayload"
  | "DeleteProjectPayload"
  | "DeleteTagPayload"
  | "DeleteTeamMemberPayload"
  | "DeleteUserPayload"
  | "DiscussionSettings"
  | "EmailField"
  | "EmailInputProperty"
  | "EnqueuedScript"
  | "EnqueuedStylesheet"
  | "FieldError"
  | "FileUploadField"
  | "FormButton"
  | "FormConfirmation"
  | "FormDataPolicies"
  | "FormEntryDataPolicy"
  | "FormEntryLimits"
  | "FormFieldDataPolicy"
  | "FormLastPageButton"
  | "FormLogin"
  | "FormNotification"
  | "FormNotificationRouting"
  | "FormPagination"
  | "FormPersonalData"
  | "FormPostCreation"
  | "FormSaveAndContinue"
  | "FormSchedule"
  | "FormScheduleDetails"
  | "GeneralSettings"
  | "GenerateAuthorizationCodePayload"
  | "GfDraftEntry"
  | "GfEntryToFormFieldConnection"
  | "GfEntryToFormFieldConnectionEdge"
  | "GfForm"
  | "GfFormToFormFieldConnection"
  | "GfFormToFormFieldConnectionEdge"
  | "GfFormToGfEntryConnection"
  | "GfFormToGfEntryConnectionEdge"
  | "GfLogger"
  | "GfSettings"
  | "GfSettingsLogging"
  | "GfSubmittedEntry"
  | "HCMSFooter"
  | "HCMSHeader"
  | "HCMSSocialLinks"
  | "HiddenField"
  | "HierarchicalContentNodeToContentNodeAncestorsConnection"
  | "HierarchicalContentNodeToContentNodeAncestorsConnectionEdge"
  | "HierarchicalContentNodeToContentNodeChildrenConnection"
  | "HierarchicalContentNodeToContentNodeChildrenConnectionEdge"
  | "HierarchicalContentNodeToParentContentNodeConnectionEdge"
  | "HtmlField"
  | "ImageFieldValue"
  | "ListField"
  | "ListFieldChoice"
  | "ListFieldValue"
  | "MediaDetails"
  | "MediaItem"
  | "MediaItemMeta"
  | "MediaItemToCommentConnection"
  | "MediaItemToCommentConnectionEdge"
  | "MediaSize"
  | "Menu"
  | "MenuItem"
  | "MenuItemToMenuConnectionEdge"
  | "MenuItemToMenuItemConnection"
  | "MenuItemToMenuItemConnectionEdge"
  | "MenuItemToMenuItemLinkableConnectionEdge"
  | "MenuToMenuItemConnection"
  | "MenuToMenuItemConnectionEdge"
  | "MultiSelectField"
  | "MultiSelectFieldChoice"
  | "Mutation"
  | "NameField"
  | "NameFieldChoice"
  | "NameFieldValue"
  | "NameInputProperty"
  | "NewEvent"
  | "NewEventToNewMediaCenterConnection"
  | "NewEventToNewMediaCenterConnectionEdge"
  | "NewEventToPreviewConnectionEdge"
  | "NewEventToTermNodeConnection"
  | "NewEventToTermNodeConnectionEdge"
  | "NewMediaCenter"
  | "NewMediaCenterToAncestorsNewMediaCenterConnection"
  | "NewMediaCenterToAncestorsNewMediaCenterConnectionEdge"
  | "NewMediaCenterToContentNodeConnection"
  | "NewMediaCenterToContentNodeConnectionEdge"
  | "NewMediaCenterToNewEventConnection"
  | "NewMediaCenterToNewEventConnectionEdge"
  | "NewMediaCenterToNewMediaCenterConnection"
  | "NewMediaCenterToNewMediaCenterConnectionEdge"
  | "NewMediaCenterToNewPressCoverageConnection"
  | "NewMediaCenterToNewPressCoverageConnectionEdge"
  | "NewMediaCenterToNewPressReleaseConnection"
  | "NewMediaCenterToNewPressReleaseConnectionEdge"
  | "NewMediaCenterToParentNewMediaCenterConnectionEdge"
  | "NewMediaCenterToTaxonomyConnectionEdge"
  | "NewPressCoverage"
  | "NewPressCoverageToNewMediaCenterConnection"
  | "NewPressCoverageToNewMediaCenterConnectionEdge"
  | "NewPressCoverageToPreviewConnectionEdge"
  | "NewPressCoverageToTermNodeConnection"
  | "NewPressCoverageToTermNodeConnectionEdge"
  | "NewPressRelease"
  | "NewPressReleaseToNewMediaCenterConnection"
  | "NewPressReleaseToNewMediaCenterConnectionEdge"
  | "NewPressReleaseToPreviewConnectionEdge"
  | "NewPressReleaseToTermNodeConnection"
  | "NewPressReleaseToTermNodeConnectionEdge"
  | "NodeWithAuthorToUserConnectionEdge"
  | "NodeWithFeaturedImageToMediaItemConnectionEdge"
  | "NodeWithRevisionsToContentNodeConnectionEdge"
  | "NumberField"
  | "Page"
  | "PageField"
  | "PageToCommentConnection"
  | "PageToCommentConnectionEdge"
  | "PageToPreviewConnectionEdge"
  | "PageToRevisionConnection"
  | "PageToRevisionConnectionEdge"
  | "Page_Standardpage"
  | "Page_Successstoriesacf"
  | "Page_Successstoriesacf_carouselSlider"
  | "Page_Successstoriesacf_pageLargeSlider"
  | "Page_Successstoriesacf_suggestedResources"
  | "Page_Threecolumnstaticpage"
  | "Page_Threecolumnstaticpage_Banner"
  | "Page_Threecolumnstaticpage_cards"
  | "Partner"
  | "PartnerToPreviewConnectionEdge"
  | "PasswordField"
  | "PasswordInputProperty"
  | "PhoneField"
  | "Plugin"
  | "Post"
  | "PostCategoryCheckboxField"
  | "PostCategoryFieldChoice"
  | "PostCategoryInputProperty"
  | "PostCategoryMultiSelectField"
  | "PostCategoryRadioField"
  | "PostCategorySelectField"
  | "PostContentField"
  | "PostCustomCheckboxField"
  | "PostCustomCheckboxFieldChoice"
  | "PostCustomDateField"
  | "PostCustomEmailField"
  | "PostCustomFileuploadField"
  | "PostCustomHiddenField"
  | "PostCustomInputProperty"
  | "PostCustomListField"
  | "PostCustomListFieldChoice"
  | "PostCustomMultiSelectField"
  | "PostCustomMultiSelectFieldChoice"
  | "PostCustomNumberField"
  | "PostCustomPhoneField"
  | "PostCustomRadioField"
  | "PostCustomRadioFieldChoice"
  | "PostCustomSelectField"
  | "PostCustomSelectFieldChoice"
  | "PostCustomTextAreaField"
  | "PostCustomTextField"
  | "PostCustomTimeField"
  | "PostCustomWebsiteField"
  | "PostExcerptField"
  | "PostFormat"
  | "PostFormatToContentNodeConnection"
  | "PostFormatToContentNodeConnectionEdge"
  | "PostFormatToPostConnection"
  | "PostFormatToPostConnectionEdge"
  | "PostFormatToProductsServiceConnection"
  | "PostFormatToProductsServiceConnectionEdge"
  | "PostFormatToTaxonomyConnectionEdge"
  | "PostImageField"
  | "PostTagsCheckboxField"
  | "PostTagsCheckboxFieldChoice"
  | "PostTagsInputProperty"
  | "PostTagsMultiSelectField"
  | "PostTagsMultiSelectFieldChoice"
  | "PostTagsRadioField"
  | "PostTagsRadioFieldChoice"
  | "PostTagsSelectField"
  | "PostTagsSelectFieldChoice"
  | "PostTagsTextField"
  | "PostTitleField"
  | "PostToCategoryConnection"
  | "PostToCategoryConnectionEdge"
  | "PostToCommentConnection"
  | "PostToCommentConnectionEdge"
  | "PostToPostFormatConnection"
  | "PostToPostFormatConnectionEdge"
  | "PostToPreviewConnectionEdge"
  | "PostToRevisionConnection"
  | "PostToRevisionConnectionEdge"
  | "PostToTagConnection"
  | "PostToTagConnectionEdge"
  | "PostToTermNodeConnection"
  | "PostToTermNodeConnectionEdge"
  | "PostTypeLabelDetails"
  | "PressCoverage"
  | "PressCoverageToPreviewConnectionEdge"
  | "PressCoverageToTermNodeConnection"
  | "PressCoverageToTermNodeConnectionEdge"
  | "PressRelease"
  | "PressReleaseToPreviewConnectionEdge"
  | "PressReleaseToTermNodeConnection"
  | "PressReleaseToTermNodeConnectionEdge"
  | "Pro"
  | "ProToAncestorsProConnection"
  | "ProToAncestorsProConnectionEdge"
  | "ProToParentProConnectionEdge"
  | "ProToProConnection"
  | "ProToProConnectionEdge"
  | "ProToTaxonomyConnectionEdge"
  | "ProductCard"
  | "ProductCardToPreviewConnectionEdge"
  | "ProductsService"
  | "ProductsServiceToPostFormatConnection"
  | "ProductsServiceToPostFormatConnectionEdge"
  | "ProductsServiceToPreviewConnectionEdge"
  | "ProductsServiceToRevisionConnection"
  | "ProductsServiceToRevisionConnectionEdge"
  | "ProductsServiceToTermNodeConnection"
  | "ProductsServiceToTermNodeConnectionEdge"
  | "ProductsService_Standardpage"
  | "Project"
  | "ProjectToPreviewConnectionEdge"
  | "Query"
  | "RadioField"
  | "RadioFieldChoice"
  | "ReadingSettings"
  | "RegisterUserPayload"
  | "ResetUserPasswordPayload"
  | "RestoreCommentPayload"
  | "RootQueryToCategoryConnection"
  | "RootQueryToCategoryConnectionEdge"
  | "RootQueryToCommentConnection"
  | "RootQueryToCommentConnectionEdge"
  | "RootQueryToContentNodeConnection"
  | "RootQueryToContentNodeConnectionEdge"
  | "RootQueryToContentRevisionUnionConnection"
  | "RootQueryToContentRevisionUnionConnectionEdge"
  | "RootQueryToContentTypeConnection"
  | "RootQueryToContentTypeConnectionEdge"
  | "RootQueryToEnqueuedScriptConnection"
  | "RootQueryToEnqueuedScriptConnectionEdge"
  | "RootQueryToEnqueuedStylesheetConnection"
  | "RootQueryToEnqueuedStylesheetConnectionEdge"
  | "RootQueryToGfEntryConnection"
  | "RootQueryToGfEntryConnectionEdge"
  | "RootQueryToGfFormConnection"
  | "RootQueryToGfFormConnectionEdge"
  | "RootQueryToGfSubmittedEntryConnection"
  | "RootQueryToGfSubmittedEntryConnectionEdge"
  | "RootQueryToMediaItemConnection"
  | "RootQueryToMediaItemConnectionEdge"
  | "RootQueryToMenuConnection"
  | "RootQueryToMenuConnectionEdge"
  | "RootQueryToMenuItemConnection"
  | "RootQueryToMenuItemConnectionEdge"
  | "RootQueryToNewEventConnection"
  | "RootQueryToNewEventConnectionEdge"
  | "RootQueryToNewMediaCenterConnection"
  | "RootQueryToNewMediaCenterConnectionEdge"
  | "RootQueryToNewPressCoverageConnection"
  | "RootQueryToNewPressCoverageConnectionEdge"
  | "RootQueryToNewPressReleaseConnection"
  | "RootQueryToNewPressReleaseConnectionEdge"
  | "RootQueryToPageConnection"
  | "RootQueryToPageConnectionEdge"
  | "RootQueryToPartnerConnection"
  | "RootQueryToPartnerConnectionEdge"
  | "RootQueryToPluginConnection"
  | "RootQueryToPluginConnectionEdge"
  | "RootQueryToPostConnection"
  | "RootQueryToPostConnectionEdge"
  | "RootQueryToPostFormatConnection"
  | "RootQueryToPostFormatConnectionEdge"
  | "RootQueryToPressCoverageConnection"
  | "RootQueryToPressCoverageConnectionEdge"
  | "RootQueryToPressReleaseConnection"
  | "RootQueryToPressReleaseConnectionEdge"
  | "RootQueryToProConnection"
  | "RootQueryToProConnectionEdge"
  | "RootQueryToProductCardConnection"
  | "RootQueryToProductCardConnectionEdge"
  | "RootQueryToProductsServiceConnection"
  | "RootQueryToProductsServiceConnectionEdge"
  | "RootQueryToProjectConnection"
  | "RootQueryToProjectConnectionEdge"
  | "RootQueryToTagConnection"
  | "RootQueryToTagConnectionEdge"
  | "RootQueryToTaxonomyConnection"
  | "RootQueryToTaxonomyConnectionEdge"
  | "RootQueryToTeamMemberConnection"
  | "RootQueryToTeamMemberConnectionEdge"
  | "RootQueryToTermNodeConnection"
  | "RootQueryToTermNodeConnectionEdge"
  | "RootQueryToThemeConnection"
  | "RootQueryToThemeConnectionEdge"
  | "RootQueryToUserConnection"
  | "RootQueryToUserConnectionEdge"
  | "RootQueryToUserRoleConnection"
  | "RootQueryToUserRoleConnectionEdge"
  | "SectionField"
  | "SelectField"
  | "SelectFieldChoice"
  | "SendPasswordResetEmailPayload"
  | "Settings"
  | "SignatureField"
  | "SubmitGfDraftEntryPayload"
  | "SubmitGfFormPayload"
  | "Subscription"
  | "Tag"
  | "TagToContentNodeConnection"
  | "TagToContentNodeConnectionEdge"
  | "TagToPostConnection"
  | "TagToPostConnectionEdge"
  | "TagToTaxonomyConnectionEdge"
  | "Taxonomy"
  | "TaxonomyToContentTypeConnection"
  | "TaxonomyToContentTypeConnectionEdge"
  | "TeamMember"
  | "TeamMemberToPreviewConnectionEdge"
  | "TermNodeToEnqueuedScriptConnection"
  | "TermNodeToEnqueuedScriptConnectionEdge"
  | "TermNodeToEnqueuedStylesheetConnection"
  | "TermNodeToEnqueuedStylesheetConnectionEdge"
  | "TextAreaField"
  | "TextField"
  | "Theme"
  | "TimeField"
  | "TimeFieldValue"
  | "TimeInputProperty"
  | "UpdateCategoryPayload"
  | "UpdateCommentPayload"
  | "UpdateGfDraftEntryPayload"
  | "UpdateGfEntryPayload"
  | "UpdateMediaItemPayload"
  | "UpdateNewEventPayload"
  | "UpdateNewMediaCenterPayload"
  | "UpdateNewPressCoveragePayload"
  | "UpdateNewPressReleasePayload"
  | "UpdatePagePayload"
  | "UpdatePartnerPayload"
  | "UpdatePostFormatPayload"
  | "UpdatePostPayload"
  | "UpdatePressCoveragePayload"
  | "UpdatePressReleasePayload"
  | "UpdateProPayload"
  | "UpdateProductCardPayload"
  | "UpdateProductsServicePayload"
  | "UpdateProjectPayload"
  | "UpdateSettingsPayload"
  | "UpdateTagPayload"
  | "UpdateTeamMemberPayload"
  | "UpdateUserPayload"
  | "User"
  | "UserRole"
  | "UserToCommentConnection"
  | "UserToCommentConnectionEdge"
  | "UserToContentRevisionUnionConnection"
  | "UserToContentRevisionUnionConnectionEdge"
  | "UserToEnqueuedScriptConnection"
  | "UserToEnqueuedScriptConnectionEdge"
  | "UserToEnqueuedStylesheetConnection"
  | "UserToEnqueuedStylesheetConnectionEdge"
  | "UserToMediaItemConnection"
  | "UserToMediaItemConnectionEdge"
  | "UserToNewEventConnection"
  | "UserToNewEventConnectionEdge"
  | "UserToNewPressCoverageConnection"
  | "UserToNewPressCoverageConnectionEdge"
  | "UserToNewPressReleaseConnection"
  | "UserToNewPressReleaseConnectionEdge"
  | "UserToPageConnection"
  | "UserToPageConnectionEdge"
  | "UserToPartnerConnection"
  | "UserToPartnerConnectionEdge"
  | "UserToPostConnection"
  | "UserToPostConnectionEdge"
  | "UserToProductCardConnection"
  | "UserToProductCardConnectionEdge"
  | "UserToProjectConnection"
  | "UserToProjectConnectionEdge"
  | "UserToTeamMemberConnection"
  | "UserToTeamMemberConnectionEdge"
  | "UserToUserRoleConnection"
  | "UserToUserRoleConnectionEdge"
  | "WPPageInfo"
  | "WebsiteField"
  | "WritingSettings";

export interface $AcfFieldGroup {
  Page_Standardpage?: Page_Standardpage;
  Page_Successstoriesacf?: Page_Successstoriesacf;
  Page_Successstoriesacf_carouselSlider?: Page_Successstoriesacf_carouselSlider;
  Page_Successstoriesacf_pageLargeSlider?: Page_Successstoriesacf_pageLargeSlider;
  Page_Successstoriesacf_suggestedResources?: Page_Successstoriesacf_suggestedResources;
  Page_Threecolumnstaticpage?: Page_Threecolumnstaticpage;
  Page_Threecolumnstaticpage_Banner?: Page_Threecolumnstaticpage_Banner;
  Page_Threecolumnstaticpage_cards?: Page_Threecolumnstaticpage_cards;
  ProductsService_Standardpage?: ProductsService_Standardpage;
}

export interface $Commenter {
  CommentAuthor?: CommentAuthor;
  User?: User;
}

export interface $ContentNode {
  MediaItem?: MediaItem;
  NewEvent?: NewEvent;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  TeamMember?: TeamMember;
}

export interface $ContentRevisionUnion {
  Page?: Page;
  Post?: Post;
  ProductsService?: ProductsService;
}

export interface $ContentTemplate {
  DefaultTemplate?: DefaultTemplate;
}

export interface $DatabaseIdentifier {
  Category?: Category;
  Comment?: Comment;
  GfForm?: GfForm;
  GfSubmittedEntry?: GfSubmittedEntry;
  MediaItem?: MediaItem;
  Menu?: Menu;
  MenuItem?: MenuItem;
  NewEvent?: NewEvent;
  NewMediaCenter?: NewMediaCenter;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PostFormat?: PostFormat;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  Pro?: Pro;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  Tag?: Tag;
  TeamMember?: TeamMember;
  User?: User;
}

export interface $EnqueuedAsset {
  EnqueuedScript?: EnqueuedScript;
  EnqueuedStylesheet?: EnqueuedStylesheet;
}

export interface $FormField {
  AddressField?: AddressField;
  CaptchaField?: CaptchaField;
  CheckboxField?: CheckboxField;
  ConsentField?: ConsentField;
  DateField?: DateField;
  EmailField?: EmailField;
  FileUploadField?: FileUploadField;
  HiddenField?: HiddenField;
  HtmlField?: HtmlField;
  ListField?: ListField;
  MultiSelectField?: MultiSelectField;
  NameField?: NameField;
  NumberField?: NumberField;
  PageField?: PageField;
  PasswordField?: PasswordField;
  PhoneField?: PhoneField;
  PostCategoryCheckboxField?: PostCategoryCheckboxField;
  PostCategoryMultiSelectField?: PostCategoryMultiSelectField;
  PostCategoryRadioField?: PostCategoryRadioField;
  PostCategorySelectField?: PostCategorySelectField;
  PostContentField?: PostContentField;
  PostCustomCheckboxField?: PostCustomCheckboxField;
  PostCustomDateField?: PostCustomDateField;
  PostCustomEmailField?: PostCustomEmailField;
  PostCustomFileuploadField?: PostCustomFileuploadField;
  PostCustomHiddenField?: PostCustomHiddenField;
  PostCustomListField?: PostCustomListField;
  PostCustomMultiSelectField?: PostCustomMultiSelectField;
  PostCustomNumberField?: PostCustomNumberField;
  PostCustomPhoneField?: PostCustomPhoneField;
  PostCustomRadioField?: PostCustomRadioField;
  PostCustomSelectField?: PostCustomSelectField;
  PostCustomTextAreaField?: PostCustomTextAreaField;
  PostCustomTextField?: PostCustomTextField;
  PostCustomTimeField?: PostCustomTimeField;
  PostCustomWebsiteField?: PostCustomWebsiteField;
  PostExcerptField?: PostExcerptField;
  PostImageField?: PostImageField;
  PostTagsCheckboxField?: PostTagsCheckboxField;
  PostTagsMultiSelectField?: PostTagsMultiSelectField;
  PostTagsRadioField?: PostTagsRadioField;
  PostTagsSelectField?: PostTagsSelectField;
  PostTagsTextField?: PostTagsTextField;
  PostTitleField?: PostTitleField;
  RadioField?: RadioField;
  SectionField?: SectionField;
  SelectField?: SelectField;
  SignatureField?: SignatureField;
  TextAreaField?: TextAreaField;
  TextField?: TextField;
  TimeField?: TimeField;
  WebsiteField?: WebsiteField;
}

export interface $GfEntry {
  GfDraftEntry?: GfDraftEntry;
  GfSubmittedEntry?: GfSubmittedEntry;
}

export interface $HierarchicalContentNode {
  MediaItem?: MediaItem;
  Page?: Page;
  ProductsService?: ProductsService;
}

export interface $HierarchicalTermNode {
  Category?: Category;
  NewMediaCenter?: NewMediaCenter;
  Pro?: Pro;
}

export interface $MenuItemLinkable {
  Category?: Category;
  NewMediaCenter?: NewMediaCenter;
  Page?: Page;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  Pro?: Pro;
  ProductsService?: ProductsService;
  Tag?: Tag;
}

export interface $MenuItemObjectUnion {
  Category?: Category;
  NewMediaCenter?: NewMediaCenter;
  Page?: Page;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  Pro?: Pro;
  ProductsService?: ProductsService;
  Tag?: Tag;
}

export interface $Node {
  Category?: Category;
  Comment?: Comment;
  CommentAuthor?: CommentAuthor;
  ContentType?: ContentType;
  EnqueuedScript?: EnqueuedScript;
  EnqueuedStylesheet?: EnqueuedStylesheet;
  GfDraftEntry?: GfDraftEntry;
  GfForm?: GfForm;
  GfSubmittedEntry?: GfSubmittedEntry;
  MediaItem?: MediaItem;
  Menu?: Menu;
  MenuItem?: MenuItem;
  NewEvent?: NewEvent;
  NewMediaCenter?: NewMediaCenter;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Plugin?: Plugin;
  Post?: Post;
  PostFormat?: PostFormat;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  Pro?: Pro;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  Tag?: Tag;
  Taxonomy?: Taxonomy;
  TeamMember?: TeamMember;
  Theme?: Theme;
  User?: User;
  UserRole?: UserRole;
}

export interface $NodeWithAuthor {
  MediaItem?: MediaItem;
  NewEvent?: NewEvent;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  ProductCard?: ProductCard;
  Project?: Project;
  TeamMember?: TeamMember;
}

export interface $NodeWithComments {
  MediaItem?: MediaItem;
  Page?: Page;
  Post?: Post;
}

export interface $NodeWithContentEditor {
  Page?: Page;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  ProductsService?: ProductsService;
}

export interface $NodeWithExcerpt {
  Post?: Post;
}

export interface $NodeWithFeaturedImage {
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  ProductsService?: ProductsService;
  TeamMember?: TeamMember;
}

export interface $NodeWithForm {
  GfDraftEntry?: GfDraftEntry;
  GfSubmittedEntry?: GfSubmittedEntry;
}

export interface $NodeWithPageAttributes {
  Page?: Page;
  ProductsService?: ProductsService;
}

export interface $NodeWithRevisions {
  Page?: Page;
  Post?: Post;
  ProductsService?: ProductsService;
}

export interface $NodeWithTemplate {
  MediaItem?: MediaItem;
  NewEvent?: NewEvent;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  TeamMember?: TeamMember;
}

export interface $NodeWithTitle {
  MediaItem?: MediaItem;
  NewEvent?: NewEvent;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  TeamMember?: TeamMember;
}

export interface $NodeWithTrackbacks {
  Post?: Post;
}

export interface $PostCategoryField {
  PostCategoryCheckboxField?: PostCategoryCheckboxField;
  PostCategoryMultiSelectField?: PostCategoryMultiSelectField;
  PostCategoryRadioField?: PostCategoryRadioField;
  PostCategorySelectField?: PostCategorySelectField;
}

export interface $PostCustomField {
  PostCustomCheckboxField?: PostCustomCheckboxField;
  PostCustomDateField?: PostCustomDateField;
  PostCustomEmailField?: PostCustomEmailField;
  PostCustomFileuploadField?: PostCustomFileuploadField;
  PostCustomHiddenField?: PostCustomHiddenField;
  PostCustomListField?: PostCustomListField;
  PostCustomMultiSelectField?: PostCustomMultiSelectField;
  PostCustomNumberField?: PostCustomNumberField;
  PostCustomPhoneField?: PostCustomPhoneField;
  PostCustomRadioField?: PostCustomRadioField;
  PostCustomSelectField?: PostCustomSelectField;
  PostCustomTextAreaField?: PostCustomTextAreaField;
  PostCustomTextField?: PostCustomTextField;
  PostCustomTimeField?: PostCustomTimeField;
  PostCustomWebsiteField?: PostCustomWebsiteField;
}

export interface $PostTagsField {
  PostTagsCheckboxField?: PostTagsCheckboxField;
  PostTagsMultiSelectField?: PostTagsMultiSelectField;
  PostTagsRadioField?: PostTagsRadioField;
  PostTagsSelectField?: PostTagsSelectField;
  PostTagsTextField?: PostTagsTextField;
}

export interface $TermNode {
  Category?: Category;
  NewMediaCenter?: NewMediaCenter;
  PostFormat?: PostFormat;
  Pro?: Pro;
  Tag?: Tag;
}

export interface $UniformResourceIdentifiable {
  Category?: Category;
  ContentType?: ContentType;
  MediaItem?: MediaItem;
  NewEvent?: NewEvent;
  NewMediaCenter?: NewMediaCenter;
  NewPressCoverage?: NewPressCoverage;
  NewPressRelease?: NewPressRelease;
  Page?: Page;
  Partner?: Partner;
  Post?: Post;
  PostFormat?: PostFormat;
  PressCoverage?: PressCoverage;
  PressRelease?: PressRelease;
  Pro?: Pro;
  ProductCard?: ProductCard;
  ProductsService?: ProductsService;
  Project?: Project;
  Tag?: Tag;
  TeamMember?: TeamMember;
  User?: User;
}

export interface GeneratedSchema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export type MakeNullable<T> = {
  [K in keyof T]: T[K] | undefined;
};

export interface ScalarsEnums extends MakeNullable<Scalars> {
  AddressFieldCountryEnum: AddressFieldCountryEnum | undefined;
  AddressFieldTypeEnum: AddressFieldTypeEnum | undefined;
  AmPmEnum: AmPmEnum | undefined;
  AvatarRatingEnum: AvatarRatingEnum | undefined;
  CaptchaFieldBadgePositionEnum: CaptchaFieldBadgePositionEnum | undefined;
  CaptchaFieldThemeEnum: CaptchaFieldThemeEnum | undefined;
  CaptchaFieldTypeEnum: CaptchaFieldTypeEnum | undefined;
  CategoryIdType: CategoryIdType | undefined;
  CommentsConnectionOrderbyEnum: CommentsConnectionOrderbyEnum | undefined;
  ConditionalLogicActionTypeEnum: ConditionalLogicActionTypeEnum | undefined;
  ConditionalLogicLogicTypeEnum: ConditionalLogicLogicTypeEnum | undefined;
  ContentNodeIdTypeEnum: ContentNodeIdTypeEnum | undefined;
  ContentTypeEnum: ContentTypeEnum | undefined;
  ContentTypeIdTypeEnum: ContentTypeIdTypeEnum | undefined;
  ContentTypesOfCategoryEnum: ContentTypesOfCategoryEnum | undefined;
  ContentTypesOfNewMediaCenterEnum:
    | ContentTypesOfNewMediaCenterEnum
    | undefined;
  ContentTypesOfPostFormatEnum: ContentTypesOfPostFormatEnum | undefined;
  ContentTypesOfTagEnum: ContentTypesOfTagEnum | undefined;
  DateFieldFormatEnum: DateFieldFormatEnum | undefined;
  DateFieldTypeEnum: DateFieldTypeEnum | undefined;
  DraftEntryIdTypeEnum: DraftEntryIdTypeEnum | undefined;
  EntryIdTypeEnum: EntryIdTypeEnum | undefined;
  EntryStatusEnum: EntryStatusEnum | undefined;
  EntryTypeEnum: EntryTypeEnum | undefined;
  FieldFiltersModeEnum: FieldFiltersModeEnum | undefined;
  FieldFiltersOperatorEnum: FieldFiltersOperatorEnum | undefined;
  FormButtonTypeEnum: FormButtonTypeEnum | undefined;
  FormConfirmationTypeEnum: FormConfirmationTypeEnum | undefined;
  FormDescriptionPlacementEnum: FormDescriptionPlacementEnum | undefined;
  FormFieldCalendarIconTypeEnum: FormFieldCalendarIconTypeEnum | undefined;
  FormFieldDescriptionPlacementEnum:
    | FormFieldDescriptionPlacementEnum
    | undefined;
  FormFieldLabelPlacementEnum: FormFieldLabelPlacementEnum | undefined;
  FormFieldRequiredIndicatorEnum: FormFieldRequiredIndicatorEnum | undefined;
  FormFieldSizeEnum: FormFieldSizeEnum | undefined;
  FormFieldSubLabelPlacementEnum: FormFieldSubLabelPlacementEnum | undefined;
  FormFieldTypeEnum: FormFieldTypeEnum | undefined;
  FormFieldVisibilityEnum: FormFieldVisibilityEnum | undefined;
  FormIdTypeEnum: FormIdTypeEnum | undefined;
  FormLabelPlacementEnum: FormLabelPlacementEnum | undefined;
  FormLimitEntriesPeriodEnum: FormLimitEntriesPeriodEnum | undefined;
  FormNotificationToTypeEnum: FormNotificationToTypeEnum | undefined;
  FormPageProgressStyleEnum: FormPageProgressStyleEnum | undefined;
  FormPageProgressTypeEnum: FormPageProgressTypeEnum | undefined;
  FormRetentionPolicyEnum: FormRetentionPolicyEnum | undefined;
  FormRuleOperatorEnum: FormRuleOperatorEnum | undefined;
  FormStatusEnum: FormStatusEnum | undefined;
  FormSubLabelPlacementEnum: FormSubLabelPlacementEnum | undefined;
  GfCurrencyEnum: GfCurrencyEnum | undefined;
  MediaItemIdType: MediaItemIdType | undefined;
  MediaItemSizeEnum: MediaItemSizeEnum | undefined;
  MediaItemStatusEnum: MediaItemStatusEnum | undefined;
  MenuItemNodeIdTypeEnum: MenuItemNodeIdTypeEnum | undefined;
  MenuLocationEnum: MenuLocationEnum | undefined;
  MenuNodeIdTypeEnum: MenuNodeIdTypeEnum | undefined;
  MimeTypeEnum: MimeTypeEnum | undefined;
  NewEventIdType: NewEventIdType | undefined;
  NewMediaCenterIdType: NewMediaCenterIdType | undefined;
  NewPressCoverageIdType: NewPressCoverageIdType | undefined;
  NewPressReleaseIdType: NewPressReleaseIdType | undefined;
  NumberFieldFormatEnum: NumberFieldFormatEnum | undefined;
  OrderEnum: OrderEnum | undefined;
  PageIdType: PageIdType | undefined;
  PartnerIdType: PartnerIdType | undefined;
  PasswordFieldMinStrengthEnum: PasswordFieldMinStrengthEnum | undefined;
  PhoneFieldFormatEnum: PhoneFieldFormatEnum | undefined;
  PostFormatIdType: PostFormatIdType | undefined;
  PostFormatTypeEnum: PostFormatTypeEnum | undefined;
  PostIdType: PostIdType | undefined;
  PostObjectFieldFormatEnum: PostObjectFieldFormatEnum | undefined;
  PostObjectsConnectionDateColumnEnum:
    | PostObjectsConnectionDateColumnEnum
    | undefined;
  PostObjectsConnectionOrderbyEnum:
    | PostObjectsConnectionOrderbyEnum
    | undefined;
  PostStatusEnum: PostStatusEnum | undefined;
  PressCoverageIdType: PressCoverageIdType | undefined;
  PressReleaseIdType: PressReleaseIdType | undefined;
  ProIdType: ProIdType | undefined;
  ProductCardIdType: ProductCardIdType | undefined;
  ProductsServiceIdType: ProductsServiceIdType | undefined;
  ProjectIdType: ProjectIdType | undefined;
  RelationEnum: RelationEnum | undefined;
  SignatureFieldBorderStyleEnum: SignatureFieldBorderStyleEnum | undefined;
  SignatureFieldBorderWidthEnum: SignatureFieldBorderWidthEnum | undefined;
  SubmittedEntryIdTypeEnum: SubmittedEntryIdTypeEnum | undefined;
  TagIdType: TagIdType | undefined;
  TaxonomyEnum: TaxonomyEnum | undefined;
  TaxonomyIdTypeEnum: TaxonomyIdTypeEnum | undefined;
  TeamMemberIdType: TeamMemberIdType | undefined;
  TermNodeIdTypeEnum: TermNodeIdTypeEnum | undefined;
  TermObjectsConnectionOrderbyEnum:
    | TermObjectsConnectionOrderbyEnum
    | undefined;
  TimeFieldFormatEnum: TimeFieldFormatEnum | undefined;
  UserNodeIdTypeEnum: UserNodeIdTypeEnum | undefined;
  UserRoleEnum: UserRoleEnum | undefined;
  UsersConnectionOrderbyEnum: UsersConnectionOrderbyEnum | undefined;
  UsersConnectionSearchColumnEnum: UsersConnectionSearchColumnEnum | undefined;
}
